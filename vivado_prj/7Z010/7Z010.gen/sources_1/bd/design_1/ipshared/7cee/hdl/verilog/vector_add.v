// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vector_add_vector_add,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1923,HLS_SYN_LUT=2147,HLS_VERSION=2020_2}" *)

module vector_add (
        ap_clk,
        ap_rst_n,
        m_axi_a_AWVALID,
        m_axi_a_AWREADY,
        m_axi_a_AWADDR,
        m_axi_a_AWID,
        m_axi_a_AWLEN,
        m_axi_a_AWSIZE,
        m_axi_a_AWBURST,
        m_axi_a_AWLOCK,
        m_axi_a_AWCACHE,
        m_axi_a_AWPROT,
        m_axi_a_AWQOS,
        m_axi_a_AWREGION,
        m_axi_a_AWUSER,
        m_axi_a_WVALID,
        m_axi_a_WREADY,
        m_axi_a_WDATA,
        m_axi_a_WSTRB,
        m_axi_a_WLAST,
        m_axi_a_WID,
        m_axi_a_WUSER,
        m_axi_a_ARVALID,
        m_axi_a_ARREADY,
        m_axi_a_ARADDR,
        m_axi_a_ARID,
        m_axi_a_ARLEN,
        m_axi_a_ARSIZE,
        m_axi_a_ARBURST,
        m_axi_a_ARLOCK,
        m_axi_a_ARCACHE,
        m_axi_a_ARPROT,
        m_axi_a_ARQOS,
        m_axi_a_ARREGION,
        m_axi_a_ARUSER,
        m_axi_a_RVALID,
        m_axi_a_RREADY,
        m_axi_a_RDATA,
        m_axi_a_RLAST,
        m_axi_a_RID,
        m_axi_a_RUSER,
        m_axi_a_RRESP,
        m_axi_a_BVALID,
        m_axi_a_BREADY,
        m_axi_a_BRESP,
        m_axi_a_BID,
        m_axi_a_BUSER,
        m_axi_b_AWVALID,
        m_axi_b_AWREADY,
        m_axi_b_AWADDR,
        m_axi_b_AWID,
        m_axi_b_AWLEN,
        m_axi_b_AWSIZE,
        m_axi_b_AWBURST,
        m_axi_b_AWLOCK,
        m_axi_b_AWCACHE,
        m_axi_b_AWPROT,
        m_axi_b_AWQOS,
        m_axi_b_AWREGION,
        m_axi_b_AWUSER,
        m_axi_b_WVALID,
        m_axi_b_WREADY,
        m_axi_b_WDATA,
        m_axi_b_WSTRB,
        m_axi_b_WLAST,
        m_axi_b_WID,
        m_axi_b_WUSER,
        m_axi_b_ARVALID,
        m_axi_b_ARREADY,
        m_axi_b_ARADDR,
        m_axi_b_ARID,
        m_axi_b_ARLEN,
        m_axi_b_ARSIZE,
        m_axi_b_ARBURST,
        m_axi_b_ARLOCK,
        m_axi_b_ARCACHE,
        m_axi_b_ARPROT,
        m_axi_b_ARQOS,
        m_axi_b_ARREGION,
        m_axi_b_ARUSER,
        m_axi_b_RVALID,
        m_axi_b_RREADY,
        m_axi_b_RDATA,
        m_axi_b_RLAST,
        m_axi_b_RID,
        m_axi_b_RUSER,
        m_axi_b_RRESP,
        m_axi_b_BVALID,
        m_axi_b_BREADY,
        m_axi_b_BRESP,
        m_axi_b_BID,
        m_axi_b_BUSER,
        m_axi_c_AWVALID,
        m_axi_c_AWREADY,
        m_axi_c_AWADDR,
        m_axi_c_AWID,
        m_axi_c_AWLEN,
        m_axi_c_AWSIZE,
        m_axi_c_AWBURST,
        m_axi_c_AWLOCK,
        m_axi_c_AWCACHE,
        m_axi_c_AWPROT,
        m_axi_c_AWQOS,
        m_axi_c_AWREGION,
        m_axi_c_AWUSER,
        m_axi_c_WVALID,
        m_axi_c_WREADY,
        m_axi_c_WDATA,
        m_axi_c_WSTRB,
        m_axi_c_WLAST,
        m_axi_c_WID,
        m_axi_c_WUSER,
        m_axi_c_ARVALID,
        m_axi_c_ARREADY,
        m_axi_c_ARADDR,
        m_axi_c_ARID,
        m_axi_c_ARLEN,
        m_axi_c_ARSIZE,
        m_axi_c_ARBURST,
        m_axi_c_ARLOCK,
        m_axi_c_ARCACHE,
        m_axi_c_ARPROT,
        m_axi_c_ARQOS,
        m_axi_c_ARREGION,
        m_axi_c_ARUSER,
        m_axi_c_RVALID,
        m_axi_c_RREADY,
        m_axi_c_RDATA,
        m_axi_c_RLAST,
        m_axi_c_RID,
        m_axi_c_RUSER,
        m_axi_c_RRESP,
        m_axi_c_BVALID,
        m_axi_c_BREADY,
        m_axi_c_BRESP,
        m_axi_c_BID,
        m_axi_c_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_pp0_stage0 = 17'd128;
parameter    ap_ST_fsm_state10 = 17'd256;
parameter    ap_ST_fsm_state11 = 17'd512;
parameter    ap_ST_fsm_state12 = 17'd1024;
parameter    ap_ST_fsm_pp2_stage0 = 17'd2048;
parameter    ap_ST_fsm_state15 = 17'd4096;
parameter    ap_ST_fsm_state16 = 17'd8192;
parameter    ap_ST_fsm_state17 = 17'd16384;
parameter    ap_ST_fsm_state18 = 17'd32768;
parameter    ap_ST_fsm_state19 = 17'd65536;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_ID_WIDTH = 1;
parameter    C_M_AXI_A_ADDR_WIDTH = 64;
parameter    C_M_AXI_A_DATA_WIDTH = 32;
parameter    C_M_AXI_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUSER_WIDTH = 1;
parameter    C_M_AXI_A_TARGET_ADDR = 0;
parameter    C_M_AXI_A_USER_VALUE = 0;
parameter    C_M_AXI_A_PROT_VALUE = 0;
parameter    C_M_AXI_A_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_B_ID_WIDTH = 1;
parameter    C_M_AXI_B_ADDR_WIDTH = 64;
parameter    C_M_AXI_B_DATA_WIDTH = 32;
parameter    C_M_AXI_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_TARGET_ADDR = 0;
parameter    C_M_AXI_B_USER_VALUE = 0;
parameter    C_M_AXI_B_PROT_VALUE = 0;
parameter    C_M_AXI_B_CACHE_VALUE = 3;
parameter    C_M_AXI_C_ID_WIDTH = 1;
parameter    C_M_AXI_C_ADDR_WIDTH = 64;
parameter    C_M_AXI_C_DATA_WIDTH = 32;
parameter    C_M_AXI_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_C_TARGET_ADDR = 0;
parameter    C_M_AXI_C_USER_VALUE = 0;
parameter    C_M_AXI_C_PROT_VALUE = 0;
parameter    C_M_AXI_C_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_A_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_C_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_a_AWVALID;
input   m_axi_a_AWREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_AWADDR;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_AWID;
output  [7:0] m_axi_a_AWLEN;
output  [2:0] m_axi_a_AWSIZE;
output  [1:0] m_axi_a_AWBURST;
output  [1:0] m_axi_a_AWLOCK;
output  [3:0] m_axi_a_AWCACHE;
output  [2:0] m_axi_a_AWPROT;
output  [3:0] m_axi_a_AWQOS;
output  [3:0] m_axi_a_AWREGION;
output  [C_M_AXI_A_AWUSER_WIDTH - 1:0] m_axi_a_AWUSER;
output   m_axi_a_WVALID;
input   m_axi_a_WREADY;
output  [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_WDATA;
output  [C_M_AXI_A_WSTRB_WIDTH - 1:0] m_axi_a_WSTRB;
output   m_axi_a_WLAST;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_WID;
output  [C_M_AXI_A_WUSER_WIDTH - 1:0] m_axi_a_WUSER;
output   m_axi_a_ARVALID;
input   m_axi_a_ARREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_ARADDR;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_ARID;
output  [7:0] m_axi_a_ARLEN;
output  [2:0] m_axi_a_ARSIZE;
output  [1:0] m_axi_a_ARBURST;
output  [1:0] m_axi_a_ARLOCK;
output  [3:0] m_axi_a_ARCACHE;
output  [2:0] m_axi_a_ARPROT;
output  [3:0] m_axi_a_ARQOS;
output  [3:0] m_axi_a_ARREGION;
output  [C_M_AXI_A_ARUSER_WIDTH - 1:0] m_axi_a_ARUSER;
input   m_axi_a_RVALID;
output   m_axi_a_RREADY;
input  [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_RDATA;
input   m_axi_a_RLAST;
input  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_RID;
input  [C_M_AXI_A_RUSER_WIDTH - 1:0] m_axi_a_RUSER;
input  [1:0] m_axi_a_RRESP;
input   m_axi_a_BVALID;
output   m_axi_a_BREADY;
input  [1:0] m_axi_a_BRESP;
input  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_BID;
input  [C_M_AXI_A_BUSER_WIDTH - 1:0] m_axi_a_BUSER;
output   m_axi_b_AWVALID;
input   m_axi_b_AWREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_AWADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_AWID;
output  [7:0] m_axi_b_AWLEN;
output  [2:0] m_axi_b_AWSIZE;
output  [1:0] m_axi_b_AWBURST;
output  [1:0] m_axi_b_AWLOCK;
output  [3:0] m_axi_b_AWCACHE;
output  [2:0] m_axi_b_AWPROT;
output  [3:0] m_axi_b_AWQOS;
output  [3:0] m_axi_b_AWREGION;
output  [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_b_AWUSER;
output   m_axi_b_WVALID;
input   m_axi_b_WREADY;
output  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_WDATA;
output  [C_M_AXI_B_WSTRB_WIDTH - 1:0] m_axi_b_WSTRB;
output   m_axi_b_WLAST;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_WID;
output  [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_b_WUSER;
output   m_axi_b_ARVALID;
input   m_axi_b_ARREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_ARADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_ARID;
output  [7:0] m_axi_b_ARLEN;
output  [2:0] m_axi_b_ARSIZE;
output  [1:0] m_axi_b_ARBURST;
output  [1:0] m_axi_b_ARLOCK;
output  [3:0] m_axi_b_ARCACHE;
output  [2:0] m_axi_b_ARPROT;
output  [3:0] m_axi_b_ARQOS;
output  [3:0] m_axi_b_ARREGION;
output  [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_b_ARUSER;
input   m_axi_b_RVALID;
output   m_axi_b_RREADY;
input  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_RDATA;
input   m_axi_b_RLAST;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_RID;
input  [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_b_RUSER;
input  [1:0] m_axi_b_RRESP;
input   m_axi_b_BVALID;
output   m_axi_b_BREADY;
input  [1:0] m_axi_b_BRESP;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_BID;
input  [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_b_BUSER;
output   m_axi_c_AWVALID;
input   m_axi_c_AWREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_AWADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_AWID;
output  [7:0] m_axi_c_AWLEN;
output  [2:0] m_axi_c_AWSIZE;
output  [1:0] m_axi_c_AWBURST;
output  [1:0] m_axi_c_AWLOCK;
output  [3:0] m_axi_c_AWCACHE;
output  [2:0] m_axi_c_AWPROT;
output  [3:0] m_axi_c_AWQOS;
output  [3:0] m_axi_c_AWREGION;
output  [C_M_AXI_C_AWUSER_WIDTH - 1:0] m_axi_c_AWUSER;
output   m_axi_c_WVALID;
input   m_axi_c_WREADY;
output  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_WDATA;
output  [C_M_AXI_C_WSTRB_WIDTH - 1:0] m_axi_c_WSTRB;
output   m_axi_c_WLAST;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_WID;
output  [C_M_AXI_C_WUSER_WIDTH - 1:0] m_axi_c_WUSER;
output   m_axi_c_ARVALID;
input   m_axi_c_ARREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_ARADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_ARID;
output  [7:0] m_axi_c_ARLEN;
output  [2:0] m_axi_c_ARSIZE;
output  [1:0] m_axi_c_ARBURST;
output  [1:0] m_axi_c_ARLOCK;
output  [3:0] m_axi_c_ARCACHE;
output  [2:0] m_axi_c_ARPROT;
output  [3:0] m_axi_c_ARQOS;
output  [3:0] m_axi_c_ARREGION;
output  [C_M_AXI_C_ARUSER_WIDTH - 1:0] m_axi_c_ARUSER;
input   m_axi_c_RVALID;
output   m_axi_c_RREADY;
input  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_RDATA;
input   m_axi_c_RLAST;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_RID;
input  [C_M_AXI_C_RUSER_WIDTH - 1:0] m_axi_c_RUSER;
input  [1:0] m_axi_c_RRESP;
input   m_axi_c_BVALID;
output   m_axi_c_BREADY;
input  [1:0] m_axi_c_BRESP;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_BID;
input  [C_M_AXI_C_BUSER_WIDTH - 1:0] m_axi_c_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    a_blk_n_AR;
reg    a_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    b_blk_n_AR;
reg    b_blk_n_R;
reg    c_blk_n_AW;
wire    ap_CS_fsm_state12;
reg    c_blk_n_W;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln21_reg_420;
reg    c_blk_n_B;
wire    ap_CS_fsm_state19;
wire    a_AWREADY;
wire    a_WREADY;
reg    a_ARVALID;
wire    a_ARREADY;
wire    a_RVALID;
reg    a_RREADY;
wire   [31:0] a_RDATA;
wire    a_RLAST;
wire   [0:0] a_RID;
wire   [0:0] a_RUSER;
wire   [1:0] a_RRESP;
wire    a_BVALID;
wire   [1:0] a_BRESP;
wire   [0:0] a_BID;
wire   [0:0] a_BUSER;
wire    b_AWREADY;
wire    b_WREADY;
reg    b_ARVALID;
wire    b_ARREADY;
wire    b_RVALID;
reg    b_RREADY;
wire   [31:0] b_RDATA;
wire    b_RLAST;
wire   [0:0] b_RID;
wire   [0:0] b_RUSER;
wire   [1:0] b_RRESP;
wire    b_BVALID;
wire   [1:0] b_BRESP;
wire   [0:0] b_BID;
wire   [0:0] b_BUSER;
reg    c_AWVALID;
wire    c_AWREADY;
reg    c_WVALID;
wire    c_WREADY;
wire    c_ARREADY;
wire    c_RVALID;
wire   [31:0] c_RDATA;
wire    c_RLAST;
wire   [0:0] c_RID;
wire   [0:0] c_RUSER;
wire   [1:0] c_RRESP;
wire    c_BVALID;
reg    c_BREADY;
wire   [1:0] c_BRESP;
wire   [0:0] c_BID;
wire   [0:0] c_BUSER;
reg   [1:0] i_reg_160;
reg   [1:0] i_2_reg_183;
wire   [1:0] add_ln10_fu_194_p2;
reg   [1:0] add_ln10_reg_380;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln10_fu_200_p2;
reg   [0:0] icmp_ln10_reg_385;
wire   [1:0] add_ln16_fu_236_p2;
wire    ap_CS_fsm_state11;
wire   [1:0] add_ln21_fu_311_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state13_pp2_stage0_iter0;
wire    ap_block_state14_pp2_stage0_iter1;
reg    ap_block_state14_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln21_fu_317_p2;
wire   [31:0] tmp_2_fu_332_p5;
reg   [31:0] tmp_2_reg_424;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state13;
reg   [1:0] ap_phi_mux_i_phi_fu_164_p4;
wire   [1:0] ap_phi_mux_i_1_phi_fu_176_p4;
reg   [1:0] i_1_reg_172;
wire   [0:0] icmp_ln16_fu_242_p2;
wire    ap_CS_fsm_state10;
reg    ap_block_state1_io;
wire    ap_block_pp2_stage0_01001;
reg   [31:0] tmp_a_2_fu_78;
reg   [31:0] tmp_a_2_1_fu_82;
reg   [31:0] tmp_a_2_2_fu_86;
reg   [31:0] tmp_b_2_fu_90;
reg   [31:0] tmp_b_2_1_fu_94;
reg   [31:0] tmp_b_2_2_fu_98;
reg   [31:0] tmp_c_2_fu_102;
wire   [31:0] tmp_c_0_fu_290_p2;
reg   [31:0] tmp_c_2_1_fu_106;
reg   [31:0] tmp_c_2_2_fu_110;
wire   [31:0] tmp_1_fu_278_p5;
wire   [31:0] tmp_fu_266_p5;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

vector_add_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

vector_add_a_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_A_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_CACHE_VALUE ))
a_m_axi_U(
    .AWVALID(m_axi_a_AWVALID),
    .AWREADY(m_axi_a_AWREADY),
    .AWADDR(m_axi_a_AWADDR),
    .AWID(m_axi_a_AWID),
    .AWLEN(m_axi_a_AWLEN),
    .AWSIZE(m_axi_a_AWSIZE),
    .AWBURST(m_axi_a_AWBURST),
    .AWLOCK(m_axi_a_AWLOCK),
    .AWCACHE(m_axi_a_AWCACHE),
    .AWPROT(m_axi_a_AWPROT),
    .AWQOS(m_axi_a_AWQOS),
    .AWREGION(m_axi_a_AWREGION),
    .AWUSER(m_axi_a_AWUSER),
    .WVALID(m_axi_a_WVALID),
    .WREADY(m_axi_a_WREADY),
    .WDATA(m_axi_a_WDATA),
    .WSTRB(m_axi_a_WSTRB),
    .WLAST(m_axi_a_WLAST),
    .WID(m_axi_a_WID),
    .WUSER(m_axi_a_WUSER),
    .ARVALID(m_axi_a_ARVALID),
    .ARREADY(m_axi_a_ARREADY),
    .ARADDR(m_axi_a_ARADDR),
    .ARID(m_axi_a_ARID),
    .ARLEN(m_axi_a_ARLEN),
    .ARSIZE(m_axi_a_ARSIZE),
    .ARBURST(m_axi_a_ARBURST),
    .ARLOCK(m_axi_a_ARLOCK),
    .ARCACHE(m_axi_a_ARCACHE),
    .ARPROT(m_axi_a_ARPROT),
    .ARQOS(m_axi_a_ARQOS),
    .ARREGION(m_axi_a_ARREGION),
    .ARUSER(m_axi_a_ARUSER),
    .RVALID(m_axi_a_RVALID),
    .RREADY(m_axi_a_RREADY),
    .RDATA(m_axi_a_RDATA),
    .RLAST(m_axi_a_RLAST),
    .RID(m_axi_a_RID),
    .RUSER(m_axi_a_RUSER),
    .RRESP(m_axi_a_RRESP),
    .BVALID(m_axi_a_BVALID),
    .BREADY(m_axi_a_BREADY),
    .BRESP(m_axi_a_BRESP),
    .BID(m_axi_a_BID),
    .BUSER(m_axi_a_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(a_ARVALID),
    .I_ARREADY(a_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd3),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(a_RVALID),
    .I_RREADY(a_RREADY),
    .I_RDATA(a_RDATA),
    .I_RID(a_RID),
    .I_RUSER(a_RUSER),
    .I_RRESP(a_RRESP),
    .I_RLAST(a_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(a_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(a_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(a_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(a_BRESP),
    .I_BID(a_BID),
    .I_BUSER(a_BUSER)
);

vector_add_b_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_B_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_CACHE_VALUE ))
b_m_axi_U(
    .AWVALID(m_axi_b_AWVALID),
    .AWREADY(m_axi_b_AWREADY),
    .AWADDR(m_axi_b_AWADDR),
    .AWID(m_axi_b_AWID),
    .AWLEN(m_axi_b_AWLEN),
    .AWSIZE(m_axi_b_AWSIZE),
    .AWBURST(m_axi_b_AWBURST),
    .AWLOCK(m_axi_b_AWLOCK),
    .AWCACHE(m_axi_b_AWCACHE),
    .AWPROT(m_axi_b_AWPROT),
    .AWQOS(m_axi_b_AWQOS),
    .AWREGION(m_axi_b_AWREGION),
    .AWUSER(m_axi_b_AWUSER),
    .WVALID(m_axi_b_WVALID),
    .WREADY(m_axi_b_WREADY),
    .WDATA(m_axi_b_WDATA),
    .WSTRB(m_axi_b_WSTRB),
    .WLAST(m_axi_b_WLAST),
    .WID(m_axi_b_WID),
    .WUSER(m_axi_b_WUSER),
    .ARVALID(m_axi_b_ARVALID),
    .ARREADY(m_axi_b_ARREADY),
    .ARADDR(m_axi_b_ARADDR),
    .ARID(m_axi_b_ARID),
    .ARLEN(m_axi_b_ARLEN),
    .ARSIZE(m_axi_b_ARSIZE),
    .ARBURST(m_axi_b_ARBURST),
    .ARLOCK(m_axi_b_ARLOCK),
    .ARCACHE(m_axi_b_ARCACHE),
    .ARPROT(m_axi_b_ARPROT),
    .ARQOS(m_axi_b_ARQOS),
    .ARREGION(m_axi_b_ARREGION),
    .ARUSER(m_axi_b_ARUSER),
    .RVALID(m_axi_b_RVALID),
    .RREADY(m_axi_b_RREADY),
    .RDATA(m_axi_b_RDATA),
    .RLAST(m_axi_b_RLAST),
    .RID(m_axi_b_RID),
    .RUSER(m_axi_b_RUSER),
    .RRESP(m_axi_b_RRESP),
    .BVALID(m_axi_b_BVALID),
    .BREADY(m_axi_b_BREADY),
    .BRESP(m_axi_b_BRESP),
    .BID(m_axi_b_BID),
    .BUSER(m_axi_b_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(b_ARVALID),
    .I_ARREADY(b_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd3),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(b_RVALID),
    .I_RREADY(b_RREADY),
    .I_RDATA(b_RDATA),
    .I_RID(b_RID),
    .I_RUSER(b_RUSER),
    .I_RRESP(b_RRESP),
    .I_RLAST(b_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(b_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(b_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(b_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(b_BRESP),
    .I_BID(b_BID),
    .I_BUSER(b_BUSER)
);

vector_add_c_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_C_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_C_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_C_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_C_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_C_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_C_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_C_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_C_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_C_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_C_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_C_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_C_CACHE_VALUE ))
c_m_axi_U(
    .AWVALID(m_axi_c_AWVALID),
    .AWREADY(m_axi_c_AWREADY),
    .AWADDR(m_axi_c_AWADDR),
    .AWID(m_axi_c_AWID),
    .AWLEN(m_axi_c_AWLEN),
    .AWSIZE(m_axi_c_AWSIZE),
    .AWBURST(m_axi_c_AWBURST),
    .AWLOCK(m_axi_c_AWLOCK),
    .AWCACHE(m_axi_c_AWCACHE),
    .AWPROT(m_axi_c_AWPROT),
    .AWQOS(m_axi_c_AWQOS),
    .AWREGION(m_axi_c_AWREGION),
    .AWUSER(m_axi_c_AWUSER),
    .WVALID(m_axi_c_WVALID),
    .WREADY(m_axi_c_WREADY),
    .WDATA(m_axi_c_WDATA),
    .WSTRB(m_axi_c_WSTRB),
    .WLAST(m_axi_c_WLAST),
    .WID(m_axi_c_WID),
    .WUSER(m_axi_c_WUSER),
    .ARVALID(m_axi_c_ARVALID),
    .ARREADY(m_axi_c_ARREADY),
    .ARADDR(m_axi_c_ARADDR),
    .ARID(m_axi_c_ARID),
    .ARLEN(m_axi_c_ARLEN),
    .ARSIZE(m_axi_c_ARSIZE),
    .ARBURST(m_axi_c_ARBURST),
    .ARLOCK(m_axi_c_ARLOCK),
    .ARCACHE(m_axi_c_ARCACHE),
    .ARPROT(m_axi_c_ARPROT),
    .ARQOS(m_axi_c_ARQOS),
    .ARREGION(m_axi_c_ARREGION),
    .ARUSER(m_axi_c_ARUSER),
    .RVALID(m_axi_c_RVALID),
    .RREADY(m_axi_c_RREADY),
    .RDATA(m_axi_c_RDATA),
    .RLAST(m_axi_c_RLAST),
    .RID(m_axi_c_RID),
    .RUSER(m_axi_c_RUSER),
    .RRESP(m_axi_c_RRESP),
    .BVALID(m_axi_c_BVALID),
    .BREADY(m_axi_c_BREADY),
    .BRESP(m_axi_c_BRESP),
    .BID(m_axi_c_BID),
    .BUSER(m_axi_c_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(c_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(c_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(c_RDATA),
    .I_RID(c_RID),
    .I_RUSER(c_RUSER),
    .I_RRESP(c_RRESP),
    .I_RLAST(c_RLAST),
    .I_AWVALID(c_AWVALID),
    .I_AWREADY(c_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd3),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(c_WVALID),
    .I_WREADY(c_WREADY),
    .I_WDATA(tmp_2_reg_424),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(c_BVALID),
    .I_BREADY(c_BREADY),
    .I_BRESP(c_BRESP),
    .I_BID(c_BID),
    .I_BUSER(c_BUSER)
);

vector_add_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U1(
    .din0(tmp_a_2_fu_78),
    .din1(tmp_a_2_1_fu_82),
    .din2(tmp_a_2_2_fu_86),
    .din3(i_1_reg_172),
    .dout(tmp_fu_266_p5)
);

vector_add_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U2(
    .din0(tmp_b_2_fu_90),
    .din1(tmp_b_2_1_fu_94),
    .din2(tmp_b_2_2_fu_98),
    .din3(i_1_reg_172),
    .dout(tmp_1_fu_278_p5)
);

vector_add_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U3(
    .din0(tmp_c_2_fu_102),
    .din1(tmp_c_2_1_fu_106),
    .din2(tmp_c_2_2_fu_110),
    .din3(i_2_reg_183),
    .dout(tmp_2_fu_332_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state13))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_172 <= 2'd0;
    end else if (((icmp_ln16_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_1_reg_172 <= add_ln16_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_2_reg_183 <= 2'd0;
    end else if (((icmp_ln21_fu_317_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_183 <= add_ln21_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_385 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_160 <= add_ln10_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_380 <= add_ln10_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_385 <= icmp_ln10_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln21_reg_420 <= icmp_ln21_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_317_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_2_reg_424 <= tmp_2_fu_332_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_160 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_a_2_1_fu_82 <= a_RDATA;
        tmp_b_2_1_fu_94 <= b_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_160 == 2'd1) & ~(i_reg_160 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_a_2_2_fu_86 <= a_RDATA;
        tmp_b_2_2_fu_98 <= b_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_160 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_a_2_fu_78 <= a_RDATA;
        tmp_b_2_fu_90 <= b_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_242_p2 == 1'd0) & (ap_phi_mux_i_1_phi_fu_176_p4 == 2'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_c_2_1_fu_106 <= tmp_c_0_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i_1_phi_fu_176_p4 == 2'd1) & ~(ap_phi_mux_i_1_phi_fu_176_p4 == 2'd0) & (icmp_ln16_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_c_2_2_fu_110 <= tmp_c_0_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_242_p2 == 1'd0) & (ap_phi_mux_i_1_phi_fu_176_p4 == 2'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_c_2_fu_102 <= tmp_c_0_fu_290_p2;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_ARVALID = 1'b1;
    end else begin
        a_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_RREADY = 1'b1;
    end else begin
        a_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_blk_n_AR = m_axi_a_ARREADY;
    end else begin
        a_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_blk_n_R = m_axi_a_RVALID;
    end else begin
        a_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_200_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_317_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((c_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_385 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_164_p4 = add_ln10_reg_380;
    end else begin
        ap_phi_mux_i_phi_fu_164_p4 = i_reg_160;
    end
end

always @ (*) begin
    if (((c_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_ARVALID = 1'b1;
    end else begin
        b_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_RREADY = 1'b1;
    end else begin
        b_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_blk_n_AR = m_axi_b_ARREADY;
    end else begin
        b_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_blk_n_R = m_axi_b_RVALID;
    end else begin
        b_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        c_AWVALID = 1'b1;
    end else begin
        c_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((c_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        c_BREADY = 1'b1;
    end else begin
        c_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_420 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        c_WVALID = 1'b1;
    end else begin
        c_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c_blk_n_AW = m_axi_c_AWREADY;
    end else begin
        c_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        c_blk_n_B = m_axi_c_BVALID;
    end else begin
        c_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_420 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        c_blk_n_W = m_axi_c_WREADY;
    end else begin
        c_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln10_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln10_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln16_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln21_fu_317_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln21_fu_317_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((c_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_194_p2 = (ap_phi_mux_i_phi_fu_164_p4 + 2'd1);

assign add_ln16_fu_236_p2 = (i_1_reg_172 + 2'd1);

assign add_ln21_fu_311_p2 = (i_2_reg_183 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((b_RVALID == 1'b0) | (1'b0 == a_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((b_RVALID == 1'b0) | (1'b0 == a_RVALID)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((c_WREADY == 1'b0) & (icmp_ln21_reg_420 == 1'd0));
end

assign ap_block_state14_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_io = ((b_ARREADY == 1'b0) | (1'b0 == a_ARREADY));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((b_RVALID == 1'b0) | (1'b0 == a_RVALID));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_mux_i_1_phi_fu_176_p4 = i_1_reg_172;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln10_fu_200_p2 = ((ap_phi_mux_i_phi_fu_164_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_242_p2 = ((i_1_reg_172 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_317_p2 = ((i_2_reg_183 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_c_0_fu_290_p2 = (tmp_1_fu_278_p5 + tmp_fu_266_p5);

endmodule //vector_add
