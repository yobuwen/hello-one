-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array is
generic (
    C_M_AXI_A_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_C_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_A_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_B_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_C_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_C_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_C_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_C_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_a_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_a_ddr_AWREADY : IN STD_LOGIC;
    m_axi_a_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_a_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ID_WIDTH-1 downto 0);
    m_axi_a_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_a_ddr_WVALID : OUT STD_LOGIC;
    m_axi_a_ddr_WREADY : IN STD_LOGIC;
    m_axi_a_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_DATA_WIDTH-1 downto 0);
    m_axi_a_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_a_ddr_WLAST : OUT STD_LOGIC;
    m_axi_a_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ID_WIDTH-1 downto 0);
    m_axi_a_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_a_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_a_ddr_ARREADY : IN STD_LOGIC;
    m_axi_a_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_a_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ID_WIDTH-1 downto 0);
    m_axi_a_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_a_ddr_RVALID : IN STD_LOGIC;
    m_axi_a_ddr_RREADY : OUT STD_LOGIC;
    m_axi_a_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DDR_DATA_WIDTH-1 downto 0);
    m_axi_a_ddr_RLAST : IN STD_LOGIC;
    m_axi_a_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ID_WIDTH-1 downto 0);
    m_axi_a_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_a_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_BVALID : IN STD_LOGIC;
    m_axi_a_ddr_BREADY : OUT STD_LOGIC;
    m_axi_a_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_DDR_ID_WIDTH-1 downto 0);
    m_axi_a_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_b_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_b_ddr_AWREADY : IN STD_LOGIC;
    m_axi_b_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_b_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ID_WIDTH-1 downto 0);
    m_axi_b_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_b_ddr_WVALID : OUT STD_LOGIC;
    m_axi_b_ddr_WREADY : IN STD_LOGIC;
    m_axi_b_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_DATA_WIDTH-1 downto 0);
    m_axi_b_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_b_ddr_WLAST : OUT STD_LOGIC;
    m_axi_b_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ID_WIDTH-1 downto 0);
    m_axi_b_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_b_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_b_ddr_ARREADY : IN STD_LOGIC;
    m_axi_b_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_b_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ID_WIDTH-1 downto 0);
    m_axi_b_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_b_ddr_RVALID : IN STD_LOGIC;
    m_axi_b_ddr_RREADY : OUT STD_LOGIC;
    m_axi_b_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DDR_DATA_WIDTH-1 downto 0);
    m_axi_b_ddr_RLAST : IN STD_LOGIC;
    m_axi_b_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ID_WIDTH-1 downto 0);
    m_axi_b_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_b_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_BVALID : IN STD_LOGIC;
    m_axi_b_ddr_BREADY : OUT STD_LOGIC;
    m_axi_b_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_DDR_ID_WIDTH-1 downto 0);
    m_axi_b_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_c_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_c_ddr_AWREADY : IN STD_LOGIC;
    m_axi_c_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_c_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ID_WIDTH-1 downto 0);
    m_axi_c_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_c_ddr_WVALID : OUT STD_LOGIC;
    m_axi_c_ddr_WREADY : IN STD_LOGIC;
    m_axi_c_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_DATA_WIDTH-1 downto 0);
    m_axi_c_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_c_ddr_WLAST : OUT STD_LOGIC;
    m_axi_c_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ID_WIDTH-1 downto 0);
    m_axi_c_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_c_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_c_ddr_ARREADY : IN STD_LOGIC;
    m_axi_c_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_c_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ID_WIDTH-1 downto 0);
    m_axi_c_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_c_ddr_RVALID : IN STD_LOGIC;
    m_axi_c_ddr_RREADY : OUT STD_LOGIC;
    m_axi_c_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DDR_DATA_WIDTH-1 downto 0);
    m_axi_c_ddr_RLAST : IN STD_LOGIC;
    m_axi_c_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ID_WIDTH-1 downto 0);
    m_axi_c_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_c_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_BVALID : IN STD_LOGIC;
    m_axi_c_ddr_BREADY : OUT STD_LOGIC;
    m_axi_c_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_DDR_ID_WIDTH-1 downto 0);
    m_axi_c_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_DDR_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of systolic_array is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "systolic_array_systolic_array,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=4406,HLS_SYN_LUT=6031,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal A_0_ce0 : STD_LOGIC;
    signal A_0_we0 : STD_LOGIC;
    signal A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ddr_blk_n_AR : STD_LOGIC;
    signal a_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal b_ddr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal b_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal c_ddr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal c_ddr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal c_ddr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal a_ddr_AWREADY : STD_LOGIC;
    signal a_ddr_WREADY : STD_LOGIC;
    signal a_ddr_ARVALID : STD_LOGIC;
    signal a_ddr_ARREADY : STD_LOGIC;
    signal a_ddr_RVALID : STD_LOGIC;
    signal a_ddr_RREADY : STD_LOGIC;
    signal a_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_ddr_RLAST : STD_LOGIC;
    signal a_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ddr_BVALID : STD_LOGIC;
    signal a_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_ddr_AWREADY : STD_LOGIC;
    signal b_ddr_WREADY : STD_LOGIC;
    signal b_ddr_ARVALID : STD_LOGIC;
    signal b_ddr_ARREADY : STD_LOGIC;
    signal b_ddr_RVALID : STD_LOGIC;
    signal b_ddr_RREADY : STD_LOGIC;
    signal b_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal b_ddr_RLAST : STD_LOGIC;
    signal b_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_ddr_BVALID : STD_LOGIC;
    signal b_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ddr_AWVALID : STD_LOGIC;
    signal c_ddr_AWREADY : STD_LOGIC;
    signal c_ddr_WVALID : STD_LOGIC;
    signal c_ddr_WREADY : STD_LOGIC;
    signal c_ddr_ARREADY : STD_LOGIC;
    signal c_ddr_RVALID : STD_LOGIC;
    signal c_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ddr_RLAST : STD_LOGIC;
    signal c_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_ddr_BVALID : STD_LOGIC;
    signal c_ddr_BREADY : STD_LOGIC;
    signal c_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln131_fu_222_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_18_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_18_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln140_fu_245_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_pe_array_fu_208_A_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_0_ce0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_0_we0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_0_ce1 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_0_we1 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_1_ce0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_1_we0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_1_ce1 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_1_we1 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_2_ce0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_2_we0 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pe_array_fu_208_A_2_ce1 : STD_LOGIC;
    signal grp_pe_array_fu_208_A_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pe_array_fu_208_A_2_we1 : STD_LOGIC;
    signal grp_pe_array_fu_208_ap_start : STD_LOGIC;
    signal grp_pe_array_fu_208_ap_done : STD_LOGIC;
    signal grp_pe_array_fu_208_ap_ready : STD_LOGIC;
    signal grp_pe_array_fu_208_ap_idle : STD_LOGIC;
    signal grp_pe_array_fu_208_ap_continue : STD_LOGIC;
    signal ak_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln131_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bk_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln140_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pe_array_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_sync_grp_pe_array_fu_208_ap_ready : STD_LOGIC;
    signal ap_sync_grp_pe_array_fu_208_ap_done : STD_LOGIC;
    signal ap_block_state25_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_pe_array_fu_208_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_pe_array_fu_208_ap_done : STD_LOGIC := '0';
    signal zext_ln131_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component systolic_array_pe_array IS
    port (
        A_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we0 : OUT STD_LOGIC;
        A_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_0_ce1 : OUT STD_LOGIC;
        A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we1 : OUT STD_LOGIC;
        A_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we0 : OUT STD_LOGIC;
        A_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we1 : OUT STD_LOGIC;
        A_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_we0 : OUT STD_LOGIC;
        A_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component systolic_array_A_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_a_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component systolic_array_b_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component systolic_array_c_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    A_0_U : component systolic_array_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_0_address0,
        ce0 => A_0_ce0,
        we0 => A_0_we0,
        d0 => A_0_d0,
        q0 => A_0_q0);

    A_1_U : component systolic_array_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => A_1_d0,
        q0 => A_1_q0);

    A_2_U : component systolic_array_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => A_2_d0,
        q0 => A_2_q0);

    a_ddr_m_axi_U : component systolic_array_a_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_A_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_A_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_ddr_AWVALID,
        AWREADY => m_axi_a_ddr_AWREADY,
        AWADDR => m_axi_a_ddr_AWADDR,
        AWID => m_axi_a_ddr_AWID,
        AWLEN => m_axi_a_ddr_AWLEN,
        AWSIZE => m_axi_a_ddr_AWSIZE,
        AWBURST => m_axi_a_ddr_AWBURST,
        AWLOCK => m_axi_a_ddr_AWLOCK,
        AWCACHE => m_axi_a_ddr_AWCACHE,
        AWPROT => m_axi_a_ddr_AWPROT,
        AWQOS => m_axi_a_ddr_AWQOS,
        AWREGION => m_axi_a_ddr_AWREGION,
        AWUSER => m_axi_a_ddr_AWUSER,
        WVALID => m_axi_a_ddr_WVALID,
        WREADY => m_axi_a_ddr_WREADY,
        WDATA => m_axi_a_ddr_WDATA,
        WSTRB => m_axi_a_ddr_WSTRB,
        WLAST => m_axi_a_ddr_WLAST,
        WID => m_axi_a_ddr_WID,
        WUSER => m_axi_a_ddr_WUSER,
        ARVALID => m_axi_a_ddr_ARVALID,
        ARREADY => m_axi_a_ddr_ARREADY,
        ARADDR => m_axi_a_ddr_ARADDR,
        ARID => m_axi_a_ddr_ARID,
        ARLEN => m_axi_a_ddr_ARLEN,
        ARSIZE => m_axi_a_ddr_ARSIZE,
        ARBURST => m_axi_a_ddr_ARBURST,
        ARLOCK => m_axi_a_ddr_ARLOCK,
        ARCACHE => m_axi_a_ddr_ARCACHE,
        ARPROT => m_axi_a_ddr_ARPROT,
        ARQOS => m_axi_a_ddr_ARQOS,
        ARREGION => m_axi_a_ddr_ARREGION,
        ARUSER => m_axi_a_ddr_ARUSER,
        RVALID => m_axi_a_ddr_RVALID,
        RREADY => m_axi_a_ddr_RREADY,
        RDATA => m_axi_a_ddr_RDATA,
        RLAST => m_axi_a_ddr_RLAST,
        RID => m_axi_a_ddr_RID,
        RUSER => m_axi_a_ddr_RUSER,
        RRESP => m_axi_a_ddr_RRESP,
        BVALID => m_axi_a_ddr_BVALID,
        BREADY => m_axi_a_ddr_BREADY,
        BRESP => m_axi_a_ddr_BRESP,
        BID => m_axi_a_ddr_BID,
        BUSER => m_axi_a_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => a_ddr_ARVALID,
        I_ARREADY => a_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => a_ddr_RVALID,
        I_RREADY => a_ddr_RREADY,
        I_RDATA => a_ddr_RDATA,
        I_RID => a_ddr_RID,
        I_RUSER => a_ddr_RUSER,
        I_RRESP => a_ddr_RRESP,
        I_RLAST => a_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => a_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => a_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => a_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => a_ddr_BRESP,
        I_BID => a_ddr_BID,
        I_BUSER => a_ddr_BUSER);

    b_ddr_m_axi_U : component systolic_array_b_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_B_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_B_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b_ddr_AWVALID,
        AWREADY => m_axi_b_ddr_AWREADY,
        AWADDR => m_axi_b_ddr_AWADDR,
        AWID => m_axi_b_ddr_AWID,
        AWLEN => m_axi_b_ddr_AWLEN,
        AWSIZE => m_axi_b_ddr_AWSIZE,
        AWBURST => m_axi_b_ddr_AWBURST,
        AWLOCK => m_axi_b_ddr_AWLOCK,
        AWCACHE => m_axi_b_ddr_AWCACHE,
        AWPROT => m_axi_b_ddr_AWPROT,
        AWQOS => m_axi_b_ddr_AWQOS,
        AWREGION => m_axi_b_ddr_AWREGION,
        AWUSER => m_axi_b_ddr_AWUSER,
        WVALID => m_axi_b_ddr_WVALID,
        WREADY => m_axi_b_ddr_WREADY,
        WDATA => m_axi_b_ddr_WDATA,
        WSTRB => m_axi_b_ddr_WSTRB,
        WLAST => m_axi_b_ddr_WLAST,
        WID => m_axi_b_ddr_WID,
        WUSER => m_axi_b_ddr_WUSER,
        ARVALID => m_axi_b_ddr_ARVALID,
        ARREADY => m_axi_b_ddr_ARREADY,
        ARADDR => m_axi_b_ddr_ARADDR,
        ARID => m_axi_b_ddr_ARID,
        ARLEN => m_axi_b_ddr_ARLEN,
        ARSIZE => m_axi_b_ddr_ARSIZE,
        ARBURST => m_axi_b_ddr_ARBURST,
        ARLOCK => m_axi_b_ddr_ARLOCK,
        ARCACHE => m_axi_b_ddr_ARCACHE,
        ARPROT => m_axi_b_ddr_ARPROT,
        ARQOS => m_axi_b_ddr_ARQOS,
        ARREGION => m_axi_b_ddr_ARREGION,
        ARUSER => m_axi_b_ddr_ARUSER,
        RVALID => m_axi_b_ddr_RVALID,
        RREADY => m_axi_b_ddr_RREADY,
        RDATA => m_axi_b_ddr_RDATA,
        RLAST => m_axi_b_ddr_RLAST,
        RID => m_axi_b_ddr_RID,
        RUSER => m_axi_b_ddr_RUSER,
        RRESP => m_axi_b_ddr_RRESP,
        BVALID => m_axi_b_ddr_BVALID,
        BREADY => m_axi_b_ddr_BREADY,
        BRESP => m_axi_b_ddr_BRESP,
        BID => m_axi_b_ddr_BID,
        BUSER => m_axi_b_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => b_ddr_ARVALID,
        I_ARREADY => b_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => b_ddr_RVALID,
        I_RREADY => b_ddr_RREADY,
        I_RDATA => b_ddr_RDATA,
        I_RID => b_ddr_RID,
        I_RUSER => b_ddr_RUSER,
        I_RRESP => b_ddr_RRESP,
        I_RLAST => b_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => b_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => b_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => b_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => b_ddr_BRESP,
        I_BID => b_ddr_BID,
        I_BUSER => b_ddr_BUSER);

    c_ddr_m_axi_U : component systolic_array_c_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_C_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_C_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_C_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_C_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_C_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_C_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_C_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_C_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_C_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_C_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_C_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_C_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_c_ddr_AWVALID,
        AWREADY => m_axi_c_ddr_AWREADY,
        AWADDR => m_axi_c_ddr_AWADDR,
        AWID => m_axi_c_ddr_AWID,
        AWLEN => m_axi_c_ddr_AWLEN,
        AWSIZE => m_axi_c_ddr_AWSIZE,
        AWBURST => m_axi_c_ddr_AWBURST,
        AWLOCK => m_axi_c_ddr_AWLOCK,
        AWCACHE => m_axi_c_ddr_AWCACHE,
        AWPROT => m_axi_c_ddr_AWPROT,
        AWQOS => m_axi_c_ddr_AWQOS,
        AWREGION => m_axi_c_ddr_AWREGION,
        AWUSER => m_axi_c_ddr_AWUSER,
        WVALID => m_axi_c_ddr_WVALID,
        WREADY => m_axi_c_ddr_WREADY,
        WDATA => m_axi_c_ddr_WDATA,
        WSTRB => m_axi_c_ddr_WSTRB,
        WLAST => m_axi_c_ddr_WLAST,
        WID => m_axi_c_ddr_WID,
        WUSER => m_axi_c_ddr_WUSER,
        ARVALID => m_axi_c_ddr_ARVALID,
        ARREADY => m_axi_c_ddr_ARREADY,
        ARADDR => m_axi_c_ddr_ARADDR,
        ARID => m_axi_c_ddr_ARID,
        ARLEN => m_axi_c_ddr_ARLEN,
        ARSIZE => m_axi_c_ddr_ARSIZE,
        ARBURST => m_axi_c_ddr_ARBURST,
        ARLOCK => m_axi_c_ddr_ARLOCK,
        ARCACHE => m_axi_c_ddr_ARCACHE,
        ARPROT => m_axi_c_ddr_ARPROT,
        ARQOS => m_axi_c_ddr_ARQOS,
        ARREGION => m_axi_c_ddr_ARREGION,
        ARUSER => m_axi_c_ddr_ARUSER,
        RVALID => m_axi_c_ddr_RVALID,
        RREADY => m_axi_c_ddr_RREADY,
        RDATA => m_axi_c_ddr_RDATA,
        RLAST => m_axi_c_ddr_RLAST,
        RID => m_axi_c_ddr_RID,
        RUSER => m_axi_c_ddr_RUSER,
        RRESP => m_axi_c_ddr_RRESP,
        BVALID => m_axi_c_ddr_BVALID,
        BREADY => m_axi_c_ddr_BREADY,
        BRESP => m_axi_c_ddr_BRESP,
        BID => m_axi_c_ddr_BID,
        BUSER => m_axi_c_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => c_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => c_ddr_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => c_ddr_RDATA,
        I_RID => c_ddr_RID,
        I_RUSER => c_ddr_RUSER,
        I_RRESP => c_ddr_RRESP,
        I_RLAST => c_ddr_RLAST,
        I_AWVALID => c_ddr_AWVALID,
        I_AWREADY => c_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => c_ddr_WVALID,
        I_WREADY => c_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => c_ddr_BVALID,
        I_BREADY => c_ddr_BREADY,
        I_BRESP => c_ddr_BRESP,
        I_BID => c_ddr_BID,
        I_BUSER => c_ddr_BUSER);

    grp_pe_array_fu_208 : component systolic_array_pe_array
    port map (
        A_0_address0 => grp_pe_array_fu_208_A_0_address0,
        A_0_ce0 => grp_pe_array_fu_208_A_0_ce0,
        A_0_d0 => grp_pe_array_fu_208_A_0_d0,
        A_0_q0 => A_0_q0,
        A_0_we0 => grp_pe_array_fu_208_A_0_we0,
        A_0_address1 => grp_pe_array_fu_208_A_0_address1,
        A_0_ce1 => grp_pe_array_fu_208_A_0_ce1,
        A_0_d1 => grp_pe_array_fu_208_A_0_d1,
        A_0_q1 => ap_const_lv32_0,
        A_0_we1 => grp_pe_array_fu_208_A_0_we1,
        A_1_address0 => grp_pe_array_fu_208_A_1_address0,
        A_1_ce0 => grp_pe_array_fu_208_A_1_ce0,
        A_1_d0 => grp_pe_array_fu_208_A_1_d0,
        A_1_q0 => A_1_q0,
        A_1_we0 => grp_pe_array_fu_208_A_1_we0,
        A_1_address1 => grp_pe_array_fu_208_A_1_address1,
        A_1_ce1 => grp_pe_array_fu_208_A_1_ce1,
        A_1_d1 => grp_pe_array_fu_208_A_1_d1,
        A_1_q1 => ap_const_lv32_0,
        A_1_we1 => grp_pe_array_fu_208_A_1_we1,
        A_2_address0 => grp_pe_array_fu_208_A_2_address0,
        A_2_ce0 => grp_pe_array_fu_208_A_2_ce0,
        A_2_d0 => grp_pe_array_fu_208_A_2_d0,
        A_2_q0 => A_2_q0,
        A_2_we0 => grp_pe_array_fu_208_A_2_we0,
        A_2_address1 => grp_pe_array_fu_208_A_2_address1,
        A_2_ce1 => grp_pe_array_fu_208_A_2_ce1,
        A_2_d1 => grp_pe_array_fu_208_A_2_d1,
        A_2_q1 => ap_const_lv32_0,
        A_2_we1 => grp_pe_array_fu_208_A_2_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pe_array_fu_208_ap_start,
        ap_done => grp_pe_array_fu_208_ap_done,
        ap_ready => grp_pe_array_fu_208_ap_ready,
        ap_idle => grp_pe_array_fu_208_ap_idle,
        ap_continue => grp_pe_array_fu_208_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pe_array_fu_208_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pe_array_fu_208_ap_done <= ap_const_logic_0;
            else
                if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_sync_reg_grp_pe_array_fu_208_ap_done <= ap_const_logic_0;
                elsif ((grp_pe_array_fu_208_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pe_array_fu_208_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pe_array_fu_208_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pe_array_fu_208_ap_ready <= ap_const_logic_0;
            else
                if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_sync_reg_grp_pe_array_fu_208_ap_ready <= ap_const_logic_0;
                elsif ((grp_pe_array_fu_208_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pe_array_fu_208_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pe_array_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pe_array_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_sync_grp_pe_array_fu_208_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
                    grp_pe_array_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pe_array_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_pe_array_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ak_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = a_ddr_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                ak_reg_186 <= ap_const_lv2_0;
            elsif (((icmp_ln131_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ak_reg_186 <= add_ln131_fu_222_p2;
            end if; 
        end if;
    end process;

    bk_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((b_ddr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                bk_reg_197 <= ap_const_lv2_0;
            elsif (((icmp_ln140_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                bk_reg_197 <= add_ln140_fu_245_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                empty_18_reg_279 <= empty_18_fu_241_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_reg_264 <= empty_fu_218_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state25, a_ddr_ARREADY, a_ddr_RVALID, b_ddr_ARREADY, b_ddr_RVALID, c_ddr_AWREADY, c_ddr_WREADY, c_ddr_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state18, icmp_ln131_fu_228_p2, icmp_ln140_fu_251_p2, ap_block_state25_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_ddr_ARREADY))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = a_ddr_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln131_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((b_ddr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((b_ddr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln140_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((c_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((c_ddr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_0_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_0_address0, zext_ln131_fu_234_p1, zext_ln140_fu_257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_0_address0 <= zext_ln140_fu_257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_0_address0 <= zext_ln131_fu_234_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_0_address0 <= grp_pe_array_fu_208_A_0_address0;
        else 
            A_0_address0 <= "XX";
        end if; 
    end process;


    A_0_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_0_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_0_ce0 <= grp_pe_array_fu_208_A_0_ce0;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_d0_assign_proc : process(empty_reg_264, ap_CS_fsm_state9, empty_18_reg_279, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_0_d0 <= empty_18_reg_279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_0_d0 <= empty_reg_264;
        else 
            A_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_0_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state18, icmp_ln131_fu_228_p2, icmp_ln140_fu_251_p2)
    begin
        if ((((icmp_ln140_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln131_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            A_0_we0 <= ap_const_logic_1;
        else 
            A_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_1_address0, zext_ln131_fu_234_p1, zext_ln140_fu_257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_1_address0 <= zext_ln140_fu_257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_1_address0 <= zext_ln131_fu_234_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_1_address0 <= grp_pe_array_fu_208_A_1_address0;
        else 
            A_1_address0 <= "XX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_1_ce0 <= grp_pe_array_fu_208_A_1_ce0;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_d0_assign_proc : process(empty_reg_264, ap_CS_fsm_state9, empty_18_reg_279, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_1_d0 <= empty_18_reg_279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_1_d0 <= empty_reg_264;
        else 
            A_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_1_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state18, icmp_ln131_fu_228_p2, icmp_ln140_fu_251_p2)
    begin
        if ((((icmp_ln140_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln131_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            A_1_we0 <= ap_const_logic_1;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_2_address0, zext_ln131_fu_234_p1, zext_ln140_fu_257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_address0 <= zext_ln140_fu_257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_2_address0 <= zext_ln131_fu_234_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_2_address0 <= grp_pe_array_fu_208_A_2_address0;
        else 
            A_2_address0 <= "XX";
        end if; 
    end process;


    A_2_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state18, grp_pe_array_fu_208_A_2_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_2_ce0 <= grp_pe_array_fu_208_A_2_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_d0_assign_proc : process(empty_reg_264, ap_CS_fsm_state9, empty_18_reg_279, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_d0 <= empty_18_reg_279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_2_d0 <= empty_reg_264;
        else 
            A_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_2_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state18, icmp_ln131_fu_228_p2, icmp_ln140_fu_251_p2)
    begin
        if ((((icmp_ln140_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln131_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            A_2_we0 <= ap_const_logic_1;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ddr_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, a_ddr_ARREADY)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_ddr_ARREADY))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_ddr_ARVALID <= ap_const_logic_1;
        else 
            a_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_ddr_RREADY_assign_proc : process(ap_CS_fsm_state8, a_ddr_RVALID)
    begin
        if (((ap_const_logic_1 = a_ddr_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            a_ddr_RREADY <= ap_const_logic_1;
        else 
            a_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_ddr_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_a_ddr_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_ddr_blk_n_AR <= m_axi_a_ddr_ARREADY;
        else 
            a_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    a_ddr_blk_n_R_assign_proc : process(m_axi_a_ddr_RVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_ddr_blk_n_R <= m_axi_a_ddr_RVALID;
        else 
            a_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln131_fu_222_p2 <= std_logic_vector(unsigned(ak_reg_186) + unsigned(ap_const_lv2_1));
    add_ln140_fu_245_p2 <= std_logic_vector(unsigned(bk_reg_197) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state25_on_subcall_done_assign_proc : process(ap_sync_grp_pe_array_fu_208_ap_ready, ap_sync_grp_pe_array_fu_208_ap_done)
    begin
                ap_block_state25_on_subcall_done <= ((ap_sync_grp_pe_array_fu_208_ap_ready and ap_sync_grp_pe_array_fu_208_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, c_ddr_BVALID, ap_block_state25_on_subcall_done)
    begin
        if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, c_ddr_BVALID, ap_block_state25_on_subcall_done)
    begin
        if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_pe_array_fu_208_ap_done <= (grp_pe_array_fu_208_ap_done or ap_sync_reg_grp_pe_array_fu_208_ap_done);
    ap_sync_grp_pe_array_fu_208_ap_ready <= (grp_pe_array_fu_208_ap_ready or ap_sync_reg_grp_pe_array_fu_208_ap_ready);

    b_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state10, b_ddr_ARREADY)
    begin
        if (((b_ddr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            b_ddr_ARVALID <= ap_const_logic_1;
        else 
            b_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    b_ddr_RREADY_assign_proc : process(ap_CS_fsm_state17, b_ddr_RVALID)
    begin
        if (((b_ddr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            b_ddr_RREADY <= ap_const_logic_1;
        else 
            b_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    b_ddr_blk_n_AR_assign_proc : process(m_axi_b_ddr_ARREADY, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_ddr_blk_n_AR <= m_axi_b_ddr_ARREADY;
        else 
            b_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    b_ddr_blk_n_R_assign_proc : process(m_axi_b_ddr_RVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_ddr_blk_n_R <= m_axi_b_ddr_RVALID;
        else 
            b_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    c_ddr_AWVALID_assign_proc : process(ap_CS_fsm_state19, c_ddr_AWREADY)
    begin
        if (((c_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            c_ddr_AWVALID <= ap_const_logic_1;
        else 
            c_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_ddr_BREADY_assign_proc : process(ap_CS_fsm_state25, c_ddr_BVALID, ap_block_state25_on_subcall_done)
    begin
        if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            c_ddr_BREADY <= ap_const_logic_1;
        else 
            c_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    c_ddr_WVALID_assign_proc : process(ap_CS_fsm_state20, c_ddr_WREADY)
    begin
        if (((c_ddr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            c_ddr_WVALID <= ap_const_logic_1;
        else 
            c_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_ddr_blk_n_AW_assign_proc : process(m_axi_c_ddr_AWREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_ddr_blk_n_AW <= m_axi_c_ddr_AWREADY;
        else 
            c_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    c_ddr_blk_n_B_assign_proc : process(m_axi_c_ddr_BVALID, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_ddr_blk_n_B <= m_axi_c_ddr_BVALID;
        else 
            c_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    c_ddr_blk_n_W_assign_proc : process(m_axi_c_ddr_WREADY, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            c_ddr_blk_n_W <= m_axi_c_ddr_WREADY;
        else 
            c_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_18_fu_241_p1 <= b_ddr_RDATA;
    empty_fu_218_p1 <= a_ddr_RDATA;

    grp_pe_array_fu_208_ap_continue_assign_proc : process(ap_CS_fsm_state25, c_ddr_BVALID, ap_block_state25_on_subcall_done)
    begin
        if ((not(((c_ddr_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_pe_array_fu_208_ap_continue <= ap_const_logic_1;
        else 
            grp_pe_array_fu_208_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_pe_array_fu_208_ap_start <= grp_pe_array_fu_208_ap_start_reg;
    icmp_ln131_fu_228_p2 <= "1" when (ak_reg_186 = ap_const_lv2_3) else "0";
    icmp_ln140_fu_251_p2 <= "1" when (bk_reg_197 = ap_const_lv2_3) else "0";
    zext_ln131_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ak_reg_186),64));
    zext_ln140_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bk_reg_197),64));
end behav;
