// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="systolic_array_systolic_array,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=4406,HLS_SYN_LUT=6031,HLS_VERSION=2020_2}" *)

module systolic_array (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_a_ddr_AWVALID,
        m_axi_a_ddr_AWREADY,
        m_axi_a_ddr_AWADDR,
        m_axi_a_ddr_AWID,
        m_axi_a_ddr_AWLEN,
        m_axi_a_ddr_AWSIZE,
        m_axi_a_ddr_AWBURST,
        m_axi_a_ddr_AWLOCK,
        m_axi_a_ddr_AWCACHE,
        m_axi_a_ddr_AWPROT,
        m_axi_a_ddr_AWQOS,
        m_axi_a_ddr_AWREGION,
        m_axi_a_ddr_AWUSER,
        m_axi_a_ddr_WVALID,
        m_axi_a_ddr_WREADY,
        m_axi_a_ddr_WDATA,
        m_axi_a_ddr_WSTRB,
        m_axi_a_ddr_WLAST,
        m_axi_a_ddr_WID,
        m_axi_a_ddr_WUSER,
        m_axi_a_ddr_ARVALID,
        m_axi_a_ddr_ARREADY,
        m_axi_a_ddr_ARADDR,
        m_axi_a_ddr_ARID,
        m_axi_a_ddr_ARLEN,
        m_axi_a_ddr_ARSIZE,
        m_axi_a_ddr_ARBURST,
        m_axi_a_ddr_ARLOCK,
        m_axi_a_ddr_ARCACHE,
        m_axi_a_ddr_ARPROT,
        m_axi_a_ddr_ARQOS,
        m_axi_a_ddr_ARREGION,
        m_axi_a_ddr_ARUSER,
        m_axi_a_ddr_RVALID,
        m_axi_a_ddr_RREADY,
        m_axi_a_ddr_RDATA,
        m_axi_a_ddr_RLAST,
        m_axi_a_ddr_RID,
        m_axi_a_ddr_RUSER,
        m_axi_a_ddr_RRESP,
        m_axi_a_ddr_BVALID,
        m_axi_a_ddr_BREADY,
        m_axi_a_ddr_BRESP,
        m_axi_a_ddr_BID,
        m_axi_a_ddr_BUSER,
        m_axi_b_ddr_AWVALID,
        m_axi_b_ddr_AWREADY,
        m_axi_b_ddr_AWADDR,
        m_axi_b_ddr_AWID,
        m_axi_b_ddr_AWLEN,
        m_axi_b_ddr_AWSIZE,
        m_axi_b_ddr_AWBURST,
        m_axi_b_ddr_AWLOCK,
        m_axi_b_ddr_AWCACHE,
        m_axi_b_ddr_AWPROT,
        m_axi_b_ddr_AWQOS,
        m_axi_b_ddr_AWREGION,
        m_axi_b_ddr_AWUSER,
        m_axi_b_ddr_WVALID,
        m_axi_b_ddr_WREADY,
        m_axi_b_ddr_WDATA,
        m_axi_b_ddr_WSTRB,
        m_axi_b_ddr_WLAST,
        m_axi_b_ddr_WID,
        m_axi_b_ddr_WUSER,
        m_axi_b_ddr_ARVALID,
        m_axi_b_ddr_ARREADY,
        m_axi_b_ddr_ARADDR,
        m_axi_b_ddr_ARID,
        m_axi_b_ddr_ARLEN,
        m_axi_b_ddr_ARSIZE,
        m_axi_b_ddr_ARBURST,
        m_axi_b_ddr_ARLOCK,
        m_axi_b_ddr_ARCACHE,
        m_axi_b_ddr_ARPROT,
        m_axi_b_ddr_ARQOS,
        m_axi_b_ddr_ARREGION,
        m_axi_b_ddr_ARUSER,
        m_axi_b_ddr_RVALID,
        m_axi_b_ddr_RREADY,
        m_axi_b_ddr_RDATA,
        m_axi_b_ddr_RLAST,
        m_axi_b_ddr_RID,
        m_axi_b_ddr_RUSER,
        m_axi_b_ddr_RRESP,
        m_axi_b_ddr_BVALID,
        m_axi_b_ddr_BREADY,
        m_axi_b_ddr_BRESP,
        m_axi_b_ddr_BID,
        m_axi_b_ddr_BUSER,
        m_axi_c_ddr_AWVALID,
        m_axi_c_ddr_AWREADY,
        m_axi_c_ddr_AWADDR,
        m_axi_c_ddr_AWID,
        m_axi_c_ddr_AWLEN,
        m_axi_c_ddr_AWSIZE,
        m_axi_c_ddr_AWBURST,
        m_axi_c_ddr_AWLOCK,
        m_axi_c_ddr_AWCACHE,
        m_axi_c_ddr_AWPROT,
        m_axi_c_ddr_AWQOS,
        m_axi_c_ddr_AWREGION,
        m_axi_c_ddr_AWUSER,
        m_axi_c_ddr_WVALID,
        m_axi_c_ddr_WREADY,
        m_axi_c_ddr_WDATA,
        m_axi_c_ddr_WSTRB,
        m_axi_c_ddr_WLAST,
        m_axi_c_ddr_WID,
        m_axi_c_ddr_WUSER,
        m_axi_c_ddr_ARVALID,
        m_axi_c_ddr_ARREADY,
        m_axi_c_ddr_ARADDR,
        m_axi_c_ddr_ARID,
        m_axi_c_ddr_ARLEN,
        m_axi_c_ddr_ARSIZE,
        m_axi_c_ddr_ARBURST,
        m_axi_c_ddr_ARLOCK,
        m_axi_c_ddr_ARCACHE,
        m_axi_c_ddr_ARPROT,
        m_axi_c_ddr_ARQOS,
        m_axi_c_ddr_ARREGION,
        m_axi_c_ddr_ARUSER,
        m_axi_c_ddr_RVALID,
        m_axi_c_ddr_RREADY,
        m_axi_c_ddr_RDATA,
        m_axi_c_ddr_RLAST,
        m_axi_c_ddr_RID,
        m_axi_c_ddr_RUSER,
        m_axi_c_ddr_RRESP,
        m_axi_c_ddr_BVALID,
        m_axi_c_ddr_BREADY,
        m_axi_c_ddr_BRESP,
        m_axi_c_ddr_BID,
        m_axi_c_ddr_BUSER
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_M_AXI_A_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_A_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_A_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_A_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_A_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_A_DDR_USER_VALUE = 0;
parameter    C_M_AXI_A_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_A_DDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_B_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_B_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_B_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_B_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_B_DDR_USER_VALUE = 0;
parameter    C_M_AXI_B_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_B_DDR_CACHE_VALUE = 3;
parameter    C_M_AXI_C_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_C_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_C_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_C_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_C_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_C_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_C_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_C_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_C_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_C_DDR_USER_VALUE = 0;
parameter    C_M_AXI_C_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_C_DDR_CACHE_VALUE = 3;

parameter C_M_AXI_A_DDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_DDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_C_DDR_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_a_ddr_AWVALID;
input   m_axi_a_ddr_AWREADY;
output  [C_M_AXI_A_DDR_ADDR_WIDTH - 1:0] m_axi_a_ddr_AWADDR;
output  [C_M_AXI_A_DDR_ID_WIDTH - 1:0] m_axi_a_ddr_AWID;
output  [7:0] m_axi_a_ddr_AWLEN;
output  [2:0] m_axi_a_ddr_AWSIZE;
output  [1:0] m_axi_a_ddr_AWBURST;
output  [1:0] m_axi_a_ddr_AWLOCK;
output  [3:0] m_axi_a_ddr_AWCACHE;
output  [2:0] m_axi_a_ddr_AWPROT;
output  [3:0] m_axi_a_ddr_AWQOS;
output  [3:0] m_axi_a_ddr_AWREGION;
output  [C_M_AXI_A_DDR_AWUSER_WIDTH - 1:0] m_axi_a_ddr_AWUSER;
output   m_axi_a_ddr_WVALID;
input   m_axi_a_ddr_WREADY;
output  [C_M_AXI_A_DDR_DATA_WIDTH - 1:0] m_axi_a_ddr_WDATA;
output  [C_M_AXI_A_DDR_WSTRB_WIDTH - 1:0] m_axi_a_ddr_WSTRB;
output   m_axi_a_ddr_WLAST;
output  [C_M_AXI_A_DDR_ID_WIDTH - 1:0] m_axi_a_ddr_WID;
output  [C_M_AXI_A_DDR_WUSER_WIDTH - 1:0] m_axi_a_ddr_WUSER;
output   m_axi_a_ddr_ARVALID;
input   m_axi_a_ddr_ARREADY;
output  [C_M_AXI_A_DDR_ADDR_WIDTH - 1:0] m_axi_a_ddr_ARADDR;
output  [C_M_AXI_A_DDR_ID_WIDTH - 1:0] m_axi_a_ddr_ARID;
output  [7:0] m_axi_a_ddr_ARLEN;
output  [2:0] m_axi_a_ddr_ARSIZE;
output  [1:0] m_axi_a_ddr_ARBURST;
output  [1:0] m_axi_a_ddr_ARLOCK;
output  [3:0] m_axi_a_ddr_ARCACHE;
output  [2:0] m_axi_a_ddr_ARPROT;
output  [3:0] m_axi_a_ddr_ARQOS;
output  [3:0] m_axi_a_ddr_ARREGION;
output  [C_M_AXI_A_DDR_ARUSER_WIDTH - 1:0] m_axi_a_ddr_ARUSER;
input   m_axi_a_ddr_RVALID;
output   m_axi_a_ddr_RREADY;
input  [C_M_AXI_A_DDR_DATA_WIDTH - 1:0] m_axi_a_ddr_RDATA;
input   m_axi_a_ddr_RLAST;
input  [C_M_AXI_A_DDR_ID_WIDTH - 1:0] m_axi_a_ddr_RID;
input  [C_M_AXI_A_DDR_RUSER_WIDTH - 1:0] m_axi_a_ddr_RUSER;
input  [1:0] m_axi_a_ddr_RRESP;
input   m_axi_a_ddr_BVALID;
output   m_axi_a_ddr_BREADY;
input  [1:0] m_axi_a_ddr_BRESP;
input  [C_M_AXI_A_DDR_ID_WIDTH - 1:0] m_axi_a_ddr_BID;
input  [C_M_AXI_A_DDR_BUSER_WIDTH - 1:0] m_axi_a_ddr_BUSER;
output   m_axi_b_ddr_AWVALID;
input   m_axi_b_ddr_AWREADY;
output  [C_M_AXI_B_DDR_ADDR_WIDTH - 1:0] m_axi_b_ddr_AWADDR;
output  [C_M_AXI_B_DDR_ID_WIDTH - 1:0] m_axi_b_ddr_AWID;
output  [7:0] m_axi_b_ddr_AWLEN;
output  [2:0] m_axi_b_ddr_AWSIZE;
output  [1:0] m_axi_b_ddr_AWBURST;
output  [1:0] m_axi_b_ddr_AWLOCK;
output  [3:0] m_axi_b_ddr_AWCACHE;
output  [2:0] m_axi_b_ddr_AWPROT;
output  [3:0] m_axi_b_ddr_AWQOS;
output  [3:0] m_axi_b_ddr_AWREGION;
output  [C_M_AXI_B_DDR_AWUSER_WIDTH - 1:0] m_axi_b_ddr_AWUSER;
output   m_axi_b_ddr_WVALID;
input   m_axi_b_ddr_WREADY;
output  [C_M_AXI_B_DDR_DATA_WIDTH - 1:0] m_axi_b_ddr_WDATA;
output  [C_M_AXI_B_DDR_WSTRB_WIDTH - 1:0] m_axi_b_ddr_WSTRB;
output   m_axi_b_ddr_WLAST;
output  [C_M_AXI_B_DDR_ID_WIDTH - 1:0] m_axi_b_ddr_WID;
output  [C_M_AXI_B_DDR_WUSER_WIDTH - 1:0] m_axi_b_ddr_WUSER;
output   m_axi_b_ddr_ARVALID;
input   m_axi_b_ddr_ARREADY;
output  [C_M_AXI_B_DDR_ADDR_WIDTH - 1:0] m_axi_b_ddr_ARADDR;
output  [C_M_AXI_B_DDR_ID_WIDTH - 1:0] m_axi_b_ddr_ARID;
output  [7:0] m_axi_b_ddr_ARLEN;
output  [2:0] m_axi_b_ddr_ARSIZE;
output  [1:0] m_axi_b_ddr_ARBURST;
output  [1:0] m_axi_b_ddr_ARLOCK;
output  [3:0] m_axi_b_ddr_ARCACHE;
output  [2:0] m_axi_b_ddr_ARPROT;
output  [3:0] m_axi_b_ddr_ARQOS;
output  [3:0] m_axi_b_ddr_ARREGION;
output  [C_M_AXI_B_DDR_ARUSER_WIDTH - 1:0] m_axi_b_ddr_ARUSER;
input   m_axi_b_ddr_RVALID;
output   m_axi_b_ddr_RREADY;
input  [C_M_AXI_B_DDR_DATA_WIDTH - 1:0] m_axi_b_ddr_RDATA;
input   m_axi_b_ddr_RLAST;
input  [C_M_AXI_B_DDR_ID_WIDTH - 1:0] m_axi_b_ddr_RID;
input  [C_M_AXI_B_DDR_RUSER_WIDTH - 1:0] m_axi_b_ddr_RUSER;
input  [1:0] m_axi_b_ddr_RRESP;
input   m_axi_b_ddr_BVALID;
output   m_axi_b_ddr_BREADY;
input  [1:0] m_axi_b_ddr_BRESP;
input  [C_M_AXI_B_DDR_ID_WIDTH - 1:0] m_axi_b_ddr_BID;
input  [C_M_AXI_B_DDR_BUSER_WIDTH - 1:0] m_axi_b_ddr_BUSER;
output   m_axi_c_ddr_AWVALID;
input   m_axi_c_ddr_AWREADY;
output  [C_M_AXI_C_DDR_ADDR_WIDTH - 1:0] m_axi_c_ddr_AWADDR;
output  [C_M_AXI_C_DDR_ID_WIDTH - 1:0] m_axi_c_ddr_AWID;
output  [7:0] m_axi_c_ddr_AWLEN;
output  [2:0] m_axi_c_ddr_AWSIZE;
output  [1:0] m_axi_c_ddr_AWBURST;
output  [1:0] m_axi_c_ddr_AWLOCK;
output  [3:0] m_axi_c_ddr_AWCACHE;
output  [2:0] m_axi_c_ddr_AWPROT;
output  [3:0] m_axi_c_ddr_AWQOS;
output  [3:0] m_axi_c_ddr_AWREGION;
output  [C_M_AXI_C_DDR_AWUSER_WIDTH - 1:0] m_axi_c_ddr_AWUSER;
output   m_axi_c_ddr_WVALID;
input   m_axi_c_ddr_WREADY;
output  [C_M_AXI_C_DDR_DATA_WIDTH - 1:0] m_axi_c_ddr_WDATA;
output  [C_M_AXI_C_DDR_WSTRB_WIDTH - 1:0] m_axi_c_ddr_WSTRB;
output   m_axi_c_ddr_WLAST;
output  [C_M_AXI_C_DDR_ID_WIDTH - 1:0] m_axi_c_ddr_WID;
output  [C_M_AXI_C_DDR_WUSER_WIDTH - 1:0] m_axi_c_ddr_WUSER;
output   m_axi_c_ddr_ARVALID;
input   m_axi_c_ddr_ARREADY;
output  [C_M_AXI_C_DDR_ADDR_WIDTH - 1:0] m_axi_c_ddr_ARADDR;
output  [C_M_AXI_C_DDR_ID_WIDTH - 1:0] m_axi_c_ddr_ARID;
output  [7:0] m_axi_c_ddr_ARLEN;
output  [2:0] m_axi_c_ddr_ARSIZE;
output  [1:0] m_axi_c_ddr_ARBURST;
output  [1:0] m_axi_c_ddr_ARLOCK;
output  [3:0] m_axi_c_ddr_ARCACHE;
output  [2:0] m_axi_c_ddr_ARPROT;
output  [3:0] m_axi_c_ddr_ARQOS;
output  [3:0] m_axi_c_ddr_ARREGION;
output  [C_M_AXI_C_DDR_ARUSER_WIDTH - 1:0] m_axi_c_ddr_ARUSER;
input   m_axi_c_ddr_RVALID;
output   m_axi_c_ddr_RREADY;
input  [C_M_AXI_C_DDR_DATA_WIDTH - 1:0] m_axi_c_ddr_RDATA;
input   m_axi_c_ddr_RLAST;
input  [C_M_AXI_C_DDR_ID_WIDTH - 1:0] m_axi_c_ddr_RID;
input  [C_M_AXI_C_DDR_RUSER_WIDTH - 1:0] m_axi_c_ddr_RUSER;
input  [1:0] m_axi_c_ddr_RRESP;
input   m_axi_c_ddr_BVALID;
output   m_axi_c_ddr_BREADY;
input  [1:0] m_axi_c_ddr_BRESP;
input  [C_M_AXI_C_DDR_ID_WIDTH - 1:0] m_axi_c_ddr_BID;
input  [C_M_AXI_C_DDR_BUSER_WIDTH - 1:0] m_axi_c_ddr_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] A_0_address0;
reg    A_0_ce0;
reg    A_0_we0;
reg   [31:0] A_0_d0;
wire   [31:0] A_0_q0;
reg   [1:0] A_1_address0;
reg    A_1_ce0;
reg    A_1_we0;
reg   [31:0] A_1_d0;
wire   [31:0] A_1_q0;
reg   [1:0] A_2_address0;
reg    A_2_ce0;
reg    A_2_we0;
reg   [31:0] A_2_d0;
wire   [31:0] A_2_q0;
reg    a_ddr_blk_n_AR;
reg    a_ddr_blk_n_R;
wire    ap_CS_fsm_state8;
reg    b_ddr_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    b_ddr_blk_n_R;
wire    ap_CS_fsm_state17;
reg    c_ddr_blk_n_AW;
wire    ap_CS_fsm_state19;
reg    c_ddr_blk_n_W;
wire    ap_CS_fsm_state20;
reg    c_ddr_blk_n_B;
wire    ap_CS_fsm_state25;
wire    a_ddr_AWREADY;
wire    a_ddr_WREADY;
reg    a_ddr_ARVALID;
wire    a_ddr_ARREADY;
wire    a_ddr_RVALID;
reg    a_ddr_RREADY;
wire   [31:0] a_ddr_RDATA;
wire    a_ddr_RLAST;
wire   [0:0] a_ddr_RID;
wire   [0:0] a_ddr_RUSER;
wire   [1:0] a_ddr_RRESP;
wire    a_ddr_BVALID;
wire   [1:0] a_ddr_BRESP;
wire   [0:0] a_ddr_BID;
wire   [0:0] a_ddr_BUSER;
wire    b_ddr_AWREADY;
wire    b_ddr_WREADY;
reg    b_ddr_ARVALID;
wire    b_ddr_ARREADY;
wire    b_ddr_RVALID;
reg    b_ddr_RREADY;
wire   [31:0] b_ddr_RDATA;
wire    b_ddr_RLAST;
wire   [0:0] b_ddr_RID;
wire   [0:0] b_ddr_RUSER;
wire   [1:0] b_ddr_RRESP;
wire    b_ddr_BVALID;
wire   [1:0] b_ddr_BRESP;
wire   [0:0] b_ddr_BID;
wire   [0:0] b_ddr_BUSER;
reg    c_ddr_AWVALID;
wire    c_ddr_AWREADY;
reg    c_ddr_WVALID;
wire    c_ddr_WREADY;
wire    c_ddr_ARREADY;
wire    c_ddr_RVALID;
wire   [31:0] c_ddr_RDATA;
wire    c_ddr_RLAST;
wire   [0:0] c_ddr_RID;
wire   [0:0] c_ddr_RUSER;
wire   [1:0] c_ddr_RRESP;
wire    c_ddr_BVALID;
reg    c_ddr_BREADY;
wire   [1:0] c_ddr_BRESP;
wire   [0:0] c_ddr_BID;
wire   [0:0] c_ddr_BUSER;
wire   [31:0] empty_fu_218_p1;
reg   [31:0] empty_reg_264;
wire   [1:0] add_ln131_fu_222_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] empty_18_fu_241_p1;
reg   [31:0] empty_18_reg_279;
wire   [1:0] add_ln140_fu_245_p2;
wire    ap_CS_fsm_state18;
wire   [1:0] grp_pe_array_fu_208_A_0_address0;
wire    grp_pe_array_fu_208_A_0_ce0;
wire   [31:0] grp_pe_array_fu_208_A_0_d0;
wire    grp_pe_array_fu_208_A_0_we0;
wire   [1:0] grp_pe_array_fu_208_A_0_address1;
wire    grp_pe_array_fu_208_A_0_ce1;
wire   [31:0] grp_pe_array_fu_208_A_0_d1;
wire    grp_pe_array_fu_208_A_0_we1;
wire   [1:0] grp_pe_array_fu_208_A_1_address0;
wire    grp_pe_array_fu_208_A_1_ce0;
wire   [31:0] grp_pe_array_fu_208_A_1_d0;
wire    grp_pe_array_fu_208_A_1_we0;
wire   [1:0] grp_pe_array_fu_208_A_1_address1;
wire    grp_pe_array_fu_208_A_1_ce1;
wire   [31:0] grp_pe_array_fu_208_A_1_d1;
wire    grp_pe_array_fu_208_A_1_we1;
wire   [1:0] grp_pe_array_fu_208_A_2_address0;
wire    grp_pe_array_fu_208_A_2_ce0;
wire   [31:0] grp_pe_array_fu_208_A_2_d0;
wire    grp_pe_array_fu_208_A_2_we0;
wire   [1:0] grp_pe_array_fu_208_A_2_address1;
wire    grp_pe_array_fu_208_A_2_ce1;
wire   [31:0] grp_pe_array_fu_208_A_2_d1;
wire    grp_pe_array_fu_208_A_2_we1;
wire    grp_pe_array_fu_208_ap_start;
wire    grp_pe_array_fu_208_ap_done;
wire    grp_pe_array_fu_208_ap_ready;
wire    grp_pe_array_fu_208_ap_idle;
reg    grp_pe_array_fu_208_ap_continue;
reg   [1:0] ak_reg_186;
wire   [0:0] icmp_ln131_fu_228_p2;
reg   [1:0] bk_reg_197;
wire   [0:0] icmp_ln140_fu_251_p2;
reg    grp_pe_array_fu_208_ap_start_reg;
wire    ap_CS_fsm_state24;
wire    ap_sync_grp_pe_array_fu_208_ap_ready;
wire    ap_sync_grp_pe_array_fu_208_ap_done;
reg    ap_block_state25_on_subcall_done;
reg    ap_sync_reg_grp_pe_array_fu_208_ap_ready;
reg    ap_sync_reg_grp_pe_array_fu_208_ap_done;
wire   [63:0] zext_ln131_fu_234_p1;
wire   [63:0] zext_ln140_fu_257_p1;
reg   [24:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_pe_array_fu_208_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_pe_array_fu_208_ap_ready = 1'b0;
#0 ap_sync_reg_grp_pe_array_fu_208_ap_done = 1'b0;
end

systolic_array_A_0 #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
A_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_0_address0),
    .ce0(A_0_ce0),
    .we0(A_0_we0),
    .d0(A_0_d0),
    .q0(A_0_q0)
);

systolic_array_A_0 #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
A_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_1_address0),
    .ce0(A_1_ce0),
    .we0(A_1_we0),
    .d0(A_1_d0),
    .q0(A_1_q0)
);

systolic_array_A_0 #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
A_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_2_address0),
    .ce0(A_2_ce0),
    .we0(A_2_we0),
    .d0(A_2_d0),
    .q0(A_2_q0)
);

systolic_array_a_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_A_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_A_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_DDR_CACHE_VALUE ))
a_ddr_m_axi_U(
    .AWVALID(m_axi_a_ddr_AWVALID),
    .AWREADY(m_axi_a_ddr_AWREADY),
    .AWADDR(m_axi_a_ddr_AWADDR),
    .AWID(m_axi_a_ddr_AWID),
    .AWLEN(m_axi_a_ddr_AWLEN),
    .AWSIZE(m_axi_a_ddr_AWSIZE),
    .AWBURST(m_axi_a_ddr_AWBURST),
    .AWLOCK(m_axi_a_ddr_AWLOCK),
    .AWCACHE(m_axi_a_ddr_AWCACHE),
    .AWPROT(m_axi_a_ddr_AWPROT),
    .AWQOS(m_axi_a_ddr_AWQOS),
    .AWREGION(m_axi_a_ddr_AWREGION),
    .AWUSER(m_axi_a_ddr_AWUSER),
    .WVALID(m_axi_a_ddr_WVALID),
    .WREADY(m_axi_a_ddr_WREADY),
    .WDATA(m_axi_a_ddr_WDATA),
    .WSTRB(m_axi_a_ddr_WSTRB),
    .WLAST(m_axi_a_ddr_WLAST),
    .WID(m_axi_a_ddr_WID),
    .WUSER(m_axi_a_ddr_WUSER),
    .ARVALID(m_axi_a_ddr_ARVALID),
    .ARREADY(m_axi_a_ddr_ARREADY),
    .ARADDR(m_axi_a_ddr_ARADDR),
    .ARID(m_axi_a_ddr_ARID),
    .ARLEN(m_axi_a_ddr_ARLEN),
    .ARSIZE(m_axi_a_ddr_ARSIZE),
    .ARBURST(m_axi_a_ddr_ARBURST),
    .ARLOCK(m_axi_a_ddr_ARLOCK),
    .ARCACHE(m_axi_a_ddr_ARCACHE),
    .ARPROT(m_axi_a_ddr_ARPROT),
    .ARQOS(m_axi_a_ddr_ARQOS),
    .ARREGION(m_axi_a_ddr_ARREGION),
    .ARUSER(m_axi_a_ddr_ARUSER),
    .RVALID(m_axi_a_ddr_RVALID),
    .RREADY(m_axi_a_ddr_RREADY),
    .RDATA(m_axi_a_ddr_RDATA),
    .RLAST(m_axi_a_ddr_RLAST),
    .RID(m_axi_a_ddr_RID),
    .RUSER(m_axi_a_ddr_RUSER),
    .RRESP(m_axi_a_ddr_RRESP),
    .BVALID(m_axi_a_ddr_BVALID),
    .BREADY(m_axi_a_ddr_BREADY),
    .BRESP(m_axi_a_ddr_BRESP),
    .BID(m_axi_a_ddr_BID),
    .BUSER(m_axi_a_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(a_ddr_ARVALID),
    .I_ARREADY(a_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(a_ddr_RVALID),
    .I_RREADY(a_ddr_RREADY),
    .I_RDATA(a_ddr_RDATA),
    .I_RID(a_ddr_RID),
    .I_RUSER(a_ddr_RUSER),
    .I_RRESP(a_ddr_RRESP),
    .I_RLAST(a_ddr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(a_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(a_ddr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(a_ddr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(a_ddr_BRESP),
    .I_BID(a_ddr_BID),
    .I_BUSER(a_ddr_BUSER)
);

systolic_array_b_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_B_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_B_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_DDR_CACHE_VALUE ))
b_ddr_m_axi_U(
    .AWVALID(m_axi_b_ddr_AWVALID),
    .AWREADY(m_axi_b_ddr_AWREADY),
    .AWADDR(m_axi_b_ddr_AWADDR),
    .AWID(m_axi_b_ddr_AWID),
    .AWLEN(m_axi_b_ddr_AWLEN),
    .AWSIZE(m_axi_b_ddr_AWSIZE),
    .AWBURST(m_axi_b_ddr_AWBURST),
    .AWLOCK(m_axi_b_ddr_AWLOCK),
    .AWCACHE(m_axi_b_ddr_AWCACHE),
    .AWPROT(m_axi_b_ddr_AWPROT),
    .AWQOS(m_axi_b_ddr_AWQOS),
    .AWREGION(m_axi_b_ddr_AWREGION),
    .AWUSER(m_axi_b_ddr_AWUSER),
    .WVALID(m_axi_b_ddr_WVALID),
    .WREADY(m_axi_b_ddr_WREADY),
    .WDATA(m_axi_b_ddr_WDATA),
    .WSTRB(m_axi_b_ddr_WSTRB),
    .WLAST(m_axi_b_ddr_WLAST),
    .WID(m_axi_b_ddr_WID),
    .WUSER(m_axi_b_ddr_WUSER),
    .ARVALID(m_axi_b_ddr_ARVALID),
    .ARREADY(m_axi_b_ddr_ARREADY),
    .ARADDR(m_axi_b_ddr_ARADDR),
    .ARID(m_axi_b_ddr_ARID),
    .ARLEN(m_axi_b_ddr_ARLEN),
    .ARSIZE(m_axi_b_ddr_ARSIZE),
    .ARBURST(m_axi_b_ddr_ARBURST),
    .ARLOCK(m_axi_b_ddr_ARLOCK),
    .ARCACHE(m_axi_b_ddr_ARCACHE),
    .ARPROT(m_axi_b_ddr_ARPROT),
    .ARQOS(m_axi_b_ddr_ARQOS),
    .ARREGION(m_axi_b_ddr_ARREGION),
    .ARUSER(m_axi_b_ddr_ARUSER),
    .RVALID(m_axi_b_ddr_RVALID),
    .RREADY(m_axi_b_ddr_RREADY),
    .RDATA(m_axi_b_ddr_RDATA),
    .RLAST(m_axi_b_ddr_RLAST),
    .RID(m_axi_b_ddr_RID),
    .RUSER(m_axi_b_ddr_RUSER),
    .RRESP(m_axi_b_ddr_RRESP),
    .BVALID(m_axi_b_ddr_BVALID),
    .BREADY(m_axi_b_ddr_BREADY),
    .BRESP(m_axi_b_ddr_BRESP),
    .BID(m_axi_b_ddr_BID),
    .BUSER(m_axi_b_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(b_ddr_ARVALID),
    .I_ARREADY(b_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(b_ddr_RVALID),
    .I_RREADY(b_ddr_RREADY),
    .I_RDATA(b_ddr_RDATA),
    .I_RID(b_ddr_RID),
    .I_RUSER(b_ddr_RUSER),
    .I_RRESP(b_ddr_RRESP),
    .I_RLAST(b_ddr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(b_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(b_ddr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(b_ddr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(b_ddr_BRESP),
    .I_BID(b_ddr_BID),
    .I_BUSER(b_ddr_BUSER)
);

systolic_array_c_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_C_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_C_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_C_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_C_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_C_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_C_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_C_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_C_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_C_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_C_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_C_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_C_DDR_CACHE_VALUE ))
c_ddr_m_axi_U(
    .AWVALID(m_axi_c_ddr_AWVALID),
    .AWREADY(m_axi_c_ddr_AWREADY),
    .AWADDR(m_axi_c_ddr_AWADDR),
    .AWID(m_axi_c_ddr_AWID),
    .AWLEN(m_axi_c_ddr_AWLEN),
    .AWSIZE(m_axi_c_ddr_AWSIZE),
    .AWBURST(m_axi_c_ddr_AWBURST),
    .AWLOCK(m_axi_c_ddr_AWLOCK),
    .AWCACHE(m_axi_c_ddr_AWCACHE),
    .AWPROT(m_axi_c_ddr_AWPROT),
    .AWQOS(m_axi_c_ddr_AWQOS),
    .AWREGION(m_axi_c_ddr_AWREGION),
    .AWUSER(m_axi_c_ddr_AWUSER),
    .WVALID(m_axi_c_ddr_WVALID),
    .WREADY(m_axi_c_ddr_WREADY),
    .WDATA(m_axi_c_ddr_WDATA),
    .WSTRB(m_axi_c_ddr_WSTRB),
    .WLAST(m_axi_c_ddr_WLAST),
    .WID(m_axi_c_ddr_WID),
    .WUSER(m_axi_c_ddr_WUSER),
    .ARVALID(m_axi_c_ddr_ARVALID),
    .ARREADY(m_axi_c_ddr_ARREADY),
    .ARADDR(m_axi_c_ddr_ARADDR),
    .ARID(m_axi_c_ddr_ARID),
    .ARLEN(m_axi_c_ddr_ARLEN),
    .ARSIZE(m_axi_c_ddr_ARSIZE),
    .ARBURST(m_axi_c_ddr_ARBURST),
    .ARLOCK(m_axi_c_ddr_ARLOCK),
    .ARCACHE(m_axi_c_ddr_ARCACHE),
    .ARPROT(m_axi_c_ddr_ARPROT),
    .ARQOS(m_axi_c_ddr_ARQOS),
    .ARREGION(m_axi_c_ddr_ARREGION),
    .ARUSER(m_axi_c_ddr_ARUSER),
    .RVALID(m_axi_c_ddr_RVALID),
    .RREADY(m_axi_c_ddr_RREADY),
    .RDATA(m_axi_c_ddr_RDATA),
    .RLAST(m_axi_c_ddr_RLAST),
    .RID(m_axi_c_ddr_RID),
    .RUSER(m_axi_c_ddr_RUSER),
    .RRESP(m_axi_c_ddr_RRESP),
    .BVALID(m_axi_c_ddr_BVALID),
    .BREADY(m_axi_c_ddr_BREADY),
    .BRESP(m_axi_c_ddr_BRESP),
    .BID(m_axi_c_ddr_BID),
    .BUSER(m_axi_c_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(c_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(c_ddr_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(c_ddr_RDATA),
    .I_RID(c_ddr_RID),
    .I_RUSER(c_ddr_RUSER),
    .I_RRESP(c_ddr_RRESP),
    .I_RLAST(c_ddr_RLAST),
    .I_AWVALID(c_ddr_AWVALID),
    .I_AWREADY(c_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(c_ddr_WVALID),
    .I_WREADY(c_ddr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(c_ddr_BVALID),
    .I_BREADY(c_ddr_BREADY),
    .I_BRESP(c_ddr_BRESP),
    .I_BID(c_ddr_BID),
    .I_BUSER(c_ddr_BUSER)
);

systolic_array_pe_array grp_pe_array_fu_208(
    .A_0_address0(grp_pe_array_fu_208_A_0_address0),
    .A_0_ce0(grp_pe_array_fu_208_A_0_ce0),
    .A_0_d0(grp_pe_array_fu_208_A_0_d0),
    .A_0_q0(A_0_q0),
    .A_0_we0(grp_pe_array_fu_208_A_0_we0),
    .A_0_address1(grp_pe_array_fu_208_A_0_address1),
    .A_0_ce1(grp_pe_array_fu_208_A_0_ce1),
    .A_0_d1(grp_pe_array_fu_208_A_0_d1),
    .A_0_q1(32'd0),
    .A_0_we1(grp_pe_array_fu_208_A_0_we1),
    .A_1_address0(grp_pe_array_fu_208_A_1_address0),
    .A_1_ce0(grp_pe_array_fu_208_A_1_ce0),
    .A_1_d0(grp_pe_array_fu_208_A_1_d0),
    .A_1_q0(A_1_q0),
    .A_1_we0(grp_pe_array_fu_208_A_1_we0),
    .A_1_address1(grp_pe_array_fu_208_A_1_address1),
    .A_1_ce1(grp_pe_array_fu_208_A_1_ce1),
    .A_1_d1(grp_pe_array_fu_208_A_1_d1),
    .A_1_q1(32'd0),
    .A_1_we1(grp_pe_array_fu_208_A_1_we1),
    .A_2_address0(grp_pe_array_fu_208_A_2_address0),
    .A_2_ce0(grp_pe_array_fu_208_A_2_ce0),
    .A_2_d0(grp_pe_array_fu_208_A_2_d0),
    .A_2_q0(A_2_q0),
    .A_2_we0(grp_pe_array_fu_208_A_2_we0),
    .A_2_address1(grp_pe_array_fu_208_A_2_address1),
    .A_2_ce1(grp_pe_array_fu_208_A_2_ce1),
    .A_2_d1(grp_pe_array_fu_208_A_2_d1),
    .A_2_q1(32'd0),
    .A_2_we1(grp_pe_array_fu_208_A_2_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pe_array_fu_208_ap_start),
    .ap_done(grp_pe_array_fu_208_ap_done),
    .ap_ready(grp_pe_array_fu_208_ap_ready),
    .ap_idle(grp_pe_array_fu_208_ap_idle),
    .ap_continue(grp_pe_array_fu_208_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pe_array_fu_208_ap_done <= 1'b0;
    end else begin
        if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_sync_reg_grp_pe_array_fu_208_ap_done <= 1'b0;
        end else if ((grp_pe_array_fu_208_ap_done == 1'b1)) begin
            ap_sync_reg_grp_pe_array_fu_208_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pe_array_fu_208_ap_ready <= 1'b0;
    end else begin
        if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_sync_reg_grp_pe_array_fu_208_ap_ready <= 1'b0;
        end else if ((grp_pe_array_fu_208_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_pe_array_fu_208_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pe_array_fu_208_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | ((ap_sync_grp_pe_array_fu_208_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state25)))) begin
            grp_pe_array_fu_208_ap_start_reg <= 1'b1;
        end else if ((grp_pe_array_fu_208_ap_ready == 1'b1)) begin
            grp_pe_array_fu_208_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == a_ddr_RVALID) & (1'b1 == ap_CS_fsm_state8))) begin
        ak_reg_186 <= 2'd0;
    end else if (((icmp_ln131_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ak_reg_186 <= add_ln131_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((b_ddr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        bk_reg_197 <= 2'd0;
    end else if (((icmp_ln140_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        bk_reg_197 <= add_ln140_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        empty_18_reg_279 <= empty_18_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_reg_264 <= empty_fu_218_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_0_address0 = zext_ln140_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_0_address0 = zext_ln131_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_0_address0 = grp_pe_array_fu_208_A_0_address0;
    end else begin
        A_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9))) begin
        A_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_0_ce0 = grp_pe_array_fu_208_A_0_ce0;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_0_d0 = empty_18_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_0_d0 = empty_reg_264;
    end else begin
        A_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln140_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln131_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        A_0_we0 = 1'b1;
    end else begin
        A_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_1_address0 = zext_ln140_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_1_address0 = zext_ln131_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_1_address0 = grp_pe_array_fu_208_A_1_address0;
    end else begin
        A_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9))) begin
        A_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_1_ce0 = grp_pe_array_fu_208_A_1_ce0;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_1_d0 = empty_18_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_1_d0 = empty_reg_264;
    end else begin
        A_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln140_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln131_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        A_1_we0 = 1'b1;
    end else begin
        A_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_2_address0 = zext_ln140_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_2_address0 = zext_ln131_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_2_address0 = grp_pe_array_fu_208_A_2_address0;
    end else begin
        A_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9))) begin
        A_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        A_2_ce0 = grp_pe_array_fu_208_A_2_ce0;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_2_d0 = empty_18_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_2_d0 = empty_reg_264;
    end else begin
        A_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln140_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln131_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        A_2_we0 = 1'b1;
    end else begin
        A_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == a_ddr_ARREADY)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_ddr_ARVALID = 1'b1;
    end else begin
        a_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == a_ddr_RVALID) & (1'b1 == ap_CS_fsm_state8))) begin
        a_ddr_RREADY = 1'b1;
    end else begin
        a_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_ddr_blk_n_AR = m_axi_a_ddr_ARREADY;
    end else begin
        a_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a_ddr_blk_n_R = m_axi_a_ddr_RVALID;
    end else begin
        a_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((b_ddr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        b_ddr_ARVALID = 1'b1;
    end else begin
        b_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((b_ddr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        b_ddr_RREADY = 1'b1;
    end else begin
        b_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_ddr_blk_n_AR = m_axi_b_ddr_ARREADY;
    end else begin
        b_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        b_ddr_blk_n_R = m_axi_b_ddr_RVALID;
    end else begin
        b_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((c_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        c_ddr_AWVALID = 1'b1;
    end else begin
        c_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
        c_ddr_BREADY = 1'b1;
    end else begin
        c_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((c_ddr_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        c_ddr_WVALID = 1'b1;
    end else begin
        c_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        c_ddr_blk_n_AW = m_axi_c_ddr_AWREADY;
    end else begin
        c_ddr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        c_ddr_blk_n_B = m_axi_c_ddr_BVALID;
    end else begin
        c_ddr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        c_ddr_blk_n_W = m_axi_c_ddr_WREADY;
    end else begin
        c_ddr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
        grp_pe_array_fu_208_ap_continue = 1'b1;
    end else begin
        grp_pe_array_fu_208_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == a_ddr_ARREADY)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == a_ddr_RVALID) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln131_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((b_ddr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((b_ddr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln140_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((c_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((c_ddr_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if ((~((c_ddr_BVALID == 1'b0) | (1'b1 == ap_block_state25_on_subcall_done)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_222_p2 = (ak_reg_186 + 2'd1);

assign add_ln140_fu_245_p2 = (bk_reg_197 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state25_on_subcall_done = ((ap_sync_grp_pe_array_fu_208_ap_ready & ap_sync_grp_pe_array_fu_208_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_pe_array_fu_208_ap_done = (grp_pe_array_fu_208_ap_done | ap_sync_reg_grp_pe_array_fu_208_ap_done);

assign ap_sync_grp_pe_array_fu_208_ap_ready = (grp_pe_array_fu_208_ap_ready | ap_sync_reg_grp_pe_array_fu_208_ap_ready);

assign empty_18_fu_241_p1 = b_ddr_RDATA;

assign empty_fu_218_p1 = a_ddr_RDATA;

assign grp_pe_array_fu_208_ap_start = grp_pe_array_fu_208_ap_start_reg;

assign icmp_ln131_fu_228_p2 = ((ak_reg_186 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_251_p2 = ((bk_reg_197 == 2'd3) ? 1'b1 : 1'b0);

assign zext_ln131_fu_234_p1 = ak_reg_186;

assign zext_ln140_fu_257_p1 = bk_reg_197;

endmodule //systolic_array
