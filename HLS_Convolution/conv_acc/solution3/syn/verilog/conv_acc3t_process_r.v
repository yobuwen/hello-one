// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_acc3t_process_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_In_ddr_AWVALID,
        m_axi_In_ddr_AWREADY,
        m_axi_In_ddr_AWADDR,
        m_axi_In_ddr_AWID,
        m_axi_In_ddr_AWLEN,
        m_axi_In_ddr_AWSIZE,
        m_axi_In_ddr_AWBURST,
        m_axi_In_ddr_AWLOCK,
        m_axi_In_ddr_AWCACHE,
        m_axi_In_ddr_AWPROT,
        m_axi_In_ddr_AWQOS,
        m_axi_In_ddr_AWREGION,
        m_axi_In_ddr_AWUSER,
        m_axi_In_ddr_WVALID,
        m_axi_In_ddr_WREADY,
        m_axi_In_ddr_WDATA,
        m_axi_In_ddr_WSTRB,
        m_axi_In_ddr_WLAST,
        m_axi_In_ddr_WID,
        m_axi_In_ddr_WUSER,
        m_axi_In_ddr_ARVALID,
        m_axi_In_ddr_ARREADY,
        m_axi_In_ddr_ARADDR,
        m_axi_In_ddr_ARID,
        m_axi_In_ddr_ARLEN,
        m_axi_In_ddr_ARSIZE,
        m_axi_In_ddr_ARBURST,
        m_axi_In_ddr_ARLOCK,
        m_axi_In_ddr_ARCACHE,
        m_axi_In_ddr_ARPROT,
        m_axi_In_ddr_ARQOS,
        m_axi_In_ddr_ARREGION,
        m_axi_In_ddr_ARUSER,
        m_axi_In_ddr_RVALID,
        m_axi_In_ddr_RREADY,
        m_axi_In_ddr_RDATA,
        m_axi_In_ddr_RLAST,
        m_axi_In_ddr_RID,
        m_axi_In_ddr_RUSER,
        m_axi_In_ddr_RRESP,
        m_axi_In_ddr_BVALID,
        m_axi_In_ddr_BREADY,
        m_axi_In_ddr_BRESP,
        m_axi_In_ddr_BID,
        m_axi_In_ddr_BUSER,
        m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY,
        m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY,
        m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID,
        m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA,
        m_axi_W_ddr_RLAST,
        m_axi_W_ddr_RID,
        m_axi_W_ddr_RUSER,
        m_axi_W_ddr_RRESP,
        m_axi_W_ddr_BVALID,
        m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP,
        m_axi_W_ddr_BID,
        m_axi_W_ddr_BUSER,
        w_0_address0,
        w_0_ce0,
        w_0_we0,
        w_0_d0,
        w_01_address0,
        w_01_ce0,
        w_01_we0,
        w_01_d0,
        w_02_address0,
        w_02_ce0,
        w_02_we0,
        w_02_d0,
        w_03_address0,
        w_03_ce0,
        w_03_we0,
        w_03_d0,
        w_014_address0,
        w_014_ce0,
        w_014_we0,
        w_014_d0,
        w_015_address0,
        w_015_ce0,
        w_015_we0,
        w_015_d0,
        w_016_address0,
        w_016_ce0,
        w_016_we0,
        w_016_d0,
        w_017_address0,
        w_017_ce0,
        w_017_we0,
        w_017_d0,
        w_028_address0,
        w_028_ce0,
        w_028_we0,
        w_028_d0,
        w_029_address0,
        w_029_ce0,
        w_029_we0,
        w_029_d0,
        w_0210_address0,
        w_0210_ce0,
        w_0210_we0,
        w_0210_d0,
        w_0211_address0,
        w_0211_ce0,
        w_0211_we0,
        w_0211_d0,
        w_0312_address0,
        w_0312_ce0,
        w_0312_we0,
        w_0312_d0,
        w_0313_address0,
        w_0313_ce0,
        w_0313_we0,
        w_0313_d0,
        w_0314_address0,
        w_0314_ce0,
        w_0314_we0,
        w_0314_d0,
        w_0315_address0,
        w_0315_ce0,
        w_0315_we0,
        w_0315_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_pp0_stage0 = 17'd128;
parameter    ap_ST_fsm_state10 = 17'd256;
parameter    ap_ST_fsm_state11 = 17'd512;
parameter    ap_ST_fsm_state12 = 17'd1024;
parameter    ap_ST_fsm_state13 = 17'd2048;
parameter    ap_ST_fsm_state14 = 17'd4096;
parameter    ap_ST_fsm_state15 = 17'd8192;
parameter    ap_ST_fsm_state16 = 17'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 17'd32768;
parameter    ap_ST_fsm_state20 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_In_ddr_AWVALID;
input   m_axi_In_ddr_AWREADY;
output  [63:0] m_axi_In_ddr_AWADDR;
output  [0:0] m_axi_In_ddr_AWID;
output  [31:0] m_axi_In_ddr_AWLEN;
output  [2:0] m_axi_In_ddr_AWSIZE;
output  [1:0] m_axi_In_ddr_AWBURST;
output  [1:0] m_axi_In_ddr_AWLOCK;
output  [3:0] m_axi_In_ddr_AWCACHE;
output  [2:0] m_axi_In_ddr_AWPROT;
output  [3:0] m_axi_In_ddr_AWQOS;
output  [3:0] m_axi_In_ddr_AWREGION;
output  [0:0] m_axi_In_ddr_AWUSER;
output   m_axi_In_ddr_WVALID;
input   m_axi_In_ddr_WREADY;
output  [31:0] m_axi_In_ddr_WDATA;
output  [3:0] m_axi_In_ddr_WSTRB;
output   m_axi_In_ddr_WLAST;
output  [0:0] m_axi_In_ddr_WID;
output  [0:0] m_axi_In_ddr_WUSER;
output   m_axi_In_ddr_ARVALID;
input   m_axi_In_ddr_ARREADY;
output  [63:0] m_axi_In_ddr_ARADDR;
output  [0:0] m_axi_In_ddr_ARID;
output  [31:0] m_axi_In_ddr_ARLEN;
output  [2:0] m_axi_In_ddr_ARSIZE;
output  [1:0] m_axi_In_ddr_ARBURST;
output  [1:0] m_axi_In_ddr_ARLOCK;
output  [3:0] m_axi_In_ddr_ARCACHE;
output  [2:0] m_axi_In_ddr_ARPROT;
output  [3:0] m_axi_In_ddr_ARQOS;
output  [3:0] m_axi_In_ddr_ARREGION;
output  [0:0] m_axi_In_ddr_ARUSER;
input   m_axi_In_ddr_RVALID;
output   m_axi_In_ddr_RREADY;
input  [31:0] m_axi_In_ddr_RDATA;
input   m_axi_In_ddr_RLAST;
input  [0:0] m_axi_In_ddr_RID;
input  [0:0] m_axi_In_ddr_RUSER;
input  [1:0] m_axi_In_ddr_RRESP;
input   m_axi_In_ddr_BVALID;
output   m_axi_In_ddr_BREADY;
input  [1:0] m_axi_In_ddr_BRESP;
input  [0:0] m_axi_In_ddr_BID;
input  [0:0] m_axi_In_ddr_BUSER;
output   m_axi_W_ddr_AWVALID;
input   m_axi_W_ddr_AWREADY;
output  [63:0] m_axi_W_ddr_AWADDR;
output  [0:0] m_axi_W_ddr_AWID;
output  [31:0] m_axi_W_ddr_AWLEN;
output  [2:0] m_axi_W_ddr_AWSIZE;
output  [1:0] m_axi_W_ddr_AWBURST;
output  [1:0] m_axi_W_ddr_AWLOCK;
output  [3:0] m_axi_W_ddr_AWCACHE;
output  [2:0] m_axi_W_ddr_AWPROT;
output  [3:0] m_axi_W_ddr_AWQOS;
output  [3:0] m_axi_W_ddr_AWREGION;
output  [0:0] m_axi_W_ddr_AWUSER;
output   m_axi_W_ddr_WVALID;
input   m_axi_W_ddr_WREADY;
output  [31:0] m_axi_W_ddr_WDATA;
output  [3:0] m_axi_W_ddr_WSTRB;
output   m_axi_W_ddr_WLAST;
output  [0:0] m_axi_W_ddr_WID;
output  [0:0] m_axi_W_ddr_WUSER;
output   m_axi_W_ddr_ARVALID;
input   m_axi_W_ddr_ARREADY;
output  [63:0] m_axi_W_ddr_ARADDR;
output  [0:0] m_axi_W_ddr_ARID;
output  [31:0] m_axi_W_ddr_ARLEN;
output  [2:0] m_axi_W_ddr_ARSIZE;
output  [1:0] m_axi_W_ddr_ARBURST;
output  [1:0] m_axi_W_ddr_ARLOCK;
output  [3:0] m_axi_W_ddr_ARCACHE;
output  [2:0] m_axi_W_ddr_ARPROT;
output  [3:0] m_axi_W_ddr_ARQOS;
output  [3:0] m_axi_W_ddr_ARREGION;
output  [0:0] m_axi_W_ddr_ARUSER;
input   m_axi_W_ddr_RVALID;
output   m_axi_W_ddr_RREADY;
input  [31:0] m_axi_W_ddr_RDATA;
input   m_axi_W_ddr_RLAST;
input  [0:0] m_axi_W_ddr_RID;
input  [0:0] m_axi_W_ddr_RUSER;
input  [1:0] m_axi_W_ddr_RRESP;
input   m_axi_W_ddr_BVALID;
output   m_axi_W_ddr_BREADY;
input  [1:0] m_axi_W_ddr_BRESP;
input  [0:0] m_axi_W_ddr_BID;
input  [0:0] m_axi_W_ddr_BUSER;
output  [3:0] w_0_address0;
output   w_0_ce0;
output   w_0_we0;
output  [31:0] w_0_d0;
output  [3:0] w_01_address0;
output   w_01_ce0;
output   w_01_we0;
output  [31:0] w_01_d0;
output  [3:0] w_02_address0;
output   w_02_ce0;
output   w_02_we0;
output  [31:0] w_02_d0;
output  [3:0] w_03_address0;
output   w_03_ce0;
output   w_03_we0;
output  [31:0] w_03_d0;
output  [3:0] w_014_address0;
output   w_014_ce0;
output   w_014_we0;
output  [31:0] w_014_d0;
output  [3:0] w_015_address0;
output   w_015_ce0;
output   w_015_we0;
output  [31:0] w_015_d0;
output  [3:0] w_016_address0;
output   w_016_ce0;
output   w_016_we0;
output  [31:0] w_016_d0;
output  [3:0] w_017_address0;
output   w_017_ce0;
output   w_017_we0;
output  [31:0] w_017_d0;
output  [3:0] w_028_address0;
output   w_028_ce0;
output   w_028_we0;
output  [31:0] w_028_d0;
output  [3:0] w_029_address0;
output   w_029_ce0;
output   w_029_we0;
output  [31:0] w_029_d0;
output  [3:0] w_0210_address0;
output   w_0210_ce0;
output   w_0210_we0;
output  [31:0] w_0210_d0;
output  [3:0] w_0211_address0;
output   w_0211_ce0;
output   w_0211_we0;
output  [31:0] w_0211_d0;
output  [3:0] w_0312_address0;
output   w_0312_ce0;
output   w_0312_we0;
output  [31:0] w_0312_d0;
output  [3:0] w_0313_address0;
output   w_0313_ce0;
output   w_0313_we0;
output  [31:0] w_0313_d0;
output  [3:0] w_0314_address0;
output   w_0314_ce0;
output   w_0314_we0;
output  [31:0] w_0314_d0;
output  [3:0] w_0315_address0;
output   w_0315_ce0;
output   w_0315_we0;
output  [31:0] w_0315_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_In_ddr_ARVALID;
reg m_axi_In_ddr_RREADY;
reg m_axi_W_ddr_ARVALID;
reg m_axi_W_ddr_RREADY;
reg w_0_ce0;
reg w_0_we0;
reg w_01_ce0;
reg w_01_we0;
reg w_02_ce0;
reg w_02_we0;
reg w_03_ce0;
reg w_03_we0;
reg w_014_ce0;
reg w_014_we0;
reg w_015_ce0;
reg w_015_we0;
reg w_016_ce0;
reg w_016_we0;
reg w_017_ce0;
reg w_017_we0;
reg w_028_ce0;
reg w_028_we0;
reg w_029_ce0;
reg w_029_we0;
reg w_0210_ce0;
reg w_0210_we0;
reg w_0211_ce0;
reg w_0211_we0;
reg w_0312_ce0;
reg w_0312_we0;
reg w_0313_ce0;
reg w_0313_we0;
reg w_0314_ce0;
reg w_0314_we0;
reg w_0315_ce0;
reg w_0315_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    In_ddr_blk_n_AR;
reg    In_ddr_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln30_reg_685;
reg    W_ddr_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    W_ddr_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln51_reg_694;
reg   [10:0] indvar_flatten11_reg_370;
reg   [8:0] indvar_flatten53_reg_381;
reg   [2:0] L_cho_reg_392;
reg   [7:0] indvar_flatten31_reg_403;
reg   [2:0] L_chi_reg_414;
reg   [5:0] indvar_flatten19_reg_425;
reg   [2:0] L_kr_reg_436;
wire   [10:0] add_ln30_fu_447_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln30_fu_453_p2;
wire   [8:0] add_ln51_1_fu_459_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state17_pp1_stage0_iter0;
reg    ap_block_state18_pp1_stage0_iter1;
wire    ap_block_state19_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln51_fu_465_p2;
reg   [0:0] icmp_ln51_reg_694_pp1_iter1_reg;
wire   [2:0] select_ln51_1_fu_491_p3;
reg   [2:0] select_ln51_1_reg_698;
wire   [1:0] trunc_ln51_fu_499_p1;
reg   [1:0] trunc_ln51_reg_703;
wire   [1:0] select_ln53_fu_555_p3;
reg   [1:0] select_ln53_reg_707;
wire   [2:0] select_ln53_1_fu_581_p3;
wire   [2:0] select_ln55_fu_601_p3;
reg   [2:0] select_ln55_reg_716;
wire   [31:0] bitcast_ln59_fu_609_p1;
reg   [31:0] bitcast_ln59_reg_721;
wire   [2:0] add_ln57_fu_613_p2;
wire   [5:0] select_ln55_1_fu_631_p3;
wire   [7:0] select_ln53_2_fu_645_p3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_CS_fsm_state16;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state18;
reg    ap_enable_reg_pp1_iter2;
reg   [2:0] ap_phi_mux_L_cho_phi_fu_396_p4;
wire   [63:0] zext_ln59_fu_660_p1;
wire   [0:0] icmp_ln53_fu_477_p2;
wire   [2:0] add_ln51_fu_471_p2;
wire   [1:0] trunc_ln59_fu_503_p1;
wire   [0:0] icmp_ln57_fu_521_p2;
wire   [0:0] xor_ln51_fu_515_p2;
wire   [0:0] icmp_ln55_fu_533_p2;
wire   [2:0] select_ln51_fu_483_p3;
wire   [2:0] add_ln53_fu_545_p2;
wire   [0:0] and_ln51_1_fu_539_p2;
wire   [1:0] trunc_ln59_1_fu_551_p1;
wire   [1:0] select_ln51_2_fu_507_p3;
wire   [0:0] xor_ln53_fu_563_p2;
wire   [0:0] and_ln51_fu_527_p2;
wire   [0:0] or_ln53_fu_569_p2;
wire   [0:0] and_ln53_fu_575_p2;
wire   [0:0] or_ln55_fu_589_p2;
wire   [0:0] or_ln55_2_fu_595_p2;
wire   [0:0] or_ln55_1_fu_625_p2;
wire   [5:0] add_ln55_fu_619_p2;
wire   [7:0] add_ln53_1_fu_639_p2;
wire   [4:0] tmp_fu_653_p3;
wire    ap_CS_fsm_state20;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state18)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state18))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L_chi_reg_414 <= select_ln53_1_fu_581_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L_chi_reg_414 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln51_reg_694_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        L_cho_reg_392 <= select_ln51_1_reg_698;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L_cho_reg_392 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L_kr_reg_436 <= add_ln57_fu_613_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L_kr_reg_436 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_453_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten11_reg_370 <= add_ln30_fu_447_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten11_reg_370 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten19_reg_425 <= select_ln55_1_fu_631_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten19_reg_425 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten31_reg_403 <= select_ln53_2_fu_645_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten31_reg_403 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_465_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten53_reg_381 <= add_ln51_1_fu_459_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten53_reg_381 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        bitcast_ln59_reg_721 <= bitcast_ln59_fu_609_p1;
        select_ln53_reg_707 <= select_ln53_fu_555_p3;
        select_ln55_reg_716 <= select_ln55_fu_601_p3;
        trunc_ln51_reg_703 <= trunc_ln51_fu_499_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_685 <= icmp_ln30_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln51_reg_694 <= icmp_ln51_fu_465_p2;
        icmp_ln51_reg_694_pp1_iter1_reg <= icmp_ln51_reg_694;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln51_1_reg_698 <= select_ln51_1_fu_491_p3;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        In_ddr_blk_n_AR = m_axi_In_ddr_ARREADY;
    end else begin
        In_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_ddr_blk_n_R = m_axi_In_ddr_RVALID;
    end else begin
        In_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        W_ddr_blk_n_AR = m_axi_W_ddr_ARREADY;
    end else begin
        W_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        W_ddr_blk_n_R = m_axi_W_ddr_RVALID;
    end else begin
        W_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_453_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_condition_pp1_exit_iter1_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_465_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln51_reg_694_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_L_cho_phi_fu_396_p4 = select_ln51_1_reg_698;
    end else begin
        ap_phi_mux_L_cho_phi_fu_396_p4 = L_cho_reg_392;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_In_ddr_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_In_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_In_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_In_ddr_RREADY = 1'b1;
    end else begin
        m_axi_In_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (m_axi_W_ddr_ARREADY == 1'b1))) begin
        m_axi_W_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_W_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axi_W_ddr_RREADY = 1'b1;
    end else begin
        m_axi_W_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_014_ce0 = 1'b1;
    end else begin
        w_014_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd0) & (trunc_ln51_reg_703 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_014_we0 = 1'b1;
    end else begin
        w_014_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_015_ce0 = 1'b1;
    end else begin
        w_015_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd1) & (trunc_ln51_reg_703 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_015_we0 = 1'b1;
    end else begin
        w_015_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_016_ce0 = 1'b1;
    end else begin
        w_016_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd2) & (trunc_ln51_reg_703 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_016_we0 = 1'b1;
    end else begin
        w_016_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_017_ce0 = 1'b1;
    end else begin
        w_017_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd3) & (trunc_ln51_reg_703 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_017_we0 = 1'b1;
    end else begin
        w_017_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_01_ce0 = 1'b1;
    end else begin
        w_01_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd1) & (trunc_ln51_reg_703 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_01_we0 = 1'b1;
    end else begin
        w_01_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0210_ce0 = 1'b1;
    end else begin
        w_0210_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd2) & (trunc_ln51_reg_703 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0210_we0 = 1'b1;
    end else begin
        w_0210_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0211_ce0 = 1'b1;
    end else begin
        w_0211_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd3) & (trunc_ln51_reg_703 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0211_we0 = 1'b1;
    end else begin
        w_0211_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_028_ce0 = 1'b1;
    end else begin
        w_028_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd0) & (trunc_ln51_reg_703 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_028_we0 = 1'b1;
    end else begin
        w_028_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_029_ce0 = 1'b1;
    end else begin
        w_029_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd1) & (trunc_ln51_reg_703 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_029_we0 = 1'b1;
    end else begin
        w_029_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_02_ce0 = 1'b1;
    end else begin
        w_02_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd2) & (trunc_ln51_reg_703 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_02_we0 = 1'b1;
    end else begin
        w_02_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0312_ce0 = 1'b1;
    end else begin
        w_0312_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd0) & (trunc_ln51_reg_703 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0312_we0 = 1'b1;
    end else begin
        w_0312_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0313_ce0 = 1'b1;
    end else begin
        w_0313_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd1) & (trunc_ln51_reg_703 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0313_we0 = 1'b1;
    end else begin
        w_0313_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0314_ce0 = 1'b1;
    end else begin
        w_0314_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd2) & (trunc_ln51_reg_703 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0314_we0 = 1'b1;
    end else begin
        w_0314_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0315_ce0 = 1'b1;
    end else begin
        w_0315_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd3) & (trunc_ln51_reg_703 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0315_we0 = 1'b1;
    end else begin
        w_0315_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_03_ce0 = 1'b1;
    end else begin
        w_03_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd3) & (trunc_ln51_reg_703 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_03_we0 = 1'b1;
    end else begin
        w_03_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_ce0 = 1'b1;
    end else begin
        w_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln53_reg_707 == 2'd0) & (trunc_ln51_reg_703 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_we0 = 1'b1;
    end else begin
        w_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_In_ddr_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln30_fu_453_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln30_fu_453_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (m_axi_W_ddr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_447_p2 = (indvar_flatten11_reg_370 + 11'd1);

assign add_ln51_1_fu_459_p2 = (indvar_flatten53_reg_381 + 9'd1);

assign add_ln51_fu_471_p2 = (ap_phi_mux_L_cho_phi_fu_396_p4 + 3'd1);

assign add_ln53_1_fu_639_p2 = (indvar_flatten31_reg_403 + 8'd1);

assign add_ln53_fu_545_p2 = (select_ln51_fu_483_p3 + 3'd1);

assign add_ln55_fu_619_p2 = (indvar_flatten19_reg_425 + 6'd1);

assign add_ln57_fu_613_p2 = (select_ln55_fu_601_p3 + 3'd1);

assign and_ln51_1_fu_539_p2 = (xor_ln51_fu_515_p2 & icmp_ln55_fu_533_p2);

assign and_ln51_fu_527_p2 = (xor_ln51_fu_515_p2 & icmp_ln57_fu_521_p2);

assign and_ln53_fu_575_p2 = (or_ln53_fu_569_p2 & and_ln51_fu_527_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_In_ddr_RVALID == 1'b0) & (icmp_ln30_reg_685 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_In_ddr_RVALID == 1'b0) & (icmp_ln30_reg_685 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_W_ddr_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln51_reg_694 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_W_ddr_RVALID == 1'b0));
end

assign ap_block_state17_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp1_stage0_iter1 = ((icmp_ln51_reg_694 == 1'd0) & (m_axi_W_ddr_RVALID == 1'b0));
end

assign ap_block_state19_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_In_ddr_RVALID == 1'b0) & (icmp_ln30_reg_685 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bitcast_ln59_fu_609_p1 = m_axi_W_ddr_RDATA;

assign icmp_ln30_fu_453_p2 = ((indvar_flatten11_reg_370 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_465_p2 = ((indvar_flatten53_reg_381 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_477_p2 = ((indvar_flatten31_reg_403 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_533_p2 = ((indvar_flatten19_reg_425 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_521_p2 = ((L_kr_reg_436 == 3'd4) ? 1'b1 : 1'b0);

assign m_axi_In_ddr_ARADDR = 64'd0;

assign m_axi_In_ddr_ARBURST = 2'd0;

assign m_axi_In_ddr_ARCACHE = 4'd0;

assign m_axi_In_ddr_ARID = 1'd0;

assign m_axi_In_ddr_ARLEN = 32'd1024;

assign m_axi_In_ddr_ARLOCK = 2'd0;

assign m_axi_In_ddr_ARPROT = 3'd0;

assign m_axi_In_ddr_ARQOS = 4'd0;

assign m_axi_In_ddr_ARREGION = 4'd0;

assign m_axi_In_ddr_ARSIZE = 3'd0;

assign m_axi_In_ddr_ARUSER = 1'd0;

assign m_axi_In_ddr_AWADDR = 64'd0;

assign m_axi_In_ddr_AWBURST = 2'd0;

assign m_axi_In_ddr_AWCACHE = 4'd0;

assign m_axi_In_ddr_AWID = 1'd0;

assign m_axi_In_ddr_AWLEN = 32'd0;

assign m_axi_In_ddr_AWLOCK = 2'd0;

assign m_axi_In_ddr_AWPROT = 3'd0;

assign m_axi_In_ddr_AWQOS = 4'd0;

assign m_axi_In_ddr_AWREGION = 4'd0;

assign m_axi_In_ddr_AWSIZE = 3'd0;

assign m_axi_In_ddr_AWUSER = 1'd0;

assign m_axi_In_ddr_AWVALID = 1'b0;

assign m_axi_In_ddr_BREADY = 1'b0;

assign m_axi_In_ddr_WDATA = 32'd0;

assign m_axi_In_ddr_WID = 1'd0;

assign m_axi_In_ddr_WLAST = 1'b0;

assign m_axi_In_ddr_WSTRB = 4'd0;

assign m_axi_In_ddr_WUSER = 1'd0;

assign m_axi_In_ddr_WVALID = 1'b0;

assign m_axi_W_ddr_ARADDR = 64'd0;

assign m_axi_W_ddr_ARBURST = 2'd0;

assign m_axi_W_ddr_ARCACHE = 4'd0;

assign m_axi_W_ddr_ARID = 1'd0;

assign m_axi_W_ddr_ARLEN = 32'd256;

assign m_axi_W_ddr_ARLOCK = 2'd0;

assign m_axi_W_ddr_ARPROT = 3'd0;

assign m_axi_W_ddr_ARQOS = 4'd0;

assign m_axi_W_ddr_ARREGION = 4'd0;

assign m_axi_W_ddr_ARSIZE = 3'd0;

assign m_axi_W_ddr_ARUSER = 1'd0;

assign m_axi_W_ddr_AWADDR = 64'd0;

assign m_axi_W_ddr_AWBURST = 2'd0;

assign m_axi_W_ddr_AWCACHE = 4'd0;

assign m_axi_W_ddr_AWID = 1'd0;

assign m_axi_W_ddr_AWLEN = 32'd0;

assign m_axi_W_ddr_AWLOCK = 2'd0;

assign m_axi_W_ddr_AWPROT = 3'd0;

assign m_axi_W_ddr_AWQOS = 4'd0;

assign m_axi_W_ddr_AWREGION = 4'd0;

assign m_axi_W_ddr_AWSIZE = 3'd0;

assign m_axi_W_ddr_AWUSER = 1'd0;

assign m_axi_W_ddr_AWVALID = 1'b0;

assign m_axi_W_ddr_BREADY = 1'b0;

assign m_axi_W_ddr_WDATA = 32'd0;

assign m_axi_W_ddr_WID = 1'd0;

assign m_axi_W_ddr_WLAST = 1'b0;

assign m_axi_W_ddr_WSTRB = 4'd0;

assign m_axi_W_ddr_WUSER = 1'd0;

assign m_axi_W_ddr_WVALID = 1'b0;

assign or_ln53_fu_569_p2 = (xor_ln53_fu_563_p2 | icmp_ln53_fu_477_p2);

assign or_ln55_1_fu_625_p2 = (icmp_ln53_fu_477_p2 | and_ln51_1_fu_539_p2);

assign or_ln55_2_fu_595_p2 = (or_ln55_fu_589_p2 | icmp_ln53_fu_477_p2);

assign or_ln55_fu_589_p2 = (and_ln53_fu_575_p2 | and_ln51_1_fu_539_p2);

assign select_ln51_1_fu_491_p3 = ((icmp_ln53_fu_477_p2[0:0] == 1'b1) ? add_ln51_fu_471_p2 : ap_phi_mux_L_cho_phi_fu_396_p4);

assign select_ln51_2_fu_507_p3 = ((icmp_ln53_fu_477_p2[0:0] == 1'b1) ? 2'd0 : trunc_ln59_fu_503_p1);

assign select_ln51_fu_483_p3 = ((icmp_ln53_fu_477_p2[0:0] == 1'b1) ? 3'd0 : L_chi_reg_414);

assign select_ln53_1_fu_581_p3 = ((and_ln51_1_fu_539_p2[0:0] == 1'b1) ? add_ln53_fu_545_p2 : select_ln51_fu_483_p3);

assign select_ln53_2_fu_645_p3 = ((icmp_ln53_fu_477_p2[0:0] == 1'b1) ? 8'd1 : add_ln53_1_fu_639_p2);

assign select_ln53_fu_555_p3 = ((and_ln51_1_fu_539_p2[0:0] == 1'b1) ? trunc_ln59_1_fu_551_p1 : select_ln51_2_fu_507_p3);

assign select_ln55_1_fu_631_p3 = ((or_ln55_1_fu_625_p2[0:0] == 1'b1) ? 6'd1 : add_ln55_fu_619_p2);

assign select_ln55_fu_601_p3 = ((or_ln55_2_fu_595_p2[0:0] == 1'b1) ? 3'd0 : L_kr_reg_436);

assign tmp_fu_653_p3 = {{select_ln55_reg_716}, {2'd0}};

assign trunc_ln51_fu_499_p1 = select_ln51_1_fu_491_p3[1:0];

assign trunc_ln59_1_fu_551_p1 = add_ln53_fu_545_p2[1:0];

assign trunc_ln59_fu_503_p1 = L_chi_reg_414[1:0];

assign w_014_address0 = zext_ln59_fu_660_p1;

assign w_014_d0 = bitcast_ln59_reg_721;

assign w_015_address0 = zext_ln59_fu_660_p1;

assign w_015_d0 = bitcast_ln59_reg_721;

assign w_016_address0 = zext_ln59_fu_660_p1;

assign w_016_d0 = bitcast_ln59_reg_721;

assign w_017_address0 = zext_ln59_fu_660_p1;

assign w_017_d0 = bitcast_ln59_reg_721;

assign w_01_address0 = zext_ln59_fu_660_p1;

assign w_01_d0 = bitcast_ln59_reg_721;

assign w_0210_address0 = zext_ln59_fu_660_p1;

assign w_0210_d0 = bitcast_ln59_reg_721;

assign w_0211_address0 = zext_ln59_fu_660_p1;

assign w_0211_d0 = bitcast_ln59_reg_721;

assign w_028_address0 = zext_ln59_fu_660_p1;

assign w_028_d0 = bitcast_ln59_reg_721;

assign w_029_address0 = zext_ln59_fu_660_p1;

assign w_029_d0 = bitcast_ln59_reg_721;

assign w_02_address0 = zext_ln59_fu_660_p1;

assign w_02_d0 = bitcast_ln59_reg_721;

assign w_0312_address0 = zext_ln59_fu_660_p1;

assign w_0312_d0 = bitcast_ln59_reg_721;

assign w_0313_address0 = zext_ln59_fu_660_p1;

assign w_0313_d0 = bitcast_ln59_reg_721;

assign w_0314_address0 = zext_ln59_fu_660_p1;

assign w_0314_d0 = bitcast_ln59_reg_721;

assign w_0315_address0 = zext_ln59_fu_660_p1;

assign w_0315_d0 = bitcast_ln59_reg_721;

assign w_03_address0 = zext_ln59_fu_660_p1;

assign w_03_d0 = bitcast_ln59_reg_721;

assign w_0_address0 = zext_ln59_fu_660_p1;

assign w_0_d0 = bitcast_ln59_reg_721;

assign xor_ln51_fu_515_p2 = (icmp_ln53_fu_477_p2 ^ 1'd1);

assign xor_ln53_fu_563_p2 = (icmp_ln55_fu_533_p2 ^ 1'd1);

assign zext_ln59_fu_660_p1 = tmp_fu_653_p3;

endmodule //conv_acc3t_process_r
