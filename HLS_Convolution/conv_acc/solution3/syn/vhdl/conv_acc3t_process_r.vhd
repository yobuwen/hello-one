-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_acc3t_process_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_In_ddr_AWREADY : IN STD_LOGIC;
    m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_WVALID : OUT STD_LOGIC;
    m_axi_In_ddr_WREADY : IN STD_LOGIC;
    m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_WLAST : OUT STD_LOGIC;
    m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_In_ddr_ARREADY : IN STD_LOGIC;
    m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_RVALID : IN STD_LOGIC;
    m_axi_In_ddr_RREADY : OUT STD_LOGIC;
    m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_In_ddr_RLAST : IN STD_LOGIC;
    m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BVALID : IN STD_LOGIC;
    m_axi_In_ddr_BREADY : OUT STD_LOGIC;
    m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_W_ddr_AWREADY : IN STD_LOGIC;
    m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_WVALID : OUT STD_LOGIC;
    m_axi_W_ddr_WREADY : IN STD_LOGIC;
    m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_WLAST : OUT STD_LOGIC;
    m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_W_ddr_ARREADY : IN STD_LOGIC;
    m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RVALID : IN STD_LOGIC;
    m_axi_W_ddr_RREADY : OUT STD_LOGIC;
    m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_RLAST : IN STD_LOGIC;
    m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BVALID : IN STD_LOGIC;
    m_axi_W_ddr_BREADY : OUT STD_LOGIC;
    m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    w_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0_ce0 : OUT STD_LOGIC;
    w_0_we0 : OUT STD_LOGIC;
    w_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_01_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_01_ce0 : OUT STD_LOGIC;
    w_01_we0 : OUT STD_LOGIC;
    w_01_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_02_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_02_ce0 : OUT STD_LOGIC;
    w_02_we0 : OUT STD_LOGIC;
    w_02_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_03_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_03_ce0 : OUT STD_LOGIC;
    w_03_we0 : OUT STD_LOGIC;
    w_03_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_014_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_014_ce0 : OUT STD_LOGIC;
    w_014_we0 : OUT STD_LOGIC;
    w_014_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_015_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_015_ce0 : OUT STD_LOGIC;
    w_015_we0 : OUT STD_LOGIC;
    w_015_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_016_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_016_ce0 : OUT STD_LOGIC;
    w_016_we0 : OUT STD_LOGIC;
    w_016_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_017_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_017_ce0 : OUT STD_LOGIC;
    w_017_we0 : OUT STD_LOGIC;
    w_017_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_028_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_028_ce0 : OUT STD_LOGIC;
    w_028_we0 : OUT STD_LOGIC;
    w_028_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_029_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_029_ce0 : OUT STD_LOGIC;
    w_029_we0 : OUT STD_LOGIC;
    w_029_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0210_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0210_ce0 : OUT STD_LOGIC;
    w_0210_we0 : OUT STD_LOGIC;
    w_0210_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0211_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0211_ce0 : OUT STD_LOGIC;
    w_0211_we0 : OUT STD_LOGIC;
    w_0211_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0312_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0312_ce0 : OUT STD_LOGIC;
    w_0312_we0 : OUT STD_LOGIC;
    w_0312_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0313_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0313_ce0 : OUT STD_LOGIC;
    w_0313_we0 : OUT STD_LOGIC;
    w_0313_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0314_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0314_ce0 : OUT STD_LOGIC;
    w_0314_we0 : OUT STD_LOGIC;
    w_0314_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_0315_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_0315_ce0 : OUT STD_LOGIC;
    w_0315_we0 : OUT STD_LOGIC;
    w_0315_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_acc3t_process_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal In_ddr_blk_n_AR : STD_LOGIC;
    signal In_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln30_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal W_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln51_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten11_reg_370 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten53_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal L_cho_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten31_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal L_chi_reg_414 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten19_reg_425 : STD_LOGIC_VECTOR (5 downto 0);
    signal L_kr_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln30_fu_447_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln30_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_1_fu_459_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state17_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_694_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_1_fu_491_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_1_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln51_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln51_reg_703 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln53_fu_555_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln53_reg_707 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln53_1_fu_581_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_fu_601_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_reg_716 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln59_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_613_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_1_fu_631_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_2_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_condition_pp1_exit_iter1_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_L_cho_phi_fu_396_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln59_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln53_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_fu_471_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln59_fu_503_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln51_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_483_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_fu_545_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln51_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln59_1_fu_551_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_2_fu_507_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln53_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_619_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln53_1_fu_639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_653_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state18)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state18))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    L_chi_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                L_chi_reg_414 <= select_ln53_1_fu_581_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                L_chi_reg_414 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_cho_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln51_reg_694_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                L_cho_reg_392 <= select_ln51_1_reg_698;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                L_cho_reg_392 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_kr_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                L_kr_reg_436 <= add_ln57_fu_613_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                L_kr_reg_436 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_453_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten11_reg_370 <= add_ln30_fu_447_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten11_reg_370 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten19_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten19_reg_425 <= select_ln55_1_fu_631_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten19_reg_425 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten31_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten31_reg_403 <= select_ln53_2_fu_645_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten31_reg_403 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten53_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_465_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten53_reg_381 <= add_ln51_1_fu_459_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten53_reg_381 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                bitcast_ln59_reg_721 <= bitcast_ln59_fu_609_p1;
                select_ln53_reg_707 <= select_ln53_fu_555_p3;
                select_ln55_reg_716 <= select_ln55_fu_601_p3;
                trunc_ln51_reg_703 <= trunc_ln51_fu_499_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_685 <= icmp_ln30_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln51_reg_694 <= icmp_ln51_fu_465_p2;
                icmp_ln51_reg_694_pp1_iter1_reg <= icmp_ln51_reg_694;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln51_1_reg_698 <= select_ln51_1_fu_491_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_In_ddr_ARREADY, m_axi_W_ddr_ARREADY, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter0, icmp_ln30_fu_453_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_In_ddr_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln30_fu_453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln30_fu_453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_W_ddr_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    In_ddr_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_In_ddr_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            In_ddr_blk_n_AR <= m_axi_In_ddr_ARREADY;
        else 
            In_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    In_ddr_blk_n_R_assign_proc : process(m_axi_In_ddr_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln30_reg_685)
    begin
        if (((icmp_ln30_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_ddr_blk_n_R <= m_axi_In_ddr_RVALID;
        else 
            In_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    W_ddr_blk_n_AR_assign_proc : process(m_axi_W_ddr_ARREADY, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            W_ddr_blk_n_AR <= m_axi_W_ddr_ARREADY;
        else 
            W_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    W_ddr_blk_n_R_assign_proc : process(m_axi_W_ddr_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln51_reg_694)
    begin
        if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            W_ddr_blk_n_R <= m_axi_W_ddr_RVALID;
        else 
            W_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln30_fu_447_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_370) + unsigned(ap_const_lv11_1));
    add_ln51_1_fu_459_p2 <= std_logic_vector(unsigned(indvar_flatten53_reg_381) + unsigned(ap_const_lv9_1));
    add_ln51_fu_471_p2 <= std_logic_vector(unsigned(ap_phi_mux_L_cho_phi_fu_396_p4) + unsigned(ap_const_lv3_1));
    add_ln53_1_fu_639_p2 <= std_logic_vector(unsigned(indvar_flatten31_reg_403) + unsigned(ap_const_lv8_1));
    add_ln53_fu_545_p2 <= std_logic_vector(unsigned(select_ln51_fu_483_p3) + unsigned(ap_const_lv3_1));
    add_ln55_fu_619_p2 <= std_logic_vector(unsigned(indvar_flatten19_reg_425) + unsigned(ap_const_lv6_1));
    add_ln57_fu_613_p2 <= std_logic_vector(unsigned(select_ln55_fu_601_p3) + unsigned(ap_const_lv3_1));
    and_ln51_1_fu_539_p2 <= (xor_ln51_fu_515_p2 and icmp_ln55_fu_533_p2);
    and_ln51_fu_527_p2 <= (xor_ln51_fu_515_p2 and icmp_ln57_fu_521_p2);
    and_ln53_fu_575_p2 <= (or_ln53_fu_569_p2 and and_ln51_fu_527_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_In_ddr_RVALID, ap_enable_reg_pp0_iter1, icmp_ln30_reg_685)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_In_ddr_RVALID = ap_const_logic_0) and (icmp_ln30_reg_685 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_In_ddr_RVALID, ap_enable_reg_pp0_iter1, icmp_ln30_reg_685)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_In_ddr_RVALID = ap_const_logic_0) and (icmp_ln30_reg_685 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_W_ddr_RVALID, ap_enable_reg_pp1_iter1, icmp_ln51_reg_694)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (m_axi_W_ddr_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_W_ddr_RVALID, ap_enable_reg_pp1_iter1, icmp_ln51_reg_694)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (m_axi_W_ddr_RVALID = ap_const_logic_0));
    end process;

        ap_block_state17_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp1_stage0_iter1_assign_proc : process(m_axi_W_ddr_RVALID, icmp_ln51_reg_694)
    begin
                ap_block_state18_pp1_stage0_iter1 <= ((icmp_ln51_reg_694 = ap_const_lv1_0) and (m_axi_W_ddr_RVALID = ap_const_logic_0));
    end process;

        ap_block_state19_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(m_axi_In_ddr_RVALID, icmp_ln30_reg_685)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((m_axi_In_ddr_RVALID = ap_const_logic_0) and (icmp_ln30_reg_685 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln30_fu_453_p2)
    begin
        if ((icmp_ln30_fu_453_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter1_state18_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter1_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln51_fu_465_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((icmp_ln51_fu_465_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_L_cho_phi_fu_396_p4_assign_proc : process(ap_block_pp1_stage0, L_cho_reg_392, icmp_ln51_reg_694_pp1_iter1_reg, select_ln51_1_reg_698, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln51_reg_694_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_L_cho_phi_fu_396_p4 <= select_ln51_1_reg_698;
        else 
            ap_phi_mux_L_cho_phi_fu_396_p4 <= L_cho_reg_392;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln59_fu_609_p1 <= m_axi_W_ddr_RDATA;
    icmp_ln30_fu_453_p2 <= "1" when (indvar_flatten11_reg_370 = ap_const_lv11_400) else "0";
    icmp_ln51_fu_465_p2 <= "1" when (indvar_flatten53_reg_381 = ap_const_lv9_100) else "0";
    icmp_ln53_fu_477_p2 <= "1" when (indvar_flatten31_reg_403 = ap_const_lv8_40) else "0";
    icmp_ln55_fu_533_p2 <= "1" when (indvar_flatten19_reg_425 = ap_const_lv6_10) else "0";
    icmp_ln57_fu_521_p2 <= "1" when (L_kr_reg_436 = ap_const_lv3_4) else "0";
    m_axi_In_ddr_ARADDR <= ap_const_lv64_0;
    m_axi_In_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_In_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_In_ddr_ARID <= ap_const_lv1_0;
    m_axi_In_ddr_ARLEN <= ap_const_lv32_400;
    m_axi_In_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_In_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_In_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_In_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_In_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_In_ddr_ARUSER <= ap_const_lv1_0;

    m_axi_In_ddr_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_In_ddr_ARREADY)
    begin
        if ((not(((m_axi_In_ddr_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_In_ddr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_In_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_In_ddr_AWADDR <= ap_const_lv64_0;
    m_axi_In_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_In_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_In_ddr_AWID <= ap_const_lv1_0;
    m_axi_In_ddr_AWLEN <= ap_const_lv32_0;
    m_axi_In_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_In_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_In_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_In_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_In_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_In_ddr_AWUSER <= ap_const_lv1_0;
    m_axi_In_ddr_AWVALID <= ap_const_logic_0;
    m_axi_In_ddr_BREADY <= ap_const_logic_0;

    m_axi_In_ddr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln30_reg_685, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln30_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_In_ddr_RREADY <= ap_const_logic_1;
        else 
            m_axi_In_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_In_ddr_WDATA <= ap_const_lv32_0;
    m_axi_In_ddr_WID <= ap_const_lv1_0;
    m_axi_In_ddr_WLAST <= ap_const_logic_0;
    m_axi_In_ddr_WSTRB <= ap_const_lv4_0;
    m_axi_In_ddr_WUSER <= ap_const_lv1_0;
    m_axi_In_ddr_WVALID <= ap_const_logic_0;
    m_axi_W_ddr_ARADDR <= ap_const_lv64_0;
    m_axi_W_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_W_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_W_ddr_ARID <= ap_const_lv1_0;
    m_axi_W_ddr_ARLEN <= ap_const_lv32_100;
    m_axi_W_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_W_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_W_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_W_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_W_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_W_ddr_ARUSER <= ap_const_lv1_0;

    m_axi_W_ddr_ARVALID_assign_proc : process(m_axi_W_ddr_ARREADY, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_W_ddr_ARREADY = ap_const_logic_1))) then 
            m_axi_W_ddr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_W_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W_ddr_AWADDR <= ap_const_lv64_0;
    m_axi_W_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_W_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_W_ddr_AWID <= ap_const_lv1_0;
    m_axi_W_ddr_AWLEN <= ap_const_lv32_0;
    m_axi_W_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_W_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_W_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_W_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_W_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_W_ddr_AWUSER <= ap_const_lv1_0;
    m_axi_W_ddr_AWVALID <= ap_const_logic_0;
    m_axi_W_ddr_BREADY <= ap_const_logic_0;

    m_axi_W_ddr_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln51_reg_694, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln51_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m_axi_W_ddr_RREADY <= ap_const_logic_1;
        else 
            m_axi_W_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W_ddr_WDATA <= ap_const_lv32_0;
    m_axi_W_ddr_WID <= ap_const_lv1_0;
    m_axi_W_ddr_WLAST <= ap_const_logic_0;
    m_axi_W_ddr_WSTRB <= ap_const_lv4_0;
    m_axi_W_ddr_WUSER <= ap_const_lv1_0;
    m_axi_W_ddr_WVALID <= ap_const_logic_0;
    or_ln53_fu_569_p2 <= (xor_ln53_fu_563_p2 or icmp_ln53_fu_477_p2);
    or_ln55_1_fu_625_p2 <= (icmp_ln53_fu_477_p2 or and_ln51_1_fu_539_p2);
    or_ln55_2_fu_595_p2 <= (or_ln55_fu_589_p2 or icmp_ln53_fu_477_p2);
    or_ln55_fu_589_p2 <= (and_ln53_fu_575_p2 or and_ln51_1_fu_539_p2);
    select_ln51_1_fu_491_p3 <= 
        add_ln51_fu_471_p2 when (icmp_ln53_fu_477_p2(0) = '1') else 
        ap_phi_mux_L_cho_phi_fu_396_p4;
    select_ln51_2_fu_507_p3 <= 
        ap_const_lv2_0 when (icmp_ln53_fu_477_p2(0) = '1') else 
        trunc_ln59_fu_503_p1;
    select_ln51_fu_483_p3 <= 
        ap_const_lv3_0 when (icmp_ln53_fu_477_p2(0) = '1') else 
        L_chi_reg_414;
    select_ln53_1_fu_581_p3 <= 
        add_ln53_fu_545_p2 when (and_ln51_1_fu_539_p2(0) = '1') else 
        select_ln51_fu_483_p3;
    select_ln53_2_fu_645_p3 <= 
        ap_const_lv8_1 when (icmp_ln53_fu_477_p2(0) = '1') else 
        add_ln53_1_fu_639_p2;
    select_ln53_fu_555_p3 <= 
        trunc_ln59_1_fu_551_p1 when (and_ln51_1_fu_539_p2(0) = '1') else 
        select_ln51_2_fu_507_p3;
    select_ln55_1_fu_631_p3 <= 
        ap_const_lv6_1 when (or_ln55_1_fu_625_p2(0) = '1') else 
        add_ln55_fu_619_p2;
    select_ln55_fu_601_p3 <= 
        ap_const_lv3_0 when (or_ln55_2_fu_595_p2(0) = '1') else 
        L_kr_reg_436;
    tmp_fu_653_p3 <= (select_ln55_reg_716 & ap_const_lv2_0);
    trunc_ln51_fu_499_p1 <= select_ln51_1_fu_491_p3(2 - 1 downto 0);
    trunc_ln59_1_fu_551_p1 <= add_ln53_fu_545_p2(2 - 1 downto 0);
    trunc_ln59_fu_503_p1 <= L_chi_reg_414(2 - 1 downto 0);
    w_014_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_014_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_014_ce0 <= ap_const_logic_1;
        else 
            w_014_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_014_d0 <= bitcast_ln59_reg_721;

    w_014_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_0) and (trunc_ln51_reg_703 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_014_we0 <= ap_const_logic_1;
        else 
            w_014_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_015_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_015_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_015_ce0 <= ap_const_logic_1;
        else 
            w_015_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_015_d0 <= bitcast_ln59_reg_721;

    w_015_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_1) and (trunc_ln51_reg_703 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_015_we0 <= ap_const_logic_1;
        else 
            w_015_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_016_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_016_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_016_ce0 <= ap_const_logic_1;
        else 
            w_016_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_016_d0 <= bitcast_ln59_reg_721;

    w_016_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_2) and (trunc_ln51_reg_703 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_016_we0 <= ap_const_logic_1;
        else 
            w_016_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_017_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_017_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_017_ce0 <= ap_const_logic_1;
        else 
            w_017_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_017_d0 <= bitcast_ln59_reg_721;

    w_017_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_3) and (trunc_ln51_reg_703 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_017_we0 <= ap_const_logic_1;
        else 
            w_017_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_01_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_01_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_01_ce0 <= ap_const_logic_1;
        else 
            w_01_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_01_d0 <= bitcast_ln59_reg_721;

    w_01_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_1) and (trunc_ln51_reg_703 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_01_we0 <= ap_const_logic_1;
        else 
            w_01_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0210_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0210_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0210_ce0 <= ap_const_logic_1;
        else 
            w_0210_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0210_d0 <= bitcast_ln59_reg_721;

    w_0210_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_2) and (trunc_ln51_reg_703 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0210_we0 <= ap_const_logic_1;
        else 
            w_0210_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0211_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0211_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0211_ce0 <= ap_const_logic_1;
        else 
            w_0211_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0211_d0 <= bitcast_ln59_reg_721;

    w_0211_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_3) and (trunc_ln51_reg_703 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0211_we0 <= ap_const_logic_1;
        else 
            w_0211_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_028_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_028_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_028_ce0 <= ap_const_logic_1;
        else 
            w_028_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_028_d0 <= bitcast_ln59_reg_721;

    w_028_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_0) and (trunc_ln51_reg_703 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_028_we0 <= ap_const_logic_1;
        else 
            w_028_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_029_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_029_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_029_ce0 <= ap_const_logic_1;
        else 
            w_029_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_029_d0 <= bitcast_ln59_reg_721;

    w_029_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_1) and (trunc_ln51_reg_703 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_029_we0 <= ap_const_logic_1;
        else 
            w_029_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_02_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_02_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_02_ce0 <= ap_const_logic_1;
        else 
            w_02_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_02_d0 <= bitcast_ln59_reg_721;

    w_02_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_2) and (trunc_ln51_reg_703 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_02_we0 <= ap_const_logic_1;
        else 
            w_02_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0312_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0312_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0312_ce0 <= ap_const_logic_1;
        else 
            w_0312_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0312_d0 <= bitcast_ln59_reg_721;

    w_0312_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_0) and (trunc_ln51_reg_703 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0312_we0 <= ap_const_logic_1;
        else 
            w_0312_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0313_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0313_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0313_ce0 <= ap_const_logic_1;
        else 
            w_0313_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0313_d0 <= bitcast_ln59_reg_721;

    w_0313_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_1) and (trunc_ln51_reg_703 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0313_we0 <= ap_const_logic_1;
        else 
            w_0313_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0314_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0314_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0314_ce0 <= ap_const_logic_1;
        else 
            w_0314_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0314_d0 <= bitcast_ln59_reg_721;

    w_0314_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_2) and (trunc_ln51_reg_703 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0314_we0 <= ap_const_logic_1;
        else 
            w_0314_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0315_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0315_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0315_ce0 <= ap_const_logic_1;
        else 
            w_0315_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0315_d0 <= bitcast_ln59_reg_721;

    w_0315_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_3) and (trunc_ln51_reg_703 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0315_we0 <= ap_const_logic_1;
        else 
            w_0315_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_03_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_03_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_03_ce0 <= ap_const_logic_1;
        else 
            w_03_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_03_d0 <= bitcast_ln59_reg_721;

    w_03_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_3) and (trunc_ln51_reg_703 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_03_we0 <= ap_const_logic_1;
        else 
            w_03_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0_address0 <= zext_ln59_fu_660_p1(4 - 1 downto 0);

    w_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_ce0 <= ap_const_logic_1;
        else 
            w_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_0_d0 <= bitcast_ln59_reg_721;

    w_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln51_reg_703, select_ln53_reg_707, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln53_reg_707 = ap_const_lv2_0) and (trunc_ln51_reg_703 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_we0 <= ap_const_logic_1;
        else 
            w_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln51_fu_515_p2 <= (icmp_ln53_fu_477_p2 xor ap_const_lv1_1);
    xor_ln53_fu_563_p2 <= (icmp_ln55_fu_533_p2 xor ap_const_lv1_1);
    zext_ln59_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_653_p3),64));
end behav;
