-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_acc3t is
generic (
    C_M_AXI_IN_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IN_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUT_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IN_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_W_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_In_ddr_AWREADY : IN STD_LOGIC;
    m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_WVALID : OUT STD_LOGIC;
    m_axi_In_ddr_WREADY : IN STD_LOGIC;
    m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_In_ddr_WLAST : OUT STD_LOGIC;
    m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_In_ddr_ARREADY : IN STD_LOGIC;
    m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RVALID : IN STD_LOGIC;
    m_axi_In_ddr_RREADY : OUT STD_LOGIC;
    m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_RLAST : IN STD_LOGIC;
    m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BVALID : IN STD_LOGIC;
    m_axi_In_ddr_BREADY : OUT STD_LOGIC;
    m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_W_ddr_AWREADY : IN STD_LOGIC;
    m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_WVALID : OUT STD_LOGIC;
    m_axi_W_ddr_WREADY : IN STD_LOGIC;
    m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_W_ddr_WLAST : OUT STD_LOGIC;
    m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_W_ddr_ARREADY : IN STD_LOGIC;
    m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RVALID : IN STD_LOGIC;
    m_axi_W_ddr_RREADY : OUT STD_LOGIC;
    m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_RLAST : IN STD_LOGIC;
    m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BVALID : IN STD_LOGIC;
    m_axi_W_ddr_BREADY : OUT STD_LOGIC;
    m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
    m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_WREADY : IN STD_LOGIC;
    m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
    m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
    m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RVALID : IN STD_LOGIC;
    m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_RLAST : IN STD_LOGIC;
    m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BVALID : IN STD_LOGIC;
    m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of conv_acc3t is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_acc3t_conv_acc3t,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=2089,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=2750,HLS_SYN_LUT=2703,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Out_ddr_blk_n_AW : STD_LOGIC;
    signal Out_ddr_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln75_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_595_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal In_ddr_AWREADY : STD_LOGIC;
    signal In_ddr_WREADY : STD_LOGIC;
    signal In_ddr_ARVALID : STD_LOGIC;
    signal In_ddr_ARREADY : STD_LOGIC;
    signal In_ddr_RVALID : STD_LOGIC;
    signal In_ddr_RREADY : STD_LOGIC;
    signal In_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal In_ddr_RLAST : STD_LOGIC;
    signal In_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal In_ddr_BVALID : STD_LOGIC;
    signal In_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal In_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_AWREADY : STD_LOGIC;
    signal W_ddr_WREADY : STD_LOGIC;
    signal W_ddr_ARVALID : STD_LOGIC;
    signal W_ddr_ARREADY : STD_LOGIC;
    signal W_ddr_RVALID : STD_LOGIC;
    signal W_ddr_RREADY : STD_LOGIC;
    signal W_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal W_ddr_RLAST : STD_LOGIC;
    signal W_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BVALID : STD_LOGIC;
    signal W_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_AWVALID : STD_LOGIC;
    signal Out_ddr_AWREADY : STD_LOGIC;
    signal Out_ddr_WVALID : STD_LOGIC;
    signal Out_ddr_WREADY : STD_LOGIC;
    signal Out_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_ARREADY : STD_LOGIC;
    signal Out_ddr_RVALID : STD_LOGIC;
    signal Out_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_RLAST : STD_LOGIC;
    signal Out_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BVALID : STD_LOGIC;
    signal Out_ddr_BREADY : STD_LOGIC;
    signal Out_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten33_reg_246 : STD_LOGIC_VECTOR (9 downto 0);
    signal L_ro_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_268 : STD_LOGIC_VECTOR (6 downto 0);
    signal L_co_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_cho_reg_290 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln75_1_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln75_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_1_fu_435_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln75_1_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_2_fu_541_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln81_fu_549_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln81_reg_629 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln79_fu_553_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln77_3_fu_565_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_573_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_process_r_fu_301_ap_ready : STD_LOGIC;
    signal grp_process_r_fu_301_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_0_ce0 : STD_LOGIC;
    signal out_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1_ce0 : STD_LOGIC;
    signal out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_2_ce0 : STD_LOGIC;
    signal out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_3_ce0 : STD_LOGIC;
    signal out_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_ap_start : STD_LOGIC;
    signal grp_process_r_fu_301_ap_idle : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_AWVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_WVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_WLAST : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_In_ddr_RREADY : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_In_ddr_BREADY : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_AWVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_WVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_WLAST : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARVALID : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_r_fu_301_m_axi_W_ddr_RREADY : STD_LOGIC;
    signal grp_process_r_fu_301_m_axi_W_ddr_BREADY : STD_LOGIC;
    signal grp_process_r_fu_301_w_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_01_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_01_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_01_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_01_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_02_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_02_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_02_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_02_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_03_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_03_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_03_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_03_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_014_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_014_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_014_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_014_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_015_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_015_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_015_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_015_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_016_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_016_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_016_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_016_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_017_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_017_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_017_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_017_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_028_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_028_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_028_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_028_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_029_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_029_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_029_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_029_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0210_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0210_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0210_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0210_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0211_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0211_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0211_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0211_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0312_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0312_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0312_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0312_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0313_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0313_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0313_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0313_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0314_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0314_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0314_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0314_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_r_fu_301_w_0315_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_w_0315_ce0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0315_we0 : STD_LOGIC;
    signal grp_process_r_fu_301_w_0315_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_L_ro_phi_fu_261_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_r_fu_301_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln81_5_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_2_fu_355_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln81_fu_367_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_1_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln77_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_417_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_409_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_2_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_451_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_443_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_3_fu_459_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln81_1_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_fu_377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln79_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln75_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_401_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln75_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln81_2_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_4_fu_515_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_1_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_2_fu_469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_1_fu_525_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln77_1_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_acc3t_process_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_In_ddr_AWREADY : IN STD_LOGIC;
        m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_WVALID : OUT STD_LOGIC;
        m_axi_In_ddr_WREADY : IN STD_LOGIC;
        m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_WLAST : OUT STD_LOGIC;
        m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_In_ddr_ARREADY : IN STD_LOGIC;
        m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RVALID : IN STD_LOGIC;
        m_axi_In_ddr_RREADY : OUT STD_LOGIC;
        m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_RLAST : IN STD_LOGIC;
        m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_BVALID : IN STD_LOGIC;
        m_axi_In_ddr_BREADY : OUT STD_LOGIC;
        m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_W_ddr_AWREADY : IN STD_LOGIC;
        m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WVALID : OUT STD_LOGIC;
        m_axi_W_ddr_WREADY : IN STD_LOGIC;
        m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_WLAST : OUT STD_LOGIC;
        m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_W_ddr_ARREADY : IN STD_LOGIC;
        m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RVALID : IN STD_LOGIC;
        m_axi_W_ddr_RREADY : OUT STD_LOGIC;
        m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_RLAST : IN STD_LOGIC;
        m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BVALID : IN STD_LOGIC;
        m_axi_W_ddr_BREADY : OUT STD_LOGIC;
        m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        w_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0_ce0 : OUT STD_LOGIC;
        w_0_we0 : OUT STD_LOGIC;
        w_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_01_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_01_ce0 : OUT STD_LOGIC;
        w_01_we0 : OUT STD_LOGIC;
        w_01_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_02_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_02_ce0 : OUT STD_LOGIC;
        w_02_we0 : OUT STD_LOGIC;
        w_02_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_03_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_03_ce0 : OUT STD_LOGIC;
        w_03_we0 : OUT STD_LOGIC;
        w_03_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_014_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_014_ce0 : OUT STD_LOGIC;
        w_014_we0 : OUT STD_LOGIC;
        w_014_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_015_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_015_ce0 : OUT STD_LOGIC;
        w_015_we0 : OUT STD_LOGIC;
        w_015_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_016_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_016_ce0 : OUT STD_LOGIC;
        w_016_we0 : OUT STD_LOGIC;
        w_016_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_017_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_017_ce0 : OUT STD_LOGIC;
        w_017_we0 : OUT STD_LOGIC;
        w_017_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_028_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_028_ce0 : OUT STD_LOGIC;
        w_028_we0 : OUT STD_LOGIC;
        w_028_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_029_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_029_ce0 : OUT STD_LOGIC;
        w_029_we0 : OUT STD_LOGIC;
        w_029_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0210_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0210_ce0 : OUT STD_LOGIC;
        w_0210_we0 : OUT STD_LOGIC;
        w_0210_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0211_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0211_ce0 : OUT STD_LOGIC;
        w_0211_we0 : OUT STD_LOGIC;
        w_0211_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0312_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0312_ce0 : OUT STD_LOGIC;
        w_0312_we0 : OUT STD_LOGIC;
        w_0312_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0313_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0313_ce0 : OUT STD_LOGIC;
        w_0313_we0 : OUT STD_LOGIC;
        w_0313_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0314_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0314_ce0 : OUT STD_LOGIC;
        w_0314_we0 : OUT STD_LOGIC;
        w_0314_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_0315_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_0315_ce0 : OUT STD_LOGIC;
        w_0315_we0 : OUT STD_LOGIC;
        w_0315_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc3t_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc3t_out_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc3t_w_0_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc3t_In_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_acc3t_W_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_acc3t_Out_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    In_ddr_m_axi_U : component conv_acc3t_In_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IN_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IN_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_In_ddr_AWVALID,
        AWREADY => m_axi_In_ddr_AWREADY,
        AWADDR => m_axi_In_ddr_AWADDR,
        AWID => m_axi_In_ddr_AWID,
        AWLEN => m_axi_In_ddr_AWLEN,
        AWSIZE => m_axi_In_ddr_AWSIZE,
        AWBURST => m_axi_In_ddr_AWBURST,
        AWLOCK => m_axi_In_ddr_AWLOCK,
        AWCACHE => m_axi_In_ddr_AWCACHE,
        AWPROT => m_axi_In_ddr_AWPROT,
        AWQOS => m_axi_In_ddr_AWQOS,
        AWREGION => m_axi_In_ddr_AWREGION,
        AWUSER => m_axi_In_ddr_AWUSER,
        WVALID => m_axi_In_ddr_WVALID,
        WREADY => m_axi_In_ddr_WREADY,
        WDATA => m_axi_In_ddr_WDATA,
        WSTRB => m_axi_In_ddr_WSTRB,
        WLAST => m_axi_In_ddr_WLAST,
        WID => m_axi_In_ddr_WID,
        WUSER => m_axi_In_ddr_WUSER,
        ARVALID => m_axi_In_ddr_ARVALID,
        ARREADY => m_axi_In_ddr_ARREADY,
        ARADDR => m_axi_In_ddr_ARADDR,
        ARID => m_axi_In_ddr_ARID,
        ARLEN => m_axi_In_ddr_ARLEN,
        ARSIZE => m_axi_In_ddr_ARSIZE,
        ARBURST => m_axi_In_ddr_ARBURST,
        ARLOCK => m_axi_In_ddr_ARLOCK,
        ARCACHE => m_axi_In_ddr_ARCACHE,
        ARPROT => m_axi_In_ddr_ARPROT,
        ARQOS => m_axi_In_ddr_ARQOS,
        ARREGION => m_axi_In_ddr_ARREGION,
        ARUSER => m_axi_In_ddr_ARUSER,
        RVALID => m_axi_In_ddr_RVALID,
        RREADY => m_axi_In_ddr_RREADY,
        RDATA => m_axi_In_ddr_RDATA,
        RLAST => m_axi_In_ddr_RLAST,
        RID => m_axi_In_ddr_RID,
        RUSER => m_axi_In_ddr_RUSER,
        RRESP => m_axi_In_ddr_RRESP,
        BVALID => m_axi_In_ddr_BVALID,
        BREADY => m_axi_In_ddr_BREADY,
        BRESP => m_axi_In_ddr_BRESP,
        BID => m_axi_In_ddr_BID,
        BUSER => m_axi_In_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => In_ddr_ARVALID,
        I_ARREADY => In_ddr_ARREADY,
        I_ARADDR => grp_process_r_fu_301_m_axi_In_ddr_ARADDR,
        I_ARID => grp_process_r_fu_301_m_axi_In_ddr_ARID,
        I_ARLEN => grp_process_r_fu_301_m_axi_In_ddr_ARLEN,
        I_ARSIZE => grp_process_r_fu_301_m_axi_In_ddr_ARSIZE,
        I_ARLOCK => grp_process_r_fu_301_m_axi_In_ddr_ARLOCK,
        I_ARCACHE => grp_process_r_fu_301_m_axi_In_ddr_ARCACHE,
        I_ARQOS => grp_process_r_fu_301_m_axi_In_ddr_ARQOS,
        I_ARPROT => grp_process_r_fu_301_m_axi_In_ddr_ARPROT,
        I_ARUSER => grp_process_r_fu_301_m_axi_In_ddr_ARUSER,
        I_ARBURST => grp_process_r_fu_301_m_axi_In_ddr_ARBURST,
        I_ARREGION => grp_process_r_fu_301_m_axi_In_ddr_ARREGION,
        I_RVALID => In_ddr_RVALID,
        I_RREADY => In_ddr_RREADY,
        I_RDATA => In_ddr_RDATA,
        I_RID => In_ddr_RID,
        I_RUSER => In_ddr_RUSER,
        I_RRESP => In_ddr_RRESP,
        I_RLAST => In_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => In_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => In_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => In_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => In_ddr_BRESP,
        I_BID => In_ddr_BID,
        I_BUSER => In_ddr_BUSER);

    W_ddr_m_axi_U : component conv_acc3t_W_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_W_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_W_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_W_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_W_ddr_AWVALID,
        AWREADY => m_axi_W_ddr_AWREADY,
        AWADDR => m_axi_W_ddr_AWADDR,
        AWID => m_axi_W_ddr_AWID,
        AWLEN => m_axi_W_ddr_AWLEN,
        AWSIZE => m_axi_W_ddr_AWSIZE,
        AWBURST => m_axi_W_ddr_AWBURST,
        AWLOCK => m_axi_W_ddr_AWLOCK,
        AWCACHE => m_axi_W_ddr_AWCACHE,
        AWPROT => m_axi_W_ddr_AWPROT,
        AWQOS => m_axi_W_ddr_AWQOS,
        AWREGION => m_axi_W_ddr_AWREGION,
        AWUSER => m_axi_W_ddr_AWUSER,
        WVALID => m_axi_W_ddr_WVALID,
        WREADY => m_axi_W_ddr_WREADY,
        WDATA => m_axi_W_ddr_WDATA,
        WSTRB => m_axi_W_ddr_WSTRB,
        WLAST => m_axi_W_ddr_WLAST,
        WID => m_axi_W_ddr_WID,
        WUSER => m_axi_W_ddr_WUSER,
        ARVALID => m_axi_W_ddr_ARVALID,
        ARREADY => m_axi_W_ddr_ARREADY,
        ARADDR => m_axi_W_ddr_ARADDR,
        ARID => m_axi_W_ddr_ARID,
        ARLEN => m_axi_W_ddr_ARLEN,
        ARSIZE => m_axi_W_ddr_ARSIZE,
        ARBURST => m_axi_W_ddr_ARBURST,
        ARLOCK => m_axi_W_ddr_ARLOCK,
        ARCACHE => m_axi_W_ddr_ARCACHE,
        ARPROT => m_axi_W_ddr_ARPROT,
        ARQOS => m_axi_W_ddr_ARQOS,
        ARREGION => m_axi_W_ddr_ARREGION,
        ARUSER => m_axi_W_ddr_ARUSER,
        RVALID => m_axi_W_ddr_RVALID,
        RREADY => m_axi_W_ddr_RREADY,
        RDATA => m_axi_W_ddr_RDATA,
        RLAST => m_axi_W_ddr_RLAST,
        RID => m_axi_W_ddr_RID,
        RUSER => m_axi_W_ddr_RUSER,
        RRESP => m_axi_W_ddr_RRESP,
        BVALID => m_axi_W_ddr_BVALID,
        BREADY => m_axi_W_ddr_BREADY,
        BRESP => m_axi_W_ddr_BRESP,
        BID => m_axi_W_ddr_BID,
        BUSER => m_axi_W_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W_ddr_ARVALID,
        I_ARREADY => W_ddr_ARREADY,
        I_ARADDR => grp_process_r_fu_301_m_axi_W_ddr_ARADDR,
        I_ARID => grp_process_r_fu_301_m_axi_W_ddr_ARID,
        I_ARLEN => grp_process_r_fu_301_m_axi_W_ddr_ARLEN,
        I_ARSIZE => grp_process_r_fu_301_m_axi_W_ddr_ARSIZE,
        I_ARLOCK => grp_process_r_fu_301_m_axi_W_ddr_ARLOCK,
        I_ARCACHE => grp_process_r_fu_301_m_axi_W_ddr_ARCACHE,
        I_ARQOS => grp_process_r_fu_301_m_axi_W_ddr_ARQOS,
        I_ARPROT => grp_process_r_fu_301_m_axi_W_ddr_ARPROT,
        I_ARUSER => grp_process_r_fu_301_m_axi_W_ddr_ARUSER,
        I_ARBURST => grp_process_r_fu_301_m_axi_W_ddr_ARBURST,
        I_ARREGION => grp_process_r_fu_301_m_axi_W_ddr_ARREGION,
        I_RVALID => W_ddr_RVALID,
        I_RREADY => W_ddr_RREADY,
        I_RDATA => W_ddr_RDATA,
        I_RID => W_ddr_RID,
        I_RUSER => W_ddr_RUSER,
        I_RRESP => W_ddr_RRESP,
        I_RLAST => W_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => W_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => W_ddr_BRESP,
        I_BID => W_ddr_BID,
        I_BUSER => W_ddr_BUSER);

    Out_ddr_m_axi_U : component conv_acc3t_Out_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Out_ddr_AWVALID,
        AWREADY => m_axi_Out_ddr_AWREADY,
        AWADDR => m_axi_Out_ddr_AWADDR,
        AWID => m_axi_Out_ddr_AWID,
        AWLEN => m_axi_Out_ddr_AWLEN,
        AWSIZE => m_axi_Out_ddr_AWSIZE,
        AWBURST => m_axi_Out_ddr_AWBURST,
        AWLOCK => m_axi_Out_ddr_AWLOCK,
        AWCACHE => m_axi_Out_ddr_AWCACHE,
        AWPROT => m_axi_Out_ddr_AWPROT,
        AWQOS => m_axi_Out_ddr_AWQOS,
        AWREGION => m_axi_Out_ddr_AWREGION,
        AWUSER => m_axi_Out_ddr_AWUSER,
        WVALID => m_axi_Out_ddr_WVALID,
        WREADY => m_axi_Out_ddr_WREADY,
        WDATA => m_axi_Out_ddr_WDATA,
        WSTRB => m_axi_Out_ddr_WSTRB,
        WLAST => m_axi_Out_ddr_WLAST,
        WID => m_axi_Out_ddr_WID,
        WUSER => m_axi_Out_ddr_WUSER,
        ARVALID => m_axi_Out_ddr_ARVALID,
        ARREADY => m_axi_Out_ddr_ARREADY,
        ARADDR => m_axi_Out_ddr_ARADDR,
        ARID => m_axi_Out_ddr_ARID,
        ARLEN => m_axi_Out_ddr_ARLEN,
        ARSIZE => m_axi_Out_ddr_ARSIZE,
        ARBURST => m_axi_Out_ddr_ARBURST,
        ARLOCK => m_axi_Out_ddr_ARLOCK,
        ARCACHE => m_axi_Out_ddr_ARCACHE,
        ARPROT => m_axi_Out_ddr_ARPROT,
        ARQOS => m_axi_Out_ddr_ARQOS,
        ARREGION => m_axi_Out_ddr_ARREGION,
        ARUSER => m_axi_Out_ddr_ARUSER,
        RVALID => m_axi_Out_ddr_RVALID,
        RREADY => m_axi_Out_ddr_RREADY,
        RDATA => m_axi_Out_ddr_RDATA,
        RLAST => m_axi_Out_ddr_RLAST,
        RID => m_axi_Out_ddr_RID,
        RUSER => m_axi_Out_ddr_RUSER,
        RRESP => m_axi_Out_ddr_RRESP,
        BVALID => m_axi_Out_ddr_BVALID,
        BREADY => m_axi_Out_ddr_BREADY,
        BRESP => m_axi_Out_ddr_BRESP,
        BID => m_axi_Out_ddr_BID,
        BUSER => m_axi_Out_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Out_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Out_ddr_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Out_ddr_RDATA,
        I_RID => Out_ddr_RID,
        I_RUSER => Out_ddr_RUSER,
        I_RRESP => Out_ddr_RRESP,
        I_RLAST => Out_ddr_RLAST,
        I_AWVALID => Out_ddr_AWVALID,
        I_AWREADY => Out_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_310,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => Out_ddr_WVALID,
        I_WREADY => Out_ddr_WREADY,
        I_WDATA => Out_ddr_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => Out_ddr_BVALID,
        I_BREADY => Out_ddr_BREADY,
        I_BRESP => Out_ddr_BRESP,
        I_BID => Out_ddr_BID,
        I_BUSER => Out_ddr_BUSER);

    out_0_U : component conv_acc3t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_address0,
        ce0 => out_0_ce0,
        q0 => out_0_q0);

    out_1_U : component conv_acc3t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_1_address0,
        ce0 => out_1_ce0,
        q0 => out_1_q0);

    out_2_U : component conv_acc3t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_2_address0,
        ce0 => out_2_ce0,
        q0 => out_2_q0);

    out_3_U : component conv_acc3t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_3_address0,
        ce0 => out_3_ce0,
        q0 => out_3_q0);

    w_0_0_0_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0_address0,
        ce0 => grp_process_r_fu_301_w_0_ce0,
        we0 => grp_process_r_fu_301_w_0_we0,
        d0 => grp_process_r_fu_301_w_0_d0);

    w_0_0_1_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_01_address0,
        ce0 => grp_process_r_fu_301_w_01_ce0,
        we0 => grp_process_r_fu_301_w_01_we0,
        d0 => grp_process_r_fu_301_w_01_d0);

    w_0_0_2_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_02_address0,
        ce0 => grp_process_r_fu_301_w_02_ce0,
        we0 => grp_process_r_fu_301_w_02_we0,
        d0 => grp_process_r_fu_301_w_02_d0);

    w_0_0_3_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_03_address0,
        ce0 => grp_process_r_fu_301_w_03_ce0,
        we0 => grp_process_r_fu_301_w_03_we0,
        d0 => grp_process_r_fu_301_w_03_d0);

    w_0_1_0_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_014_address0,
        ce0 => grp_process_r_fu_301_w_014_ce0,
        we0 => grp_process_r_fu_301_w_014_we0,
        d0 => grp_process_r_fu_301_w_014_d0);

    w_0_1_1_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_015_address0,
        ce0 => grp_process_r_fu_301_w_015_ce0,
        we0 => grp_process_r_fu_301_w_015_we0,
        d0 => grp_process_r_fu_301_w_015_d0);

    w_0_1_2_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_016_address0,
        ce0 => grp_process_r_fu_301_w_016_ce0,
        we0 => grp_process_r_fu_301_w_016_we0,
        d0 => grp_process_r_fu_301_w_016_d0);

    w_0_1_3_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_017_address0,
        ce0 => grp_process_r_fu_301_w_017_ce0,
        we0 => grp_process_r_fu_301_w_017_we0,
        d0 => grp_process_r_fu_301_w_017_d0);

    w_0_2_0_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_028_address0,
        ce0 => grp_process_r_fu_301_w_028_ce0,
        we0 => grp_process_r_fu_301_w_028_we0,
        d0 => grp_process_r_fu_301_w_028_d0);

    w_0_2_1_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_029_address0,
        ce0 => grp_process_r_fu_301_w_029_ce0,
        we0 => grp_process_r_fu_301_w_029_we0,
        d0 => grp_process_r_fu_301_w_029_d0);

    w_0_2_2_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0210_address0,
        ce0 => grp_process_r_fu_301_w_0210_ce0,
        we0 => grp_process_r_fu_301_w_0210_we0,
        d0 => grp_process_r_fu_301_w_0210_d0);

    w_0_2_3_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0211_address0,
        ce0 => grp_process_r_fu_301_w_0211_ce0,
        we0 => grp_process_r_fu_301_w_0211_we0,
        d0 => grp_process_r_fu_301_w_0211_d0);

    w_0_3_0_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0312_address0,
        ce0 => grp_process_r_fu_301_w_0312_ce0,
        we0 => grp_process_r_fu_301_w_0312_we0,
        d0 => grp_process_r_fu_301_w_0312_d0);

    w_0_3_1_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0313_address0,
        ce0 => grp_process_r_fu_301_w_0313_ce0,
        we0 => grp_process_r_fu_301_w_0313_we0,
        d0 => grp_process_r_fu_301_w_0313_d0);

    w_0_3_2_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0314_address0,
        ce0 => grp_process_r_fu_301_w_0314_ce0,
        we0 => grp_process_r_fu_301_w_0314_we0,
        d0 => grp_process_r_fu_301_w_0314_d0);

    w_0_3_3_U : component conv_acc3t_w_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_process_r_fu_301_w_0315_address0,
        ce0 => grp_process_r_fu_301_w_0315_ce0,
        we0 => grp_process_r_fu_301_w_0315_we0,
        d0 => grp_process_r_fu_301_w_0315_d0);

    grp_process_r_fu_301 : component conv_acc3t_process_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_process_r_fu_301_ap_start,
        ap_done => grp_process_r_fu_301_ap_done,
        ap_idle => grp_process_r_fu_301_ap_idle,
        ap_ready => grp_process_r_fu_301_ap_ready,
        m_axi_In_ddr_AWVALID => grp_process_r_fu_301_m_axi_In_ddr_AWVALID,
        m_axi_In_ddr_AWREADY => ap_const_logic_0,
        m_axi_In_ddr_AWADDR => grp_process_r_fu_301_m_axi_In_ddr_AWADDR,
        m_axi_In_ddr_AWID => grp_process_r_fu_301_m_axi_In_ddr_AWID,
        m_axi_In_ddr_AWLEN => grp_process_r_fu_301_m_axi_In_ddr_AWLEN,
        m_axi_In_ddr_AWSIZE => grp_process_r_fu_301_m_axi_In_ddr_AWSIZE,
        m_axi_In_ddr_AWBURST => grp_process_r_fu_301_m_axi_In_ddr_AWBURST,
        m_axi_In_ddr_AWLOCK => grp_process_r_fu_301_m_axi_In_ddr_AWLOCK,
        m_axi_In_ddr_AWCACHE => grp_process_r_fu_301_m_axi_In_ddr_AWCACHE,
        m_axi_In_ddr_AWPROT => grp_process_r_fu_301_m_axi_In_ddr_AWPROT,
        m_axi_In_ddr_AWQOS => grp_process_r_fu_301_m_axi_In_ddr_AWQOS,
        m_axi_In_ddr_AWREGION => grp_process_r_fu_301_m_axi_In_ddr_AWREGION,
        m_axi_In_ddr_AWUSER => grp_process_r_fu_301_m_axi_In_ddr_AWUSER,
        m_axi_In_ddr_WVALID => grp_process_r_fu_301_m_axi_In_ddr_WVALID,
        m_axi_In_ddr_WREADY => ap_const_logic_0,
        m_axi_In_ddr_WDATA => grp_process_r_fu_301_m_axi_In_ddr_WDATA,
        m_axi_In_ddr_WSTRB => grp_process_r_fu_301_m_axi_In_ddr_WSTRB,
        m_axi_In_ddr_WLAST => grp_process_r_fu_301_m_axi_In_ddr_WLAST,
        m_axi_In_ddr_WID => grp_process_r_fu_301_m_axi_In_ddr_WID,
        m_axi_In_ddr_WUSER => grp_process_r_fu_301_m_axi_In_ddr_WUSER,
        m_axi_In_ddr_ARVALID => grp_process_r_fu_301_m_axi_In_ddr_ARVALID,
        m_axi_In_ddr_ARREADY => In_ddr_ARREADY,
        m_axi_In_ddr_ARADDR => grp_process_r_fu_301_m_axi_In_ddr_ARADDR,
        m_axi_In_ddr_ARID => grp_process_r_fu_301_m_axi_In_ddr_ARID,
        m_axi_In_ddr_ARLEN => grp_process_r_fu_301_m_axi_In_ddr_ARLEN,
        m_axi_In_ddr_ARSIZE => grp_process_r_fu_301_m_axi_In_ddr_ARSIZE,
        m_axi_In_ddr_ARBURST => grp_process_r_fu_301_m_axi_In_ddr_ARBURST,
        m_axi_In_ddr_ARLOCK => grp_process_r_fu_301_m_axi_In_ddr_ARLOCK,
        m_axi_In_ddr_ARCACHE => grp_process_r_fu_301_m_axi_In_ddr_ARCACHE,
        m_axi_In_ddr_ARPROT => grp_process_r_fu_301_m_axi_In_ddr_ARPROT,
        m_axi_In_ddr_ARQOS => grp_process_r_fu_301_m_axi_In_ddr_ARQOS,
        m_axi_In_ddr_ARREGION => grp_process_r_fu_301_m_axi_In_ddr_ARREGION,
        m_axi_In_ddr_ARUSER => grp_process_r_fu_301_m_axi_In_ddr_ARUSER,
        m_axi_In_ddr_RVALID => In_ddr_RVALID,
        m_axi_In_ddr_RREADY => grp_process_r_fu_301_m_axi_In_ddr_RREADY,
        m_axi_In_ddr_RDATA => In_ddr_RDATA,
        m_axi_In_ddr_RLAST => In_ddr_RLAST,
        m_axi_In_ddr_RID => In_ddr_RID,
        m_axi_In_ddr_RUSER => In_ddr_RUSER,
        m_axi_In_ddr_RRESP => In_ddr_RRESP,
        m_axi_In_ddr_BVALID => ap_const_logic_0,
        m_axi_In_ddr_BREADY => grp_process_r_fu_301_m_axi_In_ddr_BREADY,
        m_axi_In_ddr_BRESP => ap_const_lv2_0,
        m_axi_In_ddr_BID => ap_const_lv1_0,
        m_axi_In_ddr_BUSER => ap_const_lv1_0,
        m_axi_W_ddr_AWVALID => grp_process_r_fu_301_m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY => ap_const_logic_0,
        m_axi_W_ddr_AWADDR => grp_process_r_fu_301_m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID => grp_process_r_fu_301_m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN => grp_process_r_fu_301_m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE => grp_process_r_fu_301_m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST => grp_process_r_fu_301_m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK => grp_process_r_fu_301_m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE => grp_process_r_fu_301_m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT => grp_process_r_fu_301_m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS => grp_process_r_fu_301_m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION => grp_process_r_fu_301_m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER => grp_process_r_fu_301_m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID => grp_process_r_fu_301_m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY => ap_const_logic_0,
        m_axi_W_ddr_WDATA => grp_process_r_fu_301_m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB => grp_process_r_fu_301_m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST => grp_process_r_fu_301_m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID => grp_process_r_fu_301_m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER => grp_process_r_fu_301_m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID => grp_process_r_fu_301_m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY => W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR => grp_process_r_fu_301_m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID => grp_process_r_fu_301_m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN => grp_process_r_fu_301_m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE => grp_process_r_fu_301_m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST => grp_process_r_fu_301_m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK => grp_process_r_fu_301_m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE => grp_process_r_fu_301_m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT => grp_process_r_fu_301_m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS => grp_process_r_fu_301_m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION => grp_process_r_fu_301_m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER => grp_process_r_fu_301_m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID => W_ddr_RVALID,
        m_axi_W_ddr_RREADY => grp_process_r_fu_301_m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA => W_ddr_RDATA,
        m_axi_W_ddr_RLAST => W_ddr_RLAST,
        m_axi_W_ddr_RID => W_ddr_RID,
        m_axi_W_ddr_RUSER => W_ddr_RUSER,
        m_axi_W_ddr_RRESP => W_ddr_RRESP,
        m_axi_W_ddr_BVALID => ap_const_logic_0,
        m_axi_W_ddr_BREADY => grp_process_r_fu_301_m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP => ap_const_lv2_0,
        m_axi_W_ddr_BID => ap_const_lv1_0,
        m_axi_W_ddr_BUSER => ap_const_lv1_0,
        w_0_address0 => grp_process_r_fu_301_w_0_address0,
        w_0_ce0 => grp_process_r_fu_301_w_0_ce0,
        w_0_we0 => grp_process_r_fu_301_w_0_we0,
        w_0_d0 => grp_process_r_fu_301_w_0_d0,
        w_01_address0 => grp_process_r_fu_301_w_01_address0,
        w_01_ce0 => grp_process_r_fu_301_w_01_ce0,
        w_01_we0 => grp_process_r_fu_301_w_01_we0,
        w_01_d0 => grp_process_r_fu_301_w_01_d0,
        w_02_address0 => grp_process_r_fu_301_w_02_address0,
        w_02_ce0 => grp_process_r_fu_301_w_02_ce0,
        w_02_we0 => grp_process_r_fu_301_w_02_we0,
        w_02_d0 => grp_process_r_fu_301_w_02_d0,
        w_03_address0 => grp_process_r_fu_301_w_03_address0,
        w_03_ce0 => grp_process_r_fu_301_w_03_ce0,
        w_03_we0 => grp_process_r_fu_301_w_03_we0,
        w_03_d0 => grp_process_r_fu_301_w_03_d0,
        w_014_address0 => grp_process_r_fu_301_w_014_address0,
        w_014_ce0 => grp_process_r_fu_301_w_014_ce0,
        w_014_we0 => grp_process_r_fu_301_w_014_we0,
        w_014_d0 => grp_process_r_fu_301_w_014_d0,
        w_015_address0 => grp_process_r_fu_301_w_015_address0,
        w_015_ce0 => grp_process_r_fu_301_w_015_ce0,
        w_015_we0 => grp_process_r_fu_301_w_015_we0,
        w_015_d0 => grp_process_r_fu_301_w_015_d0,
        w_016_address0 => grp_process_r_fu_301_w_016_address0,
        w_016_ce0 => grp_process_r_fu_301_w_016_ce0,
        w_016_we0 => grp_process_r_fu_301_w_016_we0,
        w_016_d0 => grp_process_r_fu_301_w_016_d0,
        w_017_address0 => grp_process_r_fu_301_w_017_address0,
        w_017_ce0 => grp_process_r_fu_301_w_017_ce0,
        w_017_we0 => grp_process_r_fu_301_w_017_we0,
        w_017_d0 => grp_process_r_fu_301_w_017_d0,
        w_028_address0 => grp_process_r_fu_301_w_028_address0,
        w_028_ce0 => grp_process_r_fu_301_w_028_ce0,
        w_028_we0 => grp_process_r_fu_301_w_028_we0,
        w_028_d0 => grp_process_r_fu_301_w_028_d0,
        w_029_address0 => grp_process_r_fu_301_w_029_address0,
        w_029_ce0 => grp_process_r_fu_301_w_029_ce0,
        w_029_we0 => grp_process_r_fu_301_w_029_we0,
        w_029_d0 => grp_process_r_fu_301_w_029_d0,
        w_0210_address0 => grp_process_r_fu_301_w_0210_address0,
        w_0210_ce0 => grp_process_r_fu_301_w_0210_ce0,
        w_0210_we0 => grp_process_r_fu_301_w_0210_we0,
        w_0210_d0 => grp_process_r_fu_301_w_0210_d0,
        w_0211_address0 => grp_process_r_fu_301_w_0211_address0,
        w_0211_ce0 => grp_process_r_fu_301_w_0211_ce0,
        w_0211_we0 => grp_process_r_fu_301_w_0211_we0,
        w_0211_d0 => grp_process_r_fu_301_w_0211_d0,
        w_0312_address0 => grp_process_r_fu_301_w_0312_address0,
        w_0312_ce0 => grp_process_r_fu_301_w_0312_ce0,
        w_0312_we0 => grp_process_r_fu_301_w_0312_we0,
        w_0312_d0 => grp_process_r_fu_301_w_0312_d0,
        w_0313_address0 => grp_process_r_fu_301_w_0313_address0,
        w_0313_ce0 => grp_process_r_fu_301_w_0313_ce0,
        w_0313_we0 => grp_process_r_fu_301_w_0313_we0,
        w_0313_d0 => grp_process_r_fu_301_w_0313_d0,
        w_0314_address0 => grp_process_r_fu_301_w_0314_address0,
        w_0314_ce0 => grp_process_r_fu_301_w_0314_ce0,
        w_0314_we0 => grp_process_r_fu_301_w_0314_we0,
        w_0314_d0 => grp_process_r_fu_301_w_0314_d0,
        w_0315_address0 => grp_process_r_fu_301_w_0315_address0,
        w_0315_ce0 => grp_process_r_fu_301_w_0315_ce0,
        w_0315_we0 => grp_process_r_fu_301_w_0315_we0,
        w_0315_d0 => grp_process_r_fu_301_w_0315_d0);

    mux_42_32_1_1_U19 : component conv_acc3t_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => out_0_q0,
        din1 => out_1_q0,
        din2 => out_2_q0,
        din3 => out_3_q0,
        din4 => trunc_ln81_reg_629,
        dout => tmp_fu_573_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_process_r_fu_301_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_process_r_fu_301_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = Out_ddr_AWREADY) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_process_r_fu_301_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_process_r_fu_301_ap_ready = ap_const_logic_1)) then 
                    grp_process_r_fu_301_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    L_cho_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                L_cho_reg_290 <= add_ln79_fu_553_p2;
            elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                L_cho_reg_290 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_co_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                L_co_reg_279 <= select_ln77_2_fu_541_p3;
            elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                L_co_reg_279 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    L_ro_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln75_reg_595 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                L_ro_reg_257 <= select_ln75_1_reg_599;
            elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                L_ro_reg_257 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten33_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten33_reg_246 <= add_ln75_1_fu_341_p2;
            elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten33_reg_246 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_268 <= select_ln77_3_fu_565_p3;
            elsif (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_268 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln75_reg_595 <= icmp_ln75_fu_383_p2;
                icmp_ln75_reg_595_pp0_iter1_reg <= icmp_ln75_reg_595;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln75_1_reg_599 <= select_ln75_1_fu_435_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln75_reg_595 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_644 <= tmp_fu_573_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_383_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln81_reg_629 <= trunc_ln81_fu_549_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state10, Out_ddr_AWREADY, Out_ddr_BVALID, ap_enable_reg_pp0_iter0, icmp_ln75_fu_383_p2, ap_CS_fsm_state2, grp_process_r_fu_301_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = Out_ddr_AWREADY) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_process_r_fu_301_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln75_fu_383_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln75_fu_383_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    In_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_process_r_fu_301_m_axi_In_ddr_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            In_ddr_ARVALID <= grp_process_r_fu_301_m_axi_In_ddr_ARVALID;
        else 
            In_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    In_ddr_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_process_r_fu_301_m_axi_In_ddr_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            In_ddr_RREADY <= grp_process_r_fu_301_m_axi_In_ddr_RREADY;
        else 
            In_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, Out_ddr_AWREADY)
    begin
        if ((not(((ap_const_logic_0 = Out_ddr_AWREADY) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Out_ddr_AWVALID <= ap_const_logic_1;
        else 
            Out_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_BREADY_assign_proc : process(ap_CS_fsm_state10, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            Out_ddr_BREADY <= ap_const_logic_1;
        else 
            Out_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    Out_ddr_WDATA <= tmp_reg_644;

    Out_ddr_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln75_reg_595_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln75_reg_595_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_ddr_WVALID <= ap_const_logic_1;
        else 
            Out_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_Out_ddr_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            Out_ddr_blk_n_AW <= m_axi_Out_ddr_AWREADY;
        else 
            Out_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_B_assign_proc : process(m_axi_Out_ddr_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Out_ddr_blk_n_B <= m_axi_Out_ddr_BVALID;
        else 
            Out_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_W_assign_proc : process(m_axi_Out_ddr_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln75_reg_595_pp0_iter1_reg)
    begin
        if (((icmp_ln75_reg_595_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_ddr_blk_n_W <= m_axi_Out_ddr_WREADY;
        else 
            Out_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    W_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_process_r_fu_301_m_axi_W_ddr_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_ddr_ARVALID <= grp_process_r_fu_301_m_axi_W_ddr_ARVALID;
        else 
            W_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_ddr_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_process_r_fu_301_m_axi_W_ddr_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_ddr_RREADY <= grp_process_r_fu_301_m_axi_W_ddr_RREADY;
        else 
            W_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln75_1_fu_341_p2 <= std_logic_vector(unsigned(indvar_flatten33_reg_246) + unsigned(ap_const_lv10_1));
    add_ln75_fu_389_p2 <= std_logic_vector(unsigned(ap_phi_mux_L_ro_phi_fu_261_p4) + unsigned(ap_const_lv4_1));
    add_ln77_1_fu_559_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_268) + unsigned(ap_const_lv7_1));
    add_ln77_fu_495_p2 <= std_logic_vector(unsigned(select_ln75_fu_401_p3) + unsigned(ap_const_lv4_1));
    add_ln79_fu_553_p2 <= std_logic_vector(unsigned(select_ln77_fu_507_p3) + unsigned(ap_const_lv3_1));
    add_ln81_1_fu_519_p2 <= std_logic_vector(unsigned(sub_ln81_2_fu_463_p2) + unsigned(zext_ln81_4_fu_515_p1));
    add_ln81_fu_377_p2 <= std_logic_vector(unsigned(sub_ln81_fu_367_p2) + unsigned(zext_ln81_1_fu_373_p1));
    and_ln75_fu_489_p2 <= (xor_ln75_fu_477_p2 and icmp_ln79_fu_483_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln75_reg_595_pp0_iter1_reg, Out_ddr_WREADY)
    begin
                ap_block_state5_io <= ((ap_const_logic_0 = Out_ddr_WREADY) and (icmp_ln75_reg_595_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln75_fu_383_p2)
    begin
        if ((icmp_ln75_fu_383_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_L_ro_phi_fu_261_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln75_reg_595, L_ro_reg_257, ap_CS_fsm_pp0_stage0, select_ln75_1_reg_599, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln75_reg_595 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_L_ro_phi_fu_261_p4 <= select_ln75_1_reg_599;
        else 
            ap_phi_mux_L_ro_phi_fu_261_p4 <= L_ro_reg_257;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_process_r_fu_301_ap_start <= grp_process_r_fu_301_ap_start_reg;
    icmp_ln75_fu_383_p2 <= "1" when (indvar_flatten33_reg_246 = ap_const_lv10_310) else "0";
    icmp_ln77_fu_395_p2 <= "1" when (indvar_flatten_reg_268 = ap_const_lv7_38) else "0";
    icmp_ln79_fu_483_p2 <= "1" when (L_cho_reg_290 = ap_const_lv3_4) else "0";
    or_ln77_fu_501_p2 <= (icmp_ln77_fu_395_p2 or and_ln75_fu_489_p2);
    out_0_address0 <= zext_ln81_5_fu_533_p1(8 - 1 downto 0);

    out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_1_address0 <= zext_ln81_5_fu_533_p1(8 - 1 downto 0);

    out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_1_ce0 <= ap_const_logic_1;
        else 
            out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_2_address0 <= zext_ln81_5_fu_533_p1(8 - 1 downto 0);

    out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_2_ce0 <= ap_const_logic_1;
        else 
            out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_3_address0 <= zext_ln81_5_fu_533_p1(8 - 1 downto 0);

    out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_3_ce0 <= ap_const_logic_1;
        else 
            out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_443_p3 <= (select_ln75_1_fu_435_p3 & ap_const_lv4_0);
    select_ln75_1_fu_435_p3 <= 
        add_ln75_fu_389_p2 when (icmp_ln77_fu_395_p2(0) = '1') else 
        ap_phi_mux_L_ro_phi_fu_261_p4;
    select_ln75_2_fu_469_p3 <= 
        sub_ln81_1_fu_429_p2 when (icmp_ln77_fu_395_p2(0) = '1') else 
        add_ln81_fu_377_p2;
    select_ln75_fu_401_p3 <= 
        ap_const_lv4_0 when (icmp_ln77_fu_395_p2(0) = '1') else 
        L_co_reg_279;
    select_ln77_1_fu_525_p3 <= 
        add_ln81_1_fu_519_p2 when (and_ln75_fu_489_p2(0) = '1') else 
        select_ln75_2_fu_469_p3;
    select_ln77_2_fu_541_p3 <= 
        add_ln77_fu_495_p2 when (and_ln75_fu_489_p2(0) = '1') else 
        select_ln75_fu_401_p3;
    select_ln77_3_fu_565_p3 <= 
        ap_const_lv7_1 when (icmp_ln77_fu_395_p2(0) = '1') else 
        add_ln77_1_fu_559_p2;
    select_ln77_fu_507_p3 <= 
        ap_const_lv3_0 when (or_ln77_fu_501_p2(0) = '1') else 
        L_cho_reg_290;
    sub_ln81_1_fu_429_p2 <= std_logic_vector(unsigned(tmp_3_fu_409_p3) - unsigned(zext_ln81_2_fu_425_p1));
    sub_ln81_2_fu_463_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_443_p3) - unsigned(zext_ln81_3_fu_459_p1));
    sub_ln81_fu_367_p2 <= std_logic_vector(unsigned(tmp_1_fu_347_p3) - unsigned(zext_ln81_fu_363_p1));
    tmp_1_fu_347_p3 <= (ap_phi_mux_L_ro_phi_fu_261_p4 & ap_const_lv4_0);
    tmp_2_fu_355_p3 <= (ap_phi_mux_L_ro_phi_fu_261_p4 & ap_const_lv1_0);
    tmp_3_fu_409_p3 <= (add_ln75_fu_389_p2 & ap_const_lv4_0);
    tmp_4_fu_417_p3 <= (add_ln75_fu_389_p2 & ap_const_lv1_0);
    tmp_5_fu_451_p3 <= (select_ln75_1_fu_435_p3 & ap_const_lv1_0);
    trunc_ln81_fu_549_p1 <= select_ln77_fu_507_p3(2 - 1 downto 0);
    xor_ln75_fu_477_p2 <= (icmp_ln77_fu_395_p2 xor ap_const_lv1_1);
    zext_ln81_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(L_co_reg_279),8));
    zext_ln81_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_417_p3),8));
    zext_ln81_3_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_451_p3),8));
    zext_ln81_4_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_495_p2),8));
    zext_ln81_5_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_1_fu_525_p3),64));
    zext_ln81_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_355_p3),8));
end behav;
