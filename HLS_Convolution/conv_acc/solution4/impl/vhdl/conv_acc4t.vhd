-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_acc4t is
generic (
    C_M_AXI_IN_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IN_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUT_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IN_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_W_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_In_ddr_AWREADY : IN STD_LOGIC;
    m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_WVALID : OUT STD_LOGIC;
    m_axi_In_ddr_WREADY : IN STD_LOGIC;
    m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_In_ddr_WLAST : OUT STD_LOGIC;
    m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_In_ddr_ARREADY : IN STD_LOGIC;
    m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RVALID : IN STD_LOGIC;
    m_axi_In_ddr_RREADY : OUT STD_LOGIC;
    m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_RLAST : IN STD_LOGIC;
    m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BVALID : IN STD_LOGIC;
    m_axi_In_ddr_BREADY : OUT STD_LOGIC;
    m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_W_ddr_AWREADY : IN STD_LOGIC;
    m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_WVALID : OUT STD_LOGIC;
    m_axi_W_ddr_WREADY : IN STD_LOGIC;
    m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_W_ddr_WLAST : OUT STD_LOGIC;
    m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_W_ddr_ARREADY : IN STD_LOGIC;
    m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RVALID : IN STD_LOGIC;
    m_axi_W_ddr_RREADY : OUT STD_LOGIC;
    m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_RLAST : IN STD_LOGIC;
    m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BVALID : IN STD_LOGIC;
    m_axi_W_ddr_BREADY : OUT STD_LOGIC;
    m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
    m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_WREADY : IN STD_LOGIC;
    m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
    m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
    m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RVALID : IN STD_LOGIC;
    m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_RLAST : IN STD_LOGIC;
    m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BVALID : IN STD_LOGIC;
    m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of conv_acc4t is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_acc4t_conv_acc4t,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.301600,HLS_SYN_LAT=2567,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=213085,HLS_SYN_LUT=102678,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_0_ce0 : STD_LOGIC;
    signal in_0_we0 : STD_LOGIC;
    signal in_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_0_ce1 : STD_LOGIC;
    signal in_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_1_ce0 : STD_LOGIC;
    signal in_1_we0 : STD_LOGIC;
    signal in_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_1_ce1 : STD_LOGIC;
    signal in_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_2_ce0 : STD_LOGIC;
    signal in_2_we0 : STD_LOGIC;
    signal in_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_2_ce1 : STD_LOGIC;
    signal in_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_3_ce0 : STD_LOGIC;
    signal in_3_we0 : STD_LOGIC;
    signal in_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_3_ce1 : STD_LOGIC;
    signal in_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal In_ddr_blk_n_AR : STD_LOGIC;
    signal In_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln24_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal W_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln38_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal Out_ddr_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln55_reg_1531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_1531_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal In_ddr_AWREADY : STD_LOGIC;
    signal In_ddr_WREADY : STD_LOGIC;
    signal In_ddr_ARVALID : STD_LOGIC;
    signal In_ddr_ARREADY : STD_LOGIC;
    signal In_ddr_RVALID : STD_LOGIC;
    signal In_ddr_RREADY : STD_LOGIC;
    signal In_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal In_ddr_RLAST : STD_LOGIC;
    signal In_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal In_ddr_BVALID : STD_LOGIC;
    signal In_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal In_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal In_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_AWREADY : STD_LOGIC;
    signal W_ddr_WREADY : STD_LOGIC;
    signal W_ddr_ARVALID : STD_LOGIC;
    signal W_ddr_ARREADY : STD_LOGIC;
    signal W_ddr_RVALID : STD_LOGIC;
    signal W_ddr_RREADY : STD_LOGIC;
    signal W_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal W_ddr_RLAST : STD_LOGIC;
    signal W_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BVALID : STD_LOGIC;
    signal W_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_AWVALID : STD_LOGIC;
    signal Out_ddr_AWREADY : STD_LOGIC;
    signal Out_ddr_WVALID : STD_LOGIC;
    signal Out_ddr_WREADY : STD_LOGIC;
    signal Out_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_ARREADY : STD_LOGIC;
    signal Out_ddr_RVALID : STD_LOGIC;
    signal Out_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_RLAST : STD_LOGIC;
    signal Out_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BVALID : STD_LOGIC;
    signal Out_ddr_BREADY : STD_LOGIC;
    signal Out_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten17_reg_588 : STD_LOGIC_VECTOR (10 downto 0);
    signal L_ri_reg_599 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal L_ci_reg_621 : STD_LOGIC_VECTOR (4 downto 0);
    signal L_chi_1_reg_632 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten59_reg_643 : STD_LOGIC_VECTOR (8 downto 0);
    signal L_cho_reg_654 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal L_chi_reg_676 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten25_reg_687 : STD_LOGIC_VECTOR (5 downto 0);
    signal L_kr_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten101_reg_709 : STD_LOGIC_VECTOR (9 downto 0);
    signal L_ro_reg_720 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten71_reg_731 : STD_LOGIC_VECTOR (6 downto 0);
    signal L_co_reg_742 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_cho_1_reg_753 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln24_1_fu_796_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_828_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_1_reg_1416 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln30_fu_836_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln30_reg_1421 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_1_fu_878_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln26_1_reg_1426 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln30_1_fu_886_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln30_1_reg_1432 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln30_1_reg_1432_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_2_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_reg_1446 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln30_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_fu_937_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln38_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_1_fu_969_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln38_1_reg_1468 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln38_fu_977_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln38_reg_1473 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln38_reg_1473_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_fu_1033_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_reg_1477 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_reg_1477_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_1_fu_1059_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_fu_1079_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_reg_1486 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_reg_1486_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln44_fu_1087_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_1_fu_1105_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_2_fu_1119_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln46_fu_1127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_1_fu_1158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln55_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_1_fu_1252_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_1_reg_1535 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln57_2_fu_1358_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln61_fu_1366_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln61_reg_1565 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln59_fu_1370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln57_3_fu_1382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1390_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_convolution_fu_764_ap_ready : STD_LOGIC;
    signal grp_convolution_fu_764_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_0_ce0 : STD_LOGIC;
    signal out_0_we0 : STD_LOGIC;
    signal out_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_0_ce1 : STD_LOGIC;
    signal out_0_we1 : STD_LOGIC;
    signal out_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1_ce0 : STD_LOGIC;
    signal out_1_we0 : STD_LOGIC;
    signal out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_ce1 : STD_LOGIC;
    signal out_1_we1 : STD_LOGIC;
    signal out_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_2_ce0 : STD_LOGIC;
    signal out_2_we0 : STD_LOGIC;
    signal out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_2_ce1 : STD_LOGIC;
    signal out_2_we1 : STD_LOGIC;
    signal out_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_3_ce0 : STD_LOGIC;
    signal out_3_we0 : STD_LOGIC;
    signal out_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_3_ce1 : STD_LOGIC;
    signal out_3_we1 : STD_LOGIC;
    signal out_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_0_ce0 : STD_LOGIC;
    signal w_0_0_we0 : STD_LOGIC;
    signal w_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_0_ce1 : STD_LOGIC;
    signal w_0_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_1_ce0 : STD_LOGIC;
    signal w_0_1_we0 : STD_LOGIC;
    signal w_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_1_ce1 : STD_LOGIC;
    signal w_0_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_2_ce0 : STD_LOGIC;
    signal w_0_2_we0 : STD_LOGIC;
    signal w_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_2_ce1 : STD_LOGIC;
    signal w_0_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_3_ce0 : STD_LOGIC;
    signal w_0_3_we0 : STD_LOGIC;
    signal w_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_3_ce1 : STD_LOGIC;
    signal w_0_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_1_0_ce0 : STD_LOGIC;
    signal w_1_0_we0 : STD_LOGIC;
    signal w_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_0_ce1 : STD_LOGIC;
    signal w_1_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_1_1_ce0 : STD_LOGIC;
    signal w_1_1_we0 : STD_LOGIC;
    signal w_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_1_ce1 : STD_LOGIC;
    signal w_1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_1_2_ce0 : STD_LOGIC;
    signal w_1_2_we0 : STD_LOGIC;
    signal w_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_2_ce1 : STD_LOGIC;
    signal w_1_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_1_3_ce0 : STD_LOGIC;
    signal w_1_3_we0 : STD_LOGIC;
    signal w_1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_3_ce1 : STD_LOGIC;
    signal w_1_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_2_0_ce0 : STD_LOGIC;
    signal w_2_0_we0 : STD_LOGIC;
    signal w_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_0_ce1 : STD_LOGIC;
    signal w_2_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_2_1_ce0 : STD_LOGIC;
    signal w_2_1_we0 : STD_LOGIC;
    signal w_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_1_ce1 : STD_LOGIC;
    signal w_2_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_2_2_ce0 : STD_LOGIC;
    signal w_2_2_we0 : STD_LOGIC;
    signal w_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_2_ce1 : STD_LOGIC;
    signal w_2_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_2_3_ce0 : STD_LOGIC;
    signal w_2_3_we0 : STD_LOGIC;
    signal w_2_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_3_ce1 : STD_LOGIC;
    signal w_2_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_0_ce0 : STD_LOGIC;
    signal w_3_0_we0 : STD_LOGIC;
    signal w_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_0_ce1 : STD_LOGIC;
    signal w_3_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_1_ce0 : STD_LOGIC;
    signal w_3_1_we0 : STD_LOGIC;
    signal w_3_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_1_ce1 : STD_LOGIC;
    signal w_3_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_2_ce0 : STD_LOGIC;
    signal w_3_2_we0 : STD_LOGIC;
    signal w_3_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_2_ce1 : STD_LOGIC;
    signal w_3_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_3_ce0 : STD_LOGIC;
    signal w_3_3_we0 : STD_LOGIC;
    signal w_3_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_3_ce1 : STD_LOGIC;
    signal w_3_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_ap_start : STD_LOGIC;
    signal grp_convolution_fu_764_ap_idle : STD_LOGIC;
    signal grp_convolution_fu_764_w_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w1_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w1_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w2_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w2_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w3_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w3_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w14_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w14_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w14_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w15_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w15_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w15_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w16_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w16_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w16_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w17_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w17_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w17_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w17_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w28_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w28_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w28_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w28_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w29_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w29_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w29_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w29_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w210_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w210_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w210_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w210_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w211_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w211_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w211_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w211_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w312_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w312_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w312_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w312_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w313_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w313_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w313_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w313_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w314_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w314_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w314_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w314_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_w315_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w315_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_w315_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_w315_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_out_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out_r_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_out_r_we0 : STD_LOGIC;
    signal grp_convolution_fu_764_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out_r_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out_r_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_out_r_we1 : STD_LOGIC;
    signal grp_convolution_fu_764_out_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out4_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_out4_we0 : STD_LOGIC;
    signal grp_convolution_fu_764_out4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out4_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_out4_we1 : STD_LOGIC;
    signal grp_convolution_fu_764_out4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out5_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_out5_we0 : STD_LOGIC;
    signal grp_convolution_fu_764_out5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out5_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_out5_we1 : STD_LOGIC;
    signal grp_convolution_fu_764_out5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out6_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_out6_we0 : STD_LOGIC;
    signal grp_convolution_fu_764_out6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_out6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_out6_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_out6_we1 : STD_LOGIC;
    signal grp_convolution_fu_764_out6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_fu_764_in_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_0_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_in_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_0_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_in_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_1_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_in_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_1_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_in_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_2_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_in_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_2_ce1 : STD_LOGIC;
    signal grp_convolution_fu_764_in_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_3_ce0 : STD_LOGIC;
    signal grp_convolution_fu_764_in_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution_fu_764_in_3_ce1 : STD_LOGIC;
    signal ap_phi_mux_L_ri_phi_fu_603_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_L_ci_phi_fu_625_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_L_cho_phi_fu_658_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_L_ro_phi_fu_724_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_fu_764_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln30_1_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_5_fu_1350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal icmp_ln26_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln28_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_820_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln24_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_858_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln26_fu_870_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_1_fu_896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_cast_fu_910_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_fu_917_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_949_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln46_fu_981_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln44_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln38_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_961_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln40_fu_1023_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln38_1_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_1_fu_1029_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln38_2_fu_985_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln40_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_2_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_1_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_1093_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_1_fu_1113_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1131_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_1172_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_1164_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln61_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_1_fu_1190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln57_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_1206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_1234_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_fu_1226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_2_fu_1242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1268_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_1260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_3_fu_1276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln61_1_fu_1246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_fu_1194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln59_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_1218_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln55_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln57_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_1312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln61_2_fu_1280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_4_fu_1332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_1_fu_1336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_2_fu_1286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_1_fu_1342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_fu_1324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln57_1_fu_1376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_acc4t_convolution IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w1_ce0 : OUT STD_LOGIC;
        w1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w1_ce1 : OUT STD_LOGIC;
        w1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w2_ce0 : OUT STD_LOGIC;
        w2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w2_ce1 : OUT STD_LOGIC;
        w2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w3_ce0 : OUT STD_LOGIC;
        w3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w3_ce1 : OUT STD_LOGIC;
        w3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w14_ce0 : OUT STD_LOGIC;
        w14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w14_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w14_ce1 : OUT STD_LOGIC;
        w14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w15_ce0 : OUT STD_LOGIC;
        w15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w15_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w15_ce1 : OUT STD_LOGIC;
        w15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w16_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w16_ce0 : OUT STD_LOGIC;
        w16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w16_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w16_ce1 : OUT STD_LOGIC;
        w16_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w17_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w17_ce0 : OUT STD_LOGIC;
        w17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w17_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w17_ce1 : OUT STD_LOGIC;
        w17_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w28_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w28_ce0 : OUT STD_LOGIC;
        w28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w28_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w28_ce1 : OUT STD_LOGIC;
        w28_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w29_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w29_ce0 : OUT STD_LOGIC;
        w29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w29_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w29_ce1 : OUT STD_LOGIC;
        w29_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w210_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w210_ce0 : OUT STD_LOGIC;
        w210_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w210_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w210_ce1 : OUT STD_LOGIC;
        w210_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w211_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w211_ce0 : OUT STD_LOGIC;
        w211_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w211_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w211_ce1 : OUT STD_LOGIC;
        w211_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w312_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w312_ce0 : OUT STD_LOGIC;
        w312_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w312_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w312_ce1 : OUT STD_LOGIC;
        w312_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w313_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w313_ce0 : OUT STD_LOGIC;
        w313_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w313_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w313_ce1 : OUT STD_LOGIC;
        w313_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w314_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w314_ce0 : OUT STD_LOGIC;
        w314_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w314_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w314_ce1 : OUT STD_LOGIC;
        w314_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w315_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w315_ce0 : OUT STD_LOGIC;
        w315_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w315_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w315_ce1 : OUT STD_LOGIC;
        w315_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out4_ce0 : OUT STD_LOGIC;
        out4_we0 : OUT STD_LOGIC;
        out4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out4_ce1 : OUT STD_LOGIC;
        out4_we1 : OUT STD_LOGIC;
        out4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out5_ce0 : OUT STD_LOGIC;
        out5_we0 : OUT STD_LOGIC;
        out5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out5_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out5_ce1 : OUT STD_LOGIC;
        out5_we1 : OUT STD_LOGIC;
        out5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out6_ce0 : OUT STD_LOGIC;
        out6_we0 : OUT STD_LOGIC;
        out6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out6_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out6_ce1 : OUT STD_LOGIC;
        out6_we1 : OUT STD_LOGIC;
        out6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_0_ce0 : OUT STD_LOGIC;
        in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_0_ce1 : OUT STD_LOGIC;
        in_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_1_ce0 : OUT STD_LOGIC;
        in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_1_ce1 : OUT STD_LOGIC;
        in_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_2_ce0 : OUT STD_LOGIC;
        in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_2_ce1 : OUT STD_LOGIC;
        in_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_3_ce0 : OUT STD_LOGIC;
        in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_3_ce1 : OUT STD_LOGIC;
        in_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc4t_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc4t_in_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc4t_out_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc4t_w_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_acc4t_In_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_acc4t_W_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_acc4t_Out_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    in_0_U : component conv_acc4t_in_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_0_address0,
        ce0 => in_0_ce0,
        we0 => in_0_we0,
        d0 => bitcast_ln30_reg_1451,
        q0 => in_0_q0,
        address1 => grp_convolution_fu_764_in_0_address1,
        ce1 => in_0_ce1,
        q1 => in_0_q1);

    in_1_U : component conv_acc4t_in_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_1_address0,
        ce0 => in_1_ce0,
        we0 => in_1_we0,
        d0 => bitcast_ln30_reg_1451,
        q0 => in_1_q0,
        address1 => grp_convolution_fu_764_in_1_address1,
        ce1 => in_1_ce1,
        q1 => in_1_q1);

    in_2_U : component conv_acc4t_in_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_2_address0,
        ce0 => in_2_ce0,
        we0 => in_2_we0,
        d0 => bitcast_ln30_reg_1451,
        q0 => in_2_q0,
        address1 => grp_convolution_fu_764_in_2_address1,
        ce1 => in_2_ce1,
        q1 => in_2_q1);

    in_3_U : component conv_acc4t_in_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_3_address0,
        ce0 => in_3_ce0,
        we0 => in_3_we0,
        d0 => bitcast_ln30_reg_1451,
        q0 => in_3_q0,
        address1 => grp_convolution_fu_764_in_3_address1,
        ce1 => in_3_ce1,
        q1 => in_3_q1);

    In_ddr_m_axi_U : component conv_acc4t_In_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IN_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IN_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_In_ddr_AWVALID,
        AWREADY => m_axi_In_ddr_AWREADY,
        AWADDR => m_axi_In_ddr_AWADDR,
        AWID => m_axi_In_ddr_AWID,
        AWLEN => m_axi_In_ddr_AWLEN,
        AWSIZE => m_axi_In_ddr_AWSIZE,
        AWBURST => m_axi_In_ddr_AWBURST,
        AWLOCK => m_axi_In_ddr_AWLOCK,
        AWCACHE => m_axi_In_ddr_AWCACHE,
        AWPROT => m_axi_In_ddr_AWPROT,
        AWQOS => m_axi_In_ddr_AWQOS,
        AWREGION => m_axi_In_ddr_AWREGION,
        AWUSER => m_axi_In_ddr_AWUSER,
        WVALID => m_axi_In_ddr_WVALID,
        WREADY => m_axi_In_ddr_WREADY,
        WDATA => m_axi_In_ddr_WDATA,
        WSTRB => m_axi_In_ddr_WSTRB,
        WLAST => m_axi_In_ddr_WLAST,
        WID => m_axi_In_ddr_WID,
        WUSER => m_axi_In_ddr_WUSER,
        ARVALID => m_axi_In_ddr_ARVALID,
        ARREADY => m_axi_In_ddr_ARREADY,
        ARADDR => m_axi_In_ddr_ARADDR,
        ARID => m_axi_In_ddr_ARID,
        ARLEN => m_axi_In_ddr_ARLEN,
        ARSIZE => m_axi_In_ddr_ARSIZE,
        ARBURST => m_axi_In_ddr_ARBURST,
        ARLOCK => m_axi_In_ddr_ARLOCK,
        ARCACHE => m_axi_In_ddr_ARCACHE,
        ARPROT => m_axi_In_ddr_ARPROT,
        ARQOS => m_axi_In_ddr_ARQOS,
        ARREGION => m_axi_In_ddr_ARREGION,
        ARUSER => m_axi_In_ddr_ARUSER,
        RVALID => m_axi_In_ddr_RVALID,
        RREADY => m_axi_In_ddr_RREADY,
        RDATA => m_axi_In_ddr_RDATA,
        RLAST => m_axi_In_ddr_RLAST,
        RID => m_axi_In_ddr_RID,
        RUSER => m_axi_In_ddr_RUSER,
        RRESP => m_axi_In_ddr_RRESP,
        BVALID => m_axi_In_ddr_BVALID,
        BREADY => m_axi_In_ddr_BREADY,
        BRESP => m_axi_In_ddr_BRESP,
        BID => m_axi_In_ddr_BID,
        BUSER => m_axi_In_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => In_ddr_ARVALID,
        I_ARREADY => In_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_400,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => In_ddr_RVALID,
        I_RREADY => In_ddr_RREADY,
        I_RDATA => In_ddr_RDATA,
        I_RID => In_ddr_RID,
        I_RUSER => In_ddr_RUSER,
        I_RRESP => In_ddr_RRESP,
        I_RLAST => In_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => In_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => In_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => In_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => In_ddr_BRESP,
        I_BID => In_ddr_BID,
        I_BUSER => In_ddr_BUSER);

    W_ddr_m_axi_U : component conv_acc4t_W_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_W_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_W_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_W_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_W_ddr_AWVALID,
        AWREADY => m_axi_W_ddr_AWREADY,
        AWADDR => m_axi_W_ddr_AWADDR,
        AWID => m_axi_W_ddr_AWID,
        AWLEN => m_axi_W_ddr_AWLEN,
        AWSIZE => m_axi_W_ddr_AWSIZE,
        AWBURST => m_axi_W_ddr_AWBURST,
        AWLOCK => m_axi_W_ddr_AWLOCK,
        AWCACHE => m_axi_W_ddr_AWCACHE,
        AWPROT => m_axi_W_ddr_AWPROT,
        AWQOS => m_axi_W_ddr_AWQOS,
        AWREGION => m_axi_W_ddr_AWREGION,
        AWUSER => m_axi_W_ddr_AWUSER,
        WVALID => m_axi_W_ddr_WVALID,
        WREADY => m_axi_W_ddr_WREADY,
        WDATA => m_axi_W_ddr_WDATA,
        WSTRB => m_axi_W_ddr_WSTRB,
        WLAST => m_axi_W_ddr_WLAST,
        WID => m_axi_W_ddr_WID,
        WUSER => m_axi_W_ddr_WUSER,
        ARVALID => m_axi_W_ddr_ARVALID,
        ARREADY => m_axi_W_ddr_ARREADY,
        ARADDR => m_axi_W_ddr_ARADDR,
        ARID => m_axi_W_ddr_ARID,
        ARLEN => m_axi_W_ddr_ARLEN,
        ARSIZE => m_axi_W_ddr_ARSIZE,
        ARBURST => m_axi_W_ddr_ARBURST,
        ARLOCK => m_axi_W_ddr_ARLOCK,
        ARCACHE => m_axi_W_ddr_ARCACHE,
        ARPROT => m_axi_W_ddr_ARPROT,
        ARQOS => m_axi_W_ddr_ARQOS,
        ARREGION => m_axi_W_ddr_ARREGION,
        ARUSER => m_axi_W_ddr_ARUSER,
        RVALID => m_axi_W_ddr_RVALID,
        RREADY => m_axi_W_ddr_RREADY,
        RDATA => m_axi_W_ddr_RDATA,
        RLAST => m_axi_W_ddr_RLAST,
        RID => m_axi_W_ddr_RID,
        RUSER => m_axi_W_ddr_RUSER,
        RRESP => m_axi_W_ddr_RRESP,
        BVALID => m_axi_W_ddr_BVALID,
        BREADY => m_axi_W_ddr_BREADY,
        BRESP => m_axi_W_ddr_BRESP,
        BID => m_axi_W_ddr_BID,
        BUSER => m_axi_W_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W_ddr_ARVALID,
        I_ARREADY => W_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_100,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => W_ddr_RVALID,
        I_RREADY => W_ddr_RREADY,
        I_RDATA => W_ddr_RDATA,
        I_RID => W_ddr_RID,
        I_RUSER => W_ddr_RUSER,
        I_RRESP => W_ddr_RRESP,
        I_RLAST => W_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => W_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => W_ddr_BRESP,
        I_BID => W_ddr_BID,
        I_BUSER => W_ddr_BUSER);

    Out_ddr_m_axi_U : component conv_acc4t_Out_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Out_ddr_AWVALID,
        AWREADY => m_axi_Out_ddr_AWREADY,
        AWADDR => m_axi_Out_ddr_AWADDR,
        AWID => m_axi_Out_ddr_AWID,
        AWLEN => m_axi_Out_ddr_AWLEN,
        AWSIZE => m_axi_Out_ddr_AWSIZE,
        AWBURST => m_axi_Out_ddr_AWBURST,
        AWLOCK => m_axi_Out_ddr_AWLOCK,
        AWCACHE => m_axi_Out_ddr_AWCACHE,
        AWPROT => m_axi_Out_ddr_AWPROT,
        AWQOS => m_axi_Out_ddr_AWQOS,
        AWREGION => m_axi_Out_ddr_AWREGION,
        AWUSER => m_axi_Out_ddr_AWUSER,
        WVALID => m_axi_Out_ddr_WVALID,
        WREADY => m_axi_Out_ddr_WREADY,
        WDATA => m_axi_Out_ddr_WDATA,
        WSTRB => m_axi_Out_ddr_WSTRB,
        WLAST => m_axi_Out_ddr_WLAST,
        WID => m_axi_Out_ddr_WID,
        WUSER => m_axi_Out_ddr_WUSER,
        ARVALID => m_axi_Out_ddr_ARVALID,
        ARREADY => m_axi_Out_ddr_ARREADY,
        ARADDR => m_axi_Out_ddr_ARADDR,
        ARID => m_axi_Out_ddr_ARID,
        ARLEN => m_axi_Out_ddr_ARLEN,
        ARSIZE => m_axi_Out_ddr_ARSIZE,
        ARBURST => m_axi_Out_ddr_ARBURST,
        ARLOCK => m_axi_Out_ddr_ARLOCK,
        ARCACHE => m_axi_Out_ddr_ARCACHE,
        ARPROT => m_axi_Out_ddr_ARPROT,
        ARQOS => m_axi_Out_ddr_ARQOS,
        ARREGION => m_axi_Out_ddr_ARREGION,
        ARUSER => m_axi_Out_ddr_ARUSER,
        RVALID => m_axi_Out_ddr_RVALID,
        RREADY => m_axi_Out_ddr_RREADY,
        RDATA => m_axi_Out_ddr_RDATA,
        RLAST => m_axi_Out_ddr_RLAST,
        RID => m_axi_Out_ddr_RID,
        RUSER => m_axi_Out_ddr_RUSER,
        RRESP => m_axi_Out_ddr_RRESP,
        BVALID => m_axi_Out_ddr_BVALID,
        BREADY => m_axi_Out_ddr_BREADY,
        BRESP => m_axi_Out_ddr_BRESP,
        BID => m_axi_Out_ddr_BID,
        BUSER => m_axi_Out_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Out_ddr_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Out_ddr_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Out_ddr_RDATA,
        I_RID => Out_ddr_RID,
        I_RUSER => Out_ddr_RUSER,
        I_RRESP => Out_ddr_RRESP,
        I_RLAST => Out_ddr_RLAST,
        I_AWVALID => Out_ddr_AWVALID,
        I_AWREADY => Out_ddr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_310,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => Out_ddr_WVALID,
        I_WREADY => Out_ddr_WREADY,
        I_WDATA => Out_ddr_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => Out_ddr_BVALID,
        I_BREADY => Out_ddr_BREADY,
        I_BRESP => Out_ddr_BRESP,
        I_BID => Out_ddr_BID,
        I_BUSER => Out_ddr_BUSER);

    out_0_U : component conv_acc4t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_address0,
        ce0 => out_0_ce0,
        we0 => out_0_we0,
        d0 => grp_convolution_fu_764_out_r_d0,
        q0 => out_0_q0,
        address1 => grp_convolution_fu_764_out_r_address1,
        ce1 => out_0_ce1,
        we1 => out_0_we1,
        d1 => grp_convolution_fu_764_out_r_d1,
        q1 => out_0_q1);

    out_1_U : component conv_acc4t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_1_address0,
        ce0 => out_1_ce0,
        we0 => out_1_we0,
        d0 => grp_convolution_fu_764_out4_d0,
        q0 => out_1_q0,
        address1 => grp_convolution_fu_764_out4_address1,
        ce1 => out_1_ce1,
        we1 => out_1_we1,
        d1 => grp_convolution_fu_764_out4_d1,
        q1 => out_1_q1);

    out_2_U : component conv_acc4t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_2_address0,
        ce0 => out_2_ce0,
        we0 => out_2_we0,
        d0 => grp_convolution_fu_764_out5_d0,
        q0 => out_2_q0,
        address1 => grp_convolution_fu_764_out5_address1,
        ce1 => out_2_ce1,
        we1 => out_2_we1,
        d1 => grp_convolution_fu_764_out5_d1,
        q1 => out_2_q1);

    out_3_U : component conv_acc4t_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_3_address0,
        ce0 => out_3_ce0,
        we0 => out_3_we0,
        d0 => grp_convolution_fu_764_out6_d0,
        q0 => out_3_q0,
        address1 => grp_convolution_fu_764_out6_address1,
        ce1 => out_3_ce1,
        we1 => out_3_we1,
        d1 => grp_convolution_fu_764_out6_d1,
        q1 => out_3_q1);

    w_0_0_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_0_0_address0,
        ce0 => w_0_0_ce0,
        we0 => w_0_0_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_0_0_q0,
        address1 => grp_convolution_fu_764_w_address1,
        ce1 => w_0_0_ce1,
        q1 => w_0_0_q1);

    w_0_1_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_0_1_address0,
        ce0 => w_0_1_ce0,
        we0 => w_0_1_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_0_1_q0,
        address1 => grp_convolution_fu_764_w1_address1,
        ce1 => w_0_1_ce1,
        q1 => w_0_1_q1);

    w_0_2_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_0_2_address0,
        ce0 => w_0_2_ce0,
        we0 => w_0_2_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_0_2_q0,
        address1 => grp_convolution_fu_764_w2_address1,
        ce1 => w_0_2_ce1,
        q1 => w_0_2_q1);

    w_0_3_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_0_3_address0,
        ce0 => w_0_3_ce0,
        we0 => w_0_3_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_0_3_q0,
        address1 => grp_convolution_fu_764_w3_address1,
        ce1 => w_0_3_ce1,
        q1 => w_0_3_q1);

    w_1_0_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_1_0_address0,
        ce0 => w_1_0_ce0,
        we0 => w_1_0_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_1_0_q0,
        address1 => grp_convolution_fu_764_w14_address1,
        ce1 => w_1_0_ce1,
        q1 => w_1_0_q1);

    w_1_1_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_1_1_address0,
        ce0 => w_1_1_ce0,
        we0 => w_1_1_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_1_1_q0,
        address1 => grp_convolution_fu_764_w15_address1,
        ce1 => w_1_1_ce1,
        q1 => w_1_1_q1);

    w_1_2_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_1_2_address0,
        ce0 => w_1_2_ce0,
        we0 => w_1_2_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_1_2_q0,
        address1 => grp_convolution_fu_764_w16_address1,
        ce1 => w_1_2_ce1,
        q1 => w_1_2_q1);

    w_1_3_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_1_3_address0,
        ce0 => w_1_3_ce0,
        we0 => w_1_3_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_1_3_q0,
        address1 => grp_convolution_fu_764_w17_address1,
        ce1 => w_1_3_ce1,
        q1 => w_1_3_q1);

    w_2_0_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_2_0_address0,
        ce0 => w_2_0_ce0,
        we0 => w_2_0_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_2_0_q0,
        address1 => grp_convolution_fu_764_w28_address1,
        ce1 => w_2_0_ce1,
        q1 => w_2_0_q1);

    w_2_1_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_2_1_address0,
        ce0 => w_2_1_ce0,
        we0 => w_2_1_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_2_1_q0,
        address1 => grp_convolution_fu_764_w29_address1,
        ce1 => w_2_1_ce1,
        q1 => w_2_1_q1);

    w_2_2_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_2_2_address0,
        ce0 => w_2_2_ce0,
        we0 => w_2_2_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_2_2_q0,
        address1 => grp_convolution_fu_764_w210_address1,
        ce1 => w_2_2_ce1,
        q1 => w_2_2_q1);

    w_2_3_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_2_3_address0,
        ce0 => w_2_3_ce0,
        we0 => w_2_3_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_2_3_q0,
        address1 => grp_convolution_fu_764_w211_address1,
        ce1 => w_2_3_ce1,
        q1 => w_2_3_q1);

    w_3_0_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_3_0_address0,
        ce0 => w_3_0_ce0,
        we0 => w_3_0_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_3_0_q0,
        address1 => grp_convolution_fu_764_w312_address1,
        ce1 => w_3_0_ce1,
        q1 => w_3_0_q1);

    w_3_1_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_3_1_address0,
        ce0 => w_3_1_ce0,
        we0 => w_3_1_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_3_1_q0,
        address1 => grp_convolution_fu_764_w313_address1,
        ce1 => w_3_1_ce1,
        q1 => w_3_1_q1);

    w_3_2_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_3_2_address0,
        ce0 => w_3_2_ce0,
        we0 => w_3_2_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_3_2_q0,
        address1 => grp_convolution_fu_764_w314_address1,
        ce1 => w_3_2_ce1,
        q1 => w_3_2_q1);

    w_3_3_U : component conv_acc4t_w_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_3_3_address0,
        ce0 => w_3_3_ce0,
        we0 => w_3_3_we0,
        d0 => bitcast_ln46_reg_1506,
        q0 => w_3_3_q0,
        address1 => grp_convolution_fu_764_w315_address1,
        ce1 => w_3_3_ce1,
        q1 => w_3_3_q1);

    grp_convolution_fu_764 : component conv_acc4t_convolution
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution_fu_764_ap_start,
        ap_done => grp_convolution_fu_764_ap_done,
        ap_idle => grp_convolution_fu_764_ap_idle,
        ap_ready => grp_convolution_fu_764_ap_ready,
        w_address0 => grp_convolution_fu_764_w_address0,
        w_ce0 => grp_convolution_fu_764_w_ce0,
        w_q0 => w_0_0_q0,
        w_address1 => grp_convolution_fu_764_w_address1,
        w_ce1 => grp_convolution_fu_764_w_ce1,
        w_q1 => w_0_0_q1,
        w1_address0 => grp_convolution_fu_764_w1_address0,
        w1_ce0 => grp_convolution_fu_764_w1_ce0,
        w1_q0 => w_0_1_q0,
        w1_address1 => grp_convolution_fu_764_w1_address1,
        w1_ce1 => grp_convolution_fu_764_w1_ce1,
        w1_q1 => w_0_1_q1,
        w2_address0 => grp_convolution_fu_764_w2_address0,
        w2_ce0 => grp_convolution_fu_764_w2_ce0,
        w2_q0 => w_0_2_q0,
        w2_address1 => grp_convolution_fu_764_w2_address1,
        w2_ce1 => grp_convolution_fu_764_w2_ce1,
        w2_q1 => w_0_2_q1,
        w3_address0 => grp_convolution_fu_764_w3_address0,
        w3_ce0 => grp_convolution_fu_764_w3_ce0,
        w3_q0 => w_0_3_q0,
        w3_address1 => grp_convolution_fu_764_w3_address1,
        w3_ce1 => grp_convolution_fu_764_w3_ce1,
        w3_q1 => w_0_3_q1,
        w14_address0 => grp_convolution_fu_764_w14_address0,
        w14_ce0 => grp_convolution_fu_764_w14_ce0,
        w14_q0 => w_1_0_q0,
        w14_address1 => grp_convolution_fu_764_w14_address1,
        w14_ce1 => grp_convolution_fu_764_w14_ce1,
        w14_q1 => w_1_0_q1,
        w15_address0 => grp_convolution_fu_764_w15_address0,
        w15_ce0 => grp_convolution_fu_764_w15_ce0,
        w15_q0 => w_1_1_q0,
        w15_address1 => grp_convolution_fu_764_w15_address1,
        w15_ce1 => grp_convolution_fu_764_w15_ce1,
        w15_q1 => w_1_1_q1,
        w16_address0 => grp_convolution_fu_764_w16_address0,
        w16_ce0 => grp_convolution_fu_764_w16_ce0,
        w16_q0 => w_1_2_q0,
        w16_address1 => grp_convolution_fu_764_w16_address1,
        w16_ce1 => grp_convolution_fu_764_w16_ce1,
        w16_q1 => w_1_2_q1,
        w17_address0 => grp_convolution_fu_764_w17_address0,
        w17_ce0 => grp_convolution_fu_764_w17_ce0,
        w17_q0 => w_1_3_q0,
        w17_address1 => grp_convolution_fu_764_w17_address1,
        w17_ce1 => grp_convolution_fu_764_w17_ce1,
        w17_q1 => w_1_3_q1,
        w28_address0 => grp_convolution_fu_764_w28_address0,
        w28_ce0 => grp_convolution_fu_764_w28_ce0,
        w28_q0 => w_2_0_q0,
        w28_address1 => grp_convolution_fu_764_w28_address1,
        w28_ce1 => grp_convolution_fu_764_w28_ce1,
        w28_q1 => w_2_0_q1,
        w29_address0 => grp_convolution_fu_764_w29_address0,
        w29_ce0 => grp_convolution_fu_764_w29_ce0,
        w29_q0 => w_2_1_q0,
        w29_address1 => grp_convolution_fu_764_w29_address1,
        w29_ce1 => grp_convolution_fu_764_w29_ce1,
        w29_q1 => w_2_1_q1,
        w210_address0 => grp_convolution_fu_764_w210_address0,
        w210_ce0 => grp_convolution_fu_764_w210_ce0,
        w210_q0 => w_2_2_q0,
        w210_address1 => grp_convolution_fu_764_w210_address1,
        w210_ce1 => grp_convolution_fu_764_w210_ce1,
        w210_q1 => w_2_2_q1,
        w211_address0 => grp_convolution_fu_764_w211_address0,
        w211_ce0 => grp_convolution_fu_764_w211_ce0,
        w211_q0 => w_2_3_q0,
        w211_address1 => grp_convolution_fu_764_w211_address1,
        w211_ce1 => grp_convolution_fu_764_w211_ce1,
        w211_q1 => w_2_3_q1,
        w312_address0 => grp_convolution_fu_764_w312_address0,
        w312_ce0 => grp_convolution_fu_764_w312_ce0,
        w312_q0 => w_3_0_q0,
        w312_address1 => grp_convolution_fu_764_w312_address1,
        w312_ce1 => grp_convolution_fu_764_w312_ce1,
        w312_q1 => w_3_0_q1,
        w313_address0 => grp_convolution_fu_764_w313_address0,
        w313_ce0 => grp_convolution_fu_764_w313_ce0,
        w313_q0 => w_3_1_q0,
        w313_address1 => grp_convolution_fu_764_w313_address1,
        w313_ce1 => grp_convolution_fu_764_w313_ce1,
        w313_q1 => w_3_1_q1,
        w314_address0 => grp_convolution_fu_764_w314_address0,
        w314_ce0 => grp_convolution_fu_764_w314_ce0,
        w314_q0 => w_3_2_q0,
        w314_address1 => grp_convolution_fu_764_w314_address1,
        w314_ce1 => grp_convolution_fu_764_w314_ce1,
        w314_q1 => w_3_2_q1,
        w315_address0 => grp_convolution_fu_764_w315_address0,
        w315_ce0 => grp_convolution_fu_764_w315_ce0,
        w315_q0 => w_3_3_q0,
        w315_address1 => grp_convolution_fu_764_w315_address1,
        w315_ce1 => grp_convolution_fu_764_w315_ce1,
        w315_q1 => w_3_3_q1,
        out_r_address0 => grp_convolution_fu_764_out_r_address0,
        out_r_ce0 => grp_convolution_fu_764_out_r_ce0,
        out_r_we0 => grp_convolution_fu_764_out_r_we0,
        out_r_d0 => grp_convolution_fu_764_out_r_d0,
        out_r_q0 => out_0_q0,
        out_r_address1 => grp_convolution_fu_764_out_r_address1,
        out_r_ce1 => grp_convolution_fu_764_out_r_ce1,
        out_r_we1 => grp_convolution_fu_764_out_r_we1,
        out_r_d1 => grp_convolution_fu_764_out_r_d1,
        out_r_q1 => out_0_q1,
        out4_address0 => grp_convolution_fu_764_out4_address0,
        out4_ce0 => grp_convolution_fu_764_out4_ce0,
        out4_we0 => grp_convolution_fu_764_out4_we0,
        out4_d0 => grp_convolution_fu_764_out4_d0,
        out4_q0 => out_1_q0,
        out4_address1 => grp_convolution_fu_764_out4_address1,
        out4_ce1 => grp_convolution_fu_764_out4_ce1,
        out4_we1 => grp_convolution_fu_764_out4_we1,
        out4_d1 => grp_convolution_fu_764_out4_d1,
        out4_q1 => out_1_q1,
        out5_address0 => grp_convolution_fu_764_out5_address0,
        out5_ce0 => grp_convolution_fu_764_out5_ce0,
        out5_we0 => grp_convolution_fu_764_out5_we0,
        out5_d0 => grp_convolution_fu_764_out5_d0,
        out5_q0 => out_2_q0,
        out5_address1 => grp_convolution_fu_764_out5_address1,
        out5_ce1 => grp_convolution_fu_764_out5_ce1,
        out5_we1 => grp_convolution_fu_764_out5_we1,
        out5_d1 => grp_convolution_fu_764_out5_d1,
        out5_q1 => out_2_q1,
        out6_address0 => grp_convolution_fu_764_out6_address0,
        out6_ce0 => grp_convolution_fu_764_out6_ce0,
        out6_we0 => grp_convolution_fu_764_out6_we0,
        out6_d0 => grp_convolution_fu_764_out6_d0,
        out6_q0 => out_3_q0,
        out6_address1 => grp_convolution_fu_764_out6_address1,
        out6_ce1 => grp_convolution_fu_764_out6_ce1,
        out6_we1 => grp_convolution_fu_764_out6_we1,
        out6_d1 => grp_convolution_fu_764_out6_d1,
        out6_q1 => out_3_q1,
        in_0_address0 => grp_convolution_fu_764_in_0_address0,
        in_0_ce0 => grp_convolution_fu_764_in_0_ce0,
        in_0_q0 => in_0_q0,
        in_0_address1 => grp_convolution_fu_764_in_0_address1,
        in_0_ce1 => grp_convolution_fu_764_in_0_ce1,
        in_0_q1 => in_0_q1,
        in_1_address0 => grp_convolution_fu_764_in_1_address0,
        in_1_ce0 => grp_convolution_fu_764_in_1_ce0,
        in_1_q0 => in_1_q0,
        in_1_address1 => grp_convolution_fu_764_in_1_address1,
        in_1_ce1 => grp_convolution_fu_764_in_1_ce1,
        in_1_q1 => in_1_q1,
        in_2_address0 => grp_convolution_fu_764_in_2_address0,
        in_2_ce0 => grp_convolution_fu_764_in_2_ce0,
        in_2_q0 => in_2_q0,
        in_2_address1 => grp_convolution_fu_764_in_2_address1,
        in_2_ce1 => grp_convolution_fu_764_in_2_ce1,
        in_2_q1 => in_2_q1,
        in_3_address0 => grp_convolution_fu_764_in_3_address0,
        in_3_ce0 => grp_convolution_fu_764_in_3_ce0,
        in_3_q0 => in_3_q0,
        in_3_address1 => grp_convolution_fu_764_in_3_address1,
        in_3_ce1 => grp_convolution_fu_764_in_3_ce1,
        in_3_q1 => in_3_q1);

    mux_42_32_1_1_U195 : component conv_acc4t_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => out_0_q0,
        din1 => out_1_q0,
        din2 => out_2_q0,
        din3 => out_3_q0,
        din4 => trunc_ln61_reg_1565,
        dout => tmp_fu_1390_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_fu_764_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution_fu_764_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_ddr_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    grp_convolution_fu_764_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_fu_764_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_fu_764_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    L_chi_1_reg_632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_802_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                L_chi_1_reg_632 <= add_ln28_fu_890_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                L_chi_1_reg_632 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_chi_reg_676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                L_chi_reg_676 <= select_ln40_1_fu_1059_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                L_chi_reg_676 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_cho_1_reg_753_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                L_cho_1_reg_753 <= add_ln59_fu_1370_p2;
            elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                L_cho_1_reg_753 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_cho_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                L_cho_reg_654 <= select_ln38_1_reg_1468;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                L_cho_reg_654 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_ci_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                L_ci_reg_621 <= select_ln26_1_reg_1426;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                L_ci_reg_621 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    L_co_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                L_co_reg_742 <= select_ln57_2_fu_1358_p3;
            elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                L_co_reg_742 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    L_kr_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                L_kr_reg_698 <= add_ln44_fu_1087_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                L_kr_reg_698 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    L_ri_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                L_ri_reg_599 <= select_ln24_1_reg_1416;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                L_ri_reg_599 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    L_ro_reg_720_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln55_reg_1531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                L_ro_reg_720 <= select_ln55_1_reg_1535;
            elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                L_ro_reg_720 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten101_reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten101_reg_709 <= add_ln55_1_fu_1158_p2;
            elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                indvar_flatten101_reg_709 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_802_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten17_reg_588 <= add_ln24_1_fu_796_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten17_reg_588 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten25_reg_687 <= select_ln42_1_fu_1105_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten25_reg_687 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten37_reg_665 <= select_ln40_2_fu_1119_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten37_reg_665 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_643_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten59_reg_643 <= add_ln38_1_fu_937_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten59_reg_643 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten71_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten71_reg_731 <= select_ln57_3_fu_1382_p3;
            elsif (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                indvar_flatten71_reg_731 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_802_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_610 <= select_ln26_2_fu_902_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_610 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_reg_1446 <= add_ln30_fu_920_p2;
                bitcast_ln30_reg_1451 <= bitcast_ln30_fu_926_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                bitcast_ln46_reg_1506 <= bitcast_ln46_fu_1127_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln24_reg_1412 <= icmp_ln24_fu_802_p2;
                trunc_ln30_1_reg_1432_pp0_iter1_reg <= trunc_ln30_1_reg_1432;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln38_reg_1464 <= icmp_ln38_fu_943_p2;
                select_ln40_reg_1477_pp1_iter1_reg <= select_ln40_reg_1477;
                select_ln42_reg_1486_pp1_iter1_reg <= select_ln42_reg_1486;
                trunc_ln38_reg_1473_pp1_iter1_reg <= trunc_ln38_reg_1473;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln55_reg_1531 <= icmp_ln55_fu_1200_p2;
                icmp_ln55_reg_1531_pp2_iter1_reg <= icmp_ln55_reg_1531;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_802_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln24_1_reg_1416 <= select_ln24_1_fu_828_p3;
                select_ln26_1_reg_1426 <= select_ln26_1_fu_878_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln38_1_reg_1468 <= select_ln38_1_fu_969_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_943_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln40_reg_1477 <= select_ln40_fu_1033_p3;
                select_ln42_reg_1486 <= select_ln42_fu_1079_p3;
                trunc_ln38_reg_1473 <= trunc_ln38_fu_977_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln55_1_reg_1535 <= select_ln55_1_fu_1252_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_reg_1580 <= tmp_fu_1390_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_802_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln30_1_reg_1432 <= trunc_ln30_1_fu_886_p1;
                trunc_ln30_reg_1421 <= trunc_ln30_fu_836_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln61_reg_1565 <= trunc_ln61_fu_1366_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state11, ap_enable_reg_pp1_iter1, ap_CS_fsm_state21, ap_enable_reg_pp2_iter2, ap_CS_fsm_state30, In_ddr_ARREADY, W_ddr_ARREADY, Out_ddr_AWREADY, Out_ddr_BVALID, ap_enable_reg_pp0_iter0, icmp_ln24_fu_802_p2, ap_enable_reg_pp1_iter0, icmp_ln38_fu_943_p2, ap_enable_reg_pp2_iter0, icmp_ln55_fu_1200_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_ap_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = In_ddr_ARREADY))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln24_fu_802_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln24_fu_802_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = W_ddr_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln38_fu_943_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln38_fu_943_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = Out_ddr_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_convolution_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln55_fu_1200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln55_fu_1200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    In_ddr_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, In_ddr_ARREADY)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = In_ddr_ARREADY))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            In_ddr_ARVALID <= ap_const_logic_1;
        else 
            In_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    In_ddr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_1412, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_ddr_RREADY <= ap_const_logic_1;
        else 
            In_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    In_ddr_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_In_ddr_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            In_ddr_blk_n_AR <= m_axi_In_ddr_ARREADY;
        else 
            In_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    In_ddr_blk_n_R_assign_proc : process(m_axi_In_ddr_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln24_reg_1412)
    begin
        if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_ddr_blk_n_R <= m_axi_In_ddr_RVALID;
        else 
            In_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_AWVALID_assign_proc : process(ap_CS_fsm_state21, Out_ddr_AWREADY)
    begin
        if (((ap_const_logic_1 = Out_ddr_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            Out_ddr_AWVALID <= ap_const_logic_1;
        else 
            Out_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_BREADY_assign_proc : process(ap_CS_fsm_state30, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            Out_ddr_BREADY <= ap_const_logic_1;
        else 
            Out_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    Out_ddr_WDATA <= tmp_reg_1580;

    Out_ddr_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln55_reg_1531_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln55_reg_1531_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Out_ddr_WVALID <= ap_const_logic_1;
        else 
            Out_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_blk_n_AW_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_ddr_blk_n_AW <= m_axi_Out_ddr_AWREADY;
        else 
            Out_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_B_assign_proc : process(m_axi_Out_ddr_BVALID, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Out_ddr_blk_n_B <= m_axi_Out_ddr_BVALID;
        else 
            Out_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_W_assign_proc : process(m_axi_Out_ddr_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln55_reg_1531_pp2_iter1_reg)
    begin
        if (((icmp_ln55_reg_1531_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Out_ddr_blk_n_W <= m_axi_Out_ddr_WREADY;
        else 
            Out_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    W_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state11, W_ddr_ARREADY)
    begin
        if (((ap_const_logic_1 = W_ddr_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            W_ddr_ARVALID <= ap_const_logic_1;
        else 
            W_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_ddr_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln38_reg_1464, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            W_ddr_RREADY <= ap_const_logic_1;
        else 
            W_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W_ddr_blk_n_AR_assign_proc : process(m_axi_W_ddr_ARREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            W_ddr_blk_n_AR <= m_axi_W_ddr_ARREADY;
        else 
            W_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    W_ddr_blk_n_R_assign_proc : process(m_axi_W_ddr_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln38_reg_1464)
    begin
        if (((icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            W_ddr_blk_n_R <= m_axi_W_ddr_RVALID;
        else 
            W_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln24_1_fu_796_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_588) + unsigned(ap_const_lv11_1));
    add_ln24_fu_808_p2 <= std_logic_vector(unsigned(ap_phi_mux_L_ri_phi_fu_603_p4) + unsigned(ap_const_lv5_1));
    add_ln26_1_fu_896_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_610) + unsigned(ap_const_lv8_1));
    add_ln26_fu_858_p2 <= std_logic_vector(unsigned(select_ln24_fu_820_p3) + unsigned(ap_const_lv5_1));
    add_ln28_fu_890_p2 <= std_logic_vector(unsigned(select_ln26_fu_870_p3) + unsigned(ap_const_lv3_1));
    add_ln30_fu_920_p2 <= std_logic_vector(unsigned(tmp_50_cast_fu_910_p3) + unsigned(zext_ln30_fu_917_p1));
    add_ln38_1_fu_937_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_643) + unsigned(ap_const_lv9_1));
    add_ln38_fu_949_p2 <= std_logic_vector(unsigned(ap_phi_mux_L_cho_phi_fu_658_p4) + unsigned(ap_const_lv3_1));
    add_ln40_1_fu_1113_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_665) + unsigned(ap_const_lv8_1));
    add_ln40_fu_1023_p2 <= std_logic_vector(unsigned(select_ln38_fu_961_p3) + unsigned(ap_const_lv3_1));
    add_ln42_fu_1093_p2 <= std_logic_vector(unsigned(indvar_flatten25_reg_687) + unsigned(ap_const_lv6_1));
    add_ln44_fu_1087_p2 <= std_logic_vector(unsigned(select_ln42_fu_1079_p3) + unsigned(ap_const_lv3_1));
    add_ln55_1_fu_1158_p2 <= std_logic_vector(unsigned(indvar_flatten101_reg_709) + unsigned(ap_const_lv10_1));
    add_ln55_fu_1206_p2 <= std_logic_vector(unsigned(ap_phi_mux_L_ro_phi_fu_724_p4) + unsigned(ap_const_lv4_1));
    add_ln57_1_fu_1376_p2 <= std_logic_vector(unsigned(indvar_flatten71_reg_731) + unsigned(ap_const_lv7_1));
    add_ln57_fu_1312_p2 <= std_logic_vector(unsigned(select_ln55_fu_1218_p3) + unsigned(ap_const_lv4_1));
    add_ln59_fu_1370_p2 <= std_logic_vector(unsigned(select_ln57_fu_1324_p3) + unsigned(ap_const_lv3_1));
    add_ln61_1_fu_1336_p2 <= std_logic_vector(unsigned(sub_ln61_2_fu_1280_p2) + unsigned(zext_ln61_4_fu_1332_p1));
    add_ln61_fu_1194_p2 <= std_logic_vector(unsigned(sub_ln61_fu_1184_p2) + unsigned(zext_ln61_1_fu_1190_p1));
    and_ln24_fu_852_p2 <= (xor_ln24_fu_840_p2 and icmp_ln28_fu_846_p2);
    and_ln38_1_fu_1017_p2 <= (xor_ln38_fu_993_p2 and icmp_ln42_fu_1011_p2);
    and_ln38_fu_1005_p2 <= (xor_ln38_fu_993_p2 and icmp_ln44_fu_999_p2);
    and_ln40_fu_1053_p2 <= (or_ln40_fu_1047_p2 and and_ln38_fu_1005_p2);
    and_ln55_fu_1306_p2 <= (xor_ln55_fu_1294_p2 and icmp_ln59_fu_1300_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(16);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state30 <= ap_CS_fsm(23);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln24_reg_1412, In_ddr_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = In_ddr_RVALID) and (icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln24_reg_1412, In_ddr_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = In_ddr_RVALID) and (icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln38_reg_1464, W_ddr_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_0 = W_ddr_RVALID) and (icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln38_reg_1464, W_ddr_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_0 = W_ddr_RVALID) and (icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state25_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state25_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp1_stage0_iter1_assign_proc : process(icmp_ln38_reg_1464, W_ddr_RVALID)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((ap_const_logic_0 = W_ddr_RVALID) and (icmp_ln38_reg_1464 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(icmp_ln55_reg_1531_pp2_iter1_reg, Out_ddr_WREADY)
    begin
                ap_block_state25_io <= ((icmp_ln55_reg_1531_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = Out_ddr_WREADY));
    end process;

        ap_block_state25_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(icmp_ln24_reg_1412, In_ddr_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((ap_const_logic_0 = In_ddr_RVALID) and (icmp_ln24_reg_1412 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln24_fu_802_p2)
    begin
        if ((icmp_ln24_fu_802_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(icmp_ln38_fu_943_p2)
    begin
        if ((icmp_ln38_fu_943_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state23_assign_proc : process(icmp_ln55_fu_1200_p2)
    begin
        if ((icmp_ln55_fu_1200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state30, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_L_cho_phi_fu_658_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln38_reg_1464, L_cho_reg_654, select_ln38_1_reg_1468)
    begin
        if (((icmp_ln38_reg_1464 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_L_cho_phi_fu_658_p4 <= select_ln38_1_reg_1468;
        else 
            ap_phi_mux_L_cho_phi_fu_658_p4 <= L_cho_reg_654;
        end if; 
    end process;


    ap_phi_mux_L_ci_phi_fu_625_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln24_reg_1412, L_ci_reg_621, select_ln26_1_reg_1426)
    begin
        if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_L_ci_phi_fu_625_p4 <= select_ln26_1_reg_1426;
        else 
            ap_phi_mux_L_ci_phi_fu_625_p4 <= L_ci_reg_621;
        end if; 
    end process;


    ap_phi_mux_L_ri_phi_fu_603_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln24_reg_1412, L_ri_reg_599, select_ln24_1_reg_1416)
    begin
        if (((icmp_ln24_reg_1412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_L_ri_phi_fu_603_p4 <= select_ln24_1_reg_1416;
        else 
            ap_phi_mux_L_ri_phi_fu_603_p4 <= L_ri_reg_599;
        end if; 
    end process;


    ap_phi_mux_L_ro_phi_fu_724_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln55_reg_1531, L_ro_reg_720, ap_CS_fsm_pp2_stage0, select_ln55_1_reg_1535, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln55_reg_1531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_L_ro_phi_fu_724_p4 <= select_ln55_1_reg_1535;
        else 
            ap_phi_mux_L_ro_phi_fu_724_p4 <= L_ro_reg_720;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, Out_ddr_BVALID)
    begin
        if (((ap_const_logic_1 = Out_ddr_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln30_fu_926_p1 <= In_ddr_RDATA;
    bitcast_ln46_fu_1127_p1 <= W_ddr_RDATA;
    grp_convolution_fu_764_ap_start <= grp_convolution_fu_764_ap_start_reg;
    icmp_ln24_fu_802_p2 <= "1" when (indvar_flatten17_reg_588 = ap_const_lv11_400) else "0";
    icmp_ln26_fu_814_p2 <= "1" when (indvar_flatten_reg_610 = ap_const_lv8_40) else "0";
    icmp_ln28_fu_846_p2 <= "1" when (L_chi_1_reg_632 = ap_const_lv3_4) else "0";
    icmp_ln38_fu_943_p2 <= "1" when (indvar_flatten59_reg_643 = ap_const_lv9_100) else "0";
    icmp_ln40_fu_955_p2 <= "1" when (indvar_flatten37_reg_665 = ap_const_lv8_40) else "0";
    icmp_ln42_fu_1011_p2 <= "1" when (indvar_flatten25_reg_687 = ap_const_lv6_10) else "0";
    icmp_ln44_fu_999_p2 <= "1" when (L_kr_reg_698 = ap_const_lv3_4) else "0";
    icmp_ln55_fu_1200_p2 <= "1" when (indvar_flatten101_reg_709 = ap_const_lv10_310) else "0";
    icmp_ln57_fu_1212_p2 <= "1" when (indvar_flatten71_reg_731 = ap_const_lv7_38) else "0";
    icmp_ln59_fu_1300_p2 <= "1" when (L_cho_1_reg_753 = ap_const_lv3_4) else "0";

    in_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_0_address0, zext_ln30_1_fu_930_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_0_address0 <= zext_ln30_1_fu_930_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_0_address0 <= grp_convolution_fu_764_in_0_address0;
        else 
            in_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_0_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_0_ce0 <= grp_convolution_fu_764_in_0_ce0;
        else 
            in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_in_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_0_ce1 <= grp_convolution_fu_764_in_0_ce1;
        else 
            in_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln30_1_reg_1432_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln30_1_reg_1432_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_0_we0 <= ap_const_logic_1;
        else 
            in_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_1_address0, zext_ln30_1_fu_930_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_1_address0 <= zext_ln30_1_fu_930_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_1_address0 <= grp_convolution_fu_764_in_1_address0;
        else 
            in_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_1_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_1_ce0 <= grp_convolution_fu_764_in_1_ce0;
        else 
            in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_in_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_1_ce1 <= grp_convolution_fu_764_in_1_ce1;
        else 
            in_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln30_1_reg_1432_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln30_1_reg_1432_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_1_we0 <= ap_const_logic_1;
        else 
            in_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_2_address0, zext_ln30_1_fu_930_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_2_address0 <= zext_ln30_1_fu_930_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_2_address0 <= grp_convolution_fu_764_in_2_address0;
        else 
            in_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_2_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_2_ce0 <= grp_convolution_fu_764_in_2_ce0;
        else 
            in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_in_2_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_2_ce1 <= grp_convolution_fu_764_in_2_ce1;
        else 
            in_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln30_1_reg_1432_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln30_1_reg_1432_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_2_we0 <= ap_const_logic_1;
        else 
            in_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_3_address0, zext_ln30_1_fu_930_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_3_address0 <= zext_ln30_1_fu_930_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_3_address0 <= grp_convolution_fu_764_in_3_address0;
        else 
            in_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_in_3_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_3_ce0 <= grp_convolution_fu_764_in_3_ce0;
        else 
            in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_in_3_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_3_ce1 <= grp_convolution_fu_764_in_3_ce1;
        else 
            in_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln30_1_reg_1432_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln30_1_reg_1432_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_3_we0 <= ap_const_logic_1;
        else 
            in_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_fu_864_p2 <= (icmp_ln26_fu_814_p2 or and_ln24_fu_852_p2);
    or_ln40_fu_1047_p2 <= (xor_ln40_fu_1041_p2 or icmp_ln40_fu_955_p2);
    or_ln42_1_fu_1099_p2 <= (icmp_ln40_fu_955_p2 or and_ln38_1_fu_1017_p2);
    or_ln42_2_fu_1073_p2 <= (or_ln42_fu_1067_p2 or icmp_ln40_fu_955_p2);
    or_ln42_fu_1067_p2 <= (and_ln40_fu_1053_p2 or and_ln38_1_fu_1017_p2);
    or_ln57_fu_1318_p2 <= (icmp_ln57_fu_1212_p2 or and_ln55_fu_1306_p2);

    out_0_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state22, grp_convolution_fu_764_out_r_address0, zext_ln61_5_fu_1350_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_0_address0 <= zext_ln61_5_fu_1350_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_0_address0 <= grp_convolution_fu_764_out_r_address0;
        else 
            out_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state22, grp_convolution_fu_764_out_r_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_0_ce0 <= grp_convolution_fu_764_out_r_ce0;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_0_ce1 <= grp_convolution_fu_764_out_r_ce1;
        else 
            out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_0_we0 <= grp_convolution_fu_764_out_r_we0;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_we1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_0_we1 <= grp_convolution_fu_764_out_r_we1;
        else 
            out_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_1_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state22, grp_convolution_fu_764_out4_address0, zext_ln61_5_fu_1350_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_1_address0 <= zext_ln61_5_fu_1350_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_1_address0 <= grp_convolution_fu_764_out4_address0;
        else 
            out_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state22, grp_convolution_fu_764_out4_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_1_ce0 <= grp_convolution_fu_764_out4_ce0;
        else 
            out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out4_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_1_ce1 <= grp_convolution_fu_764_out4_ce1;
        else 
            out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_1_we0_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out4_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_1_we0 <= grp_convolution_fu_764_out4_we0;
        else 
            out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_1_we1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out4_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_1_we1 <= grp_convolution_fu_764_out4_we1;
        else 
            out_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_2_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state22, grp_convolution_fu_764_out5_address0, zext_ln61_5_fu_1350_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_2_address0 <= zext_ln61_5_fu_1350_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_2_address0 <= grp_convolution_fu_764_out5_address0;
        else 
            out_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state22, grp_convolution_fu_764_out5_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_2_ce0 <= grp_convolution_fu_764_out5_ce0;
        else 
            out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out5_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_2_ce1 <= grp_convolution_fu_764_out5_ce1;
        else 
            out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_2_we0_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out5_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_2_we0 <= grp_convolution_fu_764_out5_we0;
        else 
            out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_2_we1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out5_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_2_we1 <= grp_convolution_fu_764_out5_we1;
        else 
            out_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_3_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state22, grp_convolution_fu_764_out6_address0, zext_ln61_5_fu_1350_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_3_address0 <= zext_ln61_5_fu_1350_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_3_address0 <= grp_convolution_fu_764_out6_address0;
        else 
            out_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_3_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state22, grp_convolution_fu_764_out6_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_3_ce0 <= grp_convolution_fu_764_out6_ce0;
        else 
            out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out6_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_3_ce1 <= grp_convolution_fu_764_out6_ce1;
        else 
            out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_3_we0_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out6_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_3_we0 <= grp_convolution_fu_764_out6_we0;
        else 
            out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_3_we1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_out6_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_3_we1 <= grp_convolution_fu_764_out6_we1;
        else 
            out_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_1260_p3 <= (select_ln55_1_fu_1252_p3 & ap_const_lv4_0);
    select_ln24_1_fu_828_p3 <= 
        add_ln24_fu_808_p2 when (icmp_ln26_fu_814_p2(0) = '1') else 
        ap_phi_mux_L_ri_phi_fu_603_p4;
    select_ln24_fu_820_p3 <= 
        ap_const_lv5_0 when (icmp_ln26_fu_814_p2(0) = '1') else 
        ap_phi_mux_L_ci_phi_fu_625_p4;
    select_ln26_1_fu_878_p3 <= 
        add_ln26_fu_858_p2 when (and_ln24_fu_852_p2(0) = '1') else 
        select_ln24_fu_820_p3;
    select_ln26_2_fu_902_p3 <= 
        ap_const_lv8_1 when (icmp_ln26_fu_814_p2(0) = '1') else 
        add_ln26_1_fu_896_p2;
    select_ln26_fu_870_p3 <= 
        ap_const_lv3_0 when (or_ln26_fu_864_p2(0) = '1') else 
        L_chi_1_reg_632;
    select_ln38_1_fu_969_p3 <= 
        add_ln38_fu_949_p2 when (icmp_ln40_fu_955_p2(0) = '1') else 
        ap_phi_mux_L_cho_phi_fu_658_p4;
    select_ln38_2_fu_985_p3 <= 
        ap_const_lv2_0 when (icmp_ln40_fu_955_p2(0) = '1') else 
        trunc_ln46_fu_981_p1;
    select_ln38_fu_961_p3 <= 
        ap_const_lv3_0 when (icmp_ln40_fu_955_p2(0) = '1') else 
        L_chi_reg_676;
    select_ln40_1_fu_1059_p3 <= 
        add_ln40_fu_1023_p2 when (and_ln38_1_fu_1017_p2(0) = '1') else 
        select_ln38_fu_961_p3;
    select_ln40_2_fu_1119_p3 <= 
        ap_const_lv8_1 when (icmp_ln40_fu_955_p2(0) = '1') else 
        add_ln40_1_fu_1113_p2;
    select_ln40_fu_1033_p3 <= 
        trunc_ln46_1_fu_1029_p1 when (and_ln38_1_fu_1017_p2(0) = '1') else 
        select_ln38_2_fu_985_p3;
    select_ln42_1_fu_1105_p3 <= 
        ap_const_lv6_1 when (or_ln42_1_fu_1099_p2(0) = '1') else 
        add_ln42_fu_1093_p2;
    select_ln42_fu_1079_p3 <= 
        ap_const_lv3_0 when (or_ln42_2_fu_1073_p2(0) = '1') else 
        L_kr_reg_698;
    select_ln55_1_fu_1252_p3 <= 
        add_ln55_fu_1206_p2 when (icmp_ln57_fu_1212_p2(0) = '1') else 
        ap_phi_mux_L_ro_phi_fu_724_p4;
    select_ln55_2_fu_1286_p3 <= 
        sub_ln61_1_fu_1246_p2 when (icmp_ln57_fu_1212_p2(0) = '1') else 
        add_ln61_fu_1194_p2;
    select_ln55_fu_1218_p3 <= 
        ap_const_lv4_0 when (icmp_ln57_fu_1212_p2(0) = '1') else 
        L_co_reg_742;
    select_ln57_1_fu_1342_p3 <= 
        add_ln61_1_fu_1336_p2 when (and_ln55_fu_1306_p2(0) = '1') else 
        select_ln55_2_fu_1286_p3;
    select_ln57_2_fu_1358_p3 <= 
        add_ln57_fu_1312_p2 when (and_ln55_fu_1306_p2(0) = '1') else 
        select_ln55_fu_1218_p3;
    select_ln57_3_fu_1382_p3 <= 
        ap_const_lv7_1 when (icmp_ln57_fu_1212_p2(0) = '1') else 
        add_ln57_1_fu_1376_p2;
    select_ln57_fu_1324_p3 <= 
        ap_const_lv3_0 when (or_ln57_fu_1318_p2(0) = '1') else 
        L_cho_1_reg_753;
    sub_ln61_1_fu_1246_p2 <= std_logic_vector(unsigned(tmp_50_fu_1226_p3) - unsigned(zext_ln61_2_fu_1242_p1));
    sub_ln61_2_fu_1280_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1260_p3) - unsigned(zext_ln61_3_fu_1276_p1));
    sub_ln61_fu_1184_p2 <= std_logic_vector(unsigned(tmp_48_fu_1164_p3) - unsigned(zext_ln61_fu_1180_p1));
    tmp_1_fu_1268_p3 <= (select_ln55_1_fu_1252_p3 & ap_const_lv1_0);
    tmp_48_fu_1164_p3 <= (ap_phi_mux_L_ro_phi_fu_724_p4 & ap_const_lv4_0);
    tmp_49_fu_1172_p3 <= (ap_phi_mux_L_ro_phi_fu_724_p4 & ap_const_lv1_0);
    tmp_50_cast_fu_910_p3 <= (trunc_ln30_reg_1421 & ap_const_lv4_0);
    tmp_50_fu_1226_p3 <= (add_ln55_fu_1206_p2 & ap_const_lv4_0);
    tmp_51_fu_1234_p3 <= (add_ln55_fu_1206_p2 & ap_const_lv1_0);
    tmp_s_fu_1131_p3 <= (select_ln42_reg_1486_pp1_iter1_reg & ap_const_lv2_0);
    trunc_ln30_1_fu_886_p1 <= select_ln26_fu_870_p3(2 - 1 downto 0);
    trunc_ln30_fu_836_p1 <= select_ln24_1_fu_828_p3(4 - 1 downto 0);
    trunc_ln38_fu_977_p1 <= select_ln38_1_fu_969_p3(2 - 1 downto 0);
    trunc_ln46_1_fu_1029_p1 <= add_ln40_fu_1023_p2(2 - 1 downto 0);
    trunc_ln46_fu_981_p1 <= L_chi_reg_676(2 - 1 downto 0);
    trunc_ln61_fu_1366_p1 <= select_ln57_fu_1324_p3(2 - 1 downto 0);

    w_0_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_0_0_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_0_address0 <= grp_convolution_fu_764_w_address0;
        else 
            w_0_0_address0 <= "XXXX";
        end if; 
    end process;


    w_0_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_0_ce0 <= grp_convolution_fu_764_w_ce0;
        else 
            w_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_0_ce1 <= grp_convolution_fu_764_w_ce1;
        else 
            w_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_0) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_0_we0 <= ap_const_logic_1;
        else 
            w_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w1_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_0_1_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_1_address0 <= grp_convolution_fu_764_w1_address0;
        else 
            w_0_1_address0 <= "XXXX";
        end if; 
    end process;


    w_0_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w1_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_1_ce0 <= grp_convolution_fu_764_w1_ce0;
        else 
            w_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_1_ce1 <= grp_convolution_fu_764_w1_ce1;
        else 
            w_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_1) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_1_we0 <= ap_const_logic_1;
        else 
            w_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w2_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_0_2_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_2_address0 <= grp_convolution_fu_764_w2_address0;
        else 
            w_0_2_address0 <= "XXXX";
        end if; 
    end process;


    w_0_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w2_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_2_ce0 <= grp_convolution_fu_764_w2_ce0;
        else 
            w_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w2_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_2_ce1 <= grp_convolution_fu_764_w2_ce1;
        else 
            w_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_2) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_2_we0 <= ap_const_logic_1;
        else 
            w_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w3_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_0_3_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_3_address0 <= grp_convolution_fu_764_w3_address0;
        else 
            w_0_3_address0 <= "XXXX";
        end if; 
    end process;


    w_0_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w3_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_3_ce0 <= grp_convolution_fu_764_w3_ce0;
        else 
            w_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w3_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_0_3_ce1 <= grp_convolution_fu_764_w3_ce1;
        else 
            w_0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_0_3_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_3) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_0_3_we0 <= ap_const_logic_1;
        else 
            w_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w14_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_1_0_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_0_address0 <= grp_convolution_fu_764_w14_address0;
        else 
            w_1_0_address0 <= "XXXX";
        end if; 
    end process;


    w_1_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w14_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_0_ce0 <= grp_convolution_fu_764_w14_ce0;
        else 
            w_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w14_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_0_ce1 <= grp_convolution_fu_764_w14_ce1;
        else 
            w_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_0) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_0_we0 <= ap_const_logic_1;
        else 
            w_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w15_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_1_1_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_1_address0 <= grp_convolution_fu_764_w15_address0;
        else 
            w_1_1_address0 <= "XXXX";
        end if; 
    end process;


    w_1_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w15_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_1_ce0 <= grp_convolution_fu_764_w15_ce0;
        else 
            w_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w15_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_1_ce1 <= grp_convolution_fu_764_w15_ce1;
        else 
            w_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_1) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_1_we0 <= ap_const_logic_1;
        else 
            w_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w16_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_1_2_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_2_address0 <= grp_convolution_fu_764_w16_address0;
        else 
            w_1_2_address0 <= "XXXX";
        end if; 
    end process;


    w_1_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w16_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_2_ce0 <= grp_convolution_fu_764_w16_ce0;
        else 
            w_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w16_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_2_ce1 <= grp_convolution_fu_764_w16_ce1;
        else 
            w_1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_2) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_2_we0 <= ap_const_logic_1;
        else 
            w_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w17_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_1_3_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_3_address0 <= grp_convolution_fu_764_w17_address0;
        else 
            w_1_3_address0 <= "XXXX";
        end if; 
    end process;


    w_1_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w17_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_3_ce0 <= grp_convolution_fu_764_w17_ce0;
        else 
            w_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w17_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_1_3_ce1 <= grp_convolution_fu_764_w17_ce1;
        else 
            w_1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_1_3_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_3) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_1_3_we0 <= ap_const_logic_1;
        else 
            w_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w28_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_2_0_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_0_address0 <= grp_convolution_fu_764_w28_address0;
        else 
            w_2_0_address0 <= "XXXX";
        end if; 
    end process;


    w_2_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w28_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_0_ce0 <= grp_convolution_fu_764_w28_ce0;
        else 
            w_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w28_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_0_ce1 <= grp_convolution_fu_764_w28_ce1;
        else 
            w_2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_0) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_0_we0 <= ap_const_logic_1;
        else 
            w_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w29_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_2_1_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_1_address0 <= grp_convolution_fu_764_w29_address0;
        else 
            w_2_1_address0 <= "XXXX";
        end if; 
    end process;


    w_2_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w29_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_1_ce0 <= grp_convolution_fu_764_w29_ce0;
        else 
            w_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w29_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_1_ce1 <= grp_convolution_fu_764_w29_ce1;
        else 
            w_2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_1) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_1_we0 <= ap_const_logic_1;
        else 
            w_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w210_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_2_2_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_2_address0 <= grp_convolution_fu_764_w210_address0;
        else 
            w_2_2_address0 <= "XXXX";
        end if; 
    end process;


    w_2_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w210_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_2_ce0 <= grp_convolution_fu_764_w210_ce0;
        else 
            w_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w210_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_2_ce1 <= grp_convolution_fu_764_w210_ce1;
        else 
            w_2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_2) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_2_we0 <= ap_const_logic_1;
        else 
            w_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w211_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_2_3_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_3_address0 <= grp_convolution_fu_764_w211_address0;
        else 
            w_2_3_address0 <= "XXXX";
        end if; 
    end process;


    w_2_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w211_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_3_ce0 <= grp_convolution_fu_764_w211_ce0;
        else 
            w_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w211_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_2_3_ce1 <= grp_convolution_fu_764_w211_ce1;
        else 
            w_2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_2_3_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_3) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_2_3_we0 <= ap_const_logic_1;
        else 
            w_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w312_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_3_0_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_0_address0 <= grp_convolution_fu_764_w312_address0;
        else 
            w_3_0_address0 <= "XXXX";
        end if; 
    end process;


    w_3_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w312_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_0_ce0 <= grp_convolution_fu_764_w312_ce0;
        else 
            w_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_0_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w312_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_0_ce1 <= grp_convolution_fu_764_w312_ce1;
        else 
            w_3_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_0) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_0_we0 <= ap_const_logic_1;
        else 
            w_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w313_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_3_1_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_1_address0 <= grp_convolution_fu_764_w313_address0;
        else 
            w_3_1_address0 <= "XXXX";
        end if; 
    end process;


    w_3_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w313_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_1_ce0 <= grp_convolution_fu_764_w313_ce0;
        else 
            w_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_1_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w313_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_1_ce1 <= grp_convolution_fu_764_w313_ce1;
        else 
            w_3_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_1) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_1_we0 <= ap_const_logic_1;
        else 
            w_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w314_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_3_2_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_2_address0 <= grp_convolution_fu_764_w314_address0;
        else 
            w_3_2_address0 <= "XXXX";
        end if; 
    end process;


    w_3_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w314_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_2_ce0 <= grp_convolution_fu_764_w314_ce0;
        else 
            w_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_2_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w314_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_2_ce1 <= grp_convolution_fu_764_w314_ce1;
        else 
            w_3_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_2) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_2_we0 <= ap_const_logic_1;
        else 
            w_3_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w315_address0, zext_ln46_fu_1138_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            w_3_3_address0 <= zext_ln46_fu_1138_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_3_address0 <= grp_convolution_fu_764_w315_address0;
        else 
            w_3_3_address0 <= "XXXX";
        end if; 
    end process;


    w_3_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state22, grp_convolution_fu_764_w315_ce0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_3_ce0 <= grp_convolution_fu_764_w315_ce0;
        else 
            w_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_3_ce1_assign_proc : process(ap_CS_fsm_state22, grp_convolution_fu_764_w315_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_3_3_ce1 <= grp_convolution_fu_764_w315_ce1;
        else 
            w_3_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_3_3_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln38_reg_1473_pp1_iter1_reg, select_ln40_reg_1477_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (select_ln40_reg_1477_pp1_iter1_reg = ap_const_lv2_3) and (trunc_ln38_reg_1473_pp1_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_3_3_we0 <= ap_const_logic_1;
        else 
            w_3_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln24_fu_840_p2 <= (icmp_ln26_fu_814_p2 xor ap_const_lv1_1);
    xor_ln38_fu_993_p2 <= (icmp_ln40_fu_955_p2 xor ap_const_lv1_1);
    xor_ln40_fu_1041_p2 <= (icmp_ln42_fu_1011_p2 xor ap_const_lv1_1);
    xor_ln55_fu_1294_p2 <= (icmp_ln57_fu_1212_p2 xor ap_const_lv1_1);
    zext_ln30_1_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_reg_1446),64));
    zext_ln30_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_reg_1426),8));
    zext_ln46_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1131_p3),64));
    zext_ln61_1_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(L_co_reg_742),8));
    zext_ln61_2_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1234_p3),8));
    zext_ln61_3_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1268_p3),8));
    zext_ln61_4_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_1312_p2),8));
    zext_ln61_5_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_1342_p3),64));
    zext_ln61_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1172_p3),8));
end behav;
