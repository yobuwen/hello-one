// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_acc4t_conv_acc4t,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.301600,HLS_SYN_LAT=2567,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=213085,HLS_SYN_LUT=102678,HLS_VERSION=2020_2}" *)

module conv_acc4t (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_In_ddr_AWVALID,
        m_axi_In_ddr_AWREADY,
        m_axi_In_ddr_AWADDR,
        m_axi_In_ddr_AWID,
        m_axi_In_ddr_AWLEN,
        m_axi_In_ddr_AWSIZE,
        m_axi_In_ddr_AWBURST,
        m_axi_In_ddr_AWLOCK,
        m_axi_In_ddr_AWCACHE,
        m_axi_In_ddr_AWPROT,
        m_axi_In_ddr_AWQOS,
        m_axi_In_ddr_AWREGION,
        m_axi_In_ddr_AWUSER,
        m_axi_In_ddr_WVALID,
        m_axi_In_ddr_WREADY,
        m_axi_In_ddr_WDATA,
        m_axi_In_ddr_WSTRB,
        m_axi_In_ddr_WLAST,
        m_axi_In_ddr_WID,
        m_axi_In_ddr_WUSER,
        m_axi_In_ddr_ARVALID,
        m_axi_In_ddr_ARREADY,
        m_axi_In_ddr_ARADDR,
        m_axi_In_ddr_ARID,
        m_axi_In_ddr_ARLEN,
        m_axi_In_ddr_ARSIZE,
        m_axi_In_ddr_ARBURST,
        m_axi_In_ddr_ARLOCK,
        m_axi_In_ddr_ARCACHE,
        m_axi_In_ddr_ARPROT,
        m_axi_In_ddr_ARQOS,
        m_axi_In_ddr_ARREGION,
        m_axi_In_ddr_ARUSER,
        m_axi_In_ddr_RVALID,
        m_axi_In_ddr_RREADY,
        m_axi_In_ddr_RDATA,
        m_axi_In_ddr_RLAST,
        m_axi_In_ddr_RID,
        m_axi_In_ddr_RUSER,
        m_axi_In_ddr_RRESP,
        m_axi_In_ddr_BVALID,
        m_axi_In_ddr_BREADY,
        m_axi_In_ddr_BRESP,
        m_axi_In_ddr_BID,
        m_axi_In_ddr_BUSER,
        m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY,
        m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY,
        m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID,
        m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA,
        m_axi_W_ddr_RLAST,
        m_axi_W_ddr_RID,
        m_axi_W_ddr_RUSER,
        m_axi_W_ddr_RRESP,
        m_axi_W_ddr_BVALID,
        m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP,
        m_axi_W_ddr_BID,
        m_axi_W_ddr_BUSER,
        m_axi_Out_ddr_AWVALID,
        m_axi_Out_ddr_AWREADY,
        m_axi_Out_ddr_AWADDR,
        m_axi_Out_ddr_AWID,
        m_axi_Out_ddr_AWLEN,
        m_axi_Out_ddr_AWSIZE,
        m_axi_Out_ddr_AWBURST,
        m_axi_Out_ddr_AWLOCK,
        m_axi_Out_ddr_AWCACHE,
        m_axi_Out_ddr_AWPROT,
        m_axi_Out_ddr_AWQOS,
        m_axi_Out_ddr_AWREGION,
        m_axi_Out_ddr_AWUSER,
        m_axi_Out_ddr_WVALID,
        m_axi_Out_ddr_WREADY,
        m_axi_Out_ddr_WDATA,
        m_axi_Out_ddr_WSTRB,
        m_axi_Out_ddr_WLAST,
        m_axi_Out_ddr_WID,
        m_axi_Out_ddr_WUSER,
        m_axi_Out_ddr_ARVALID,
        m_axi_Out_ddr_ARREADY,
        m_axi_Out_ddr_ARADDR,
        m_axi_Out_ddr_ARID,
        m_axi_Out_ddr_ARLEN,
        m_axi_Out_ddr_ARSIZE,
        m_axi_Out_ddr_ARBURST,
        m_axi_Out_ddr_ARLOCK,
        m_axi_Out_ddr_ARCACHE,
        m_axi_Out_ddr_ARPROT,
        m_axi_Out_ddr_ARQOS,
        m_axi_Out_ddr_ARREGION,
        m_axi_Out_ddr_ARUSER,
        m_axi_Out_ddr_RVALID,
        m_axi_Out_ddr_RREADY,
        m_axi_Out_ddr_RDATA,
        m_axi_Out_ddr_RLAST,
        m_axi_Out_ddr_RID,
        m_axi_Out_ddr_RUSER,
        m_axi_Out_ddr_RRESP,
        m_axi_Out_ddr_BVALID,
        m_axi_Out_ddr_BREADY,
        m_axi_Out_ddr_BRESP,
        m_axi_Out_ddr_BID,
        m_axi_Out_ddr_BUSER
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_pp0_stage0 = 24'd128;
parameter    ap_ST_fsm_state11 = 24'd256;
parameter    ap_ST_fsm_state12 = 24'd512;
parameter    ap_ST_fsm_state13 = 24'd1024;
parameter    ap_ST_fsm_state14 = 24'd2048;
parameter    ap_ST_fsm_state15 = 24'd4096;
parameter    ap_ST_fsm_state16 = 24'd8192;
parameter    ap_ST_fsm_state17 = 24'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 24'd32768;
parameter    ap_ST_fsm_state21 = 24'd65536;
parameter    ap_ST_fsm_state22 = 24'd131072;
parameter    ap_ST_fsm_pp2_stage0 = 24'd262144;
parameter    ap_ST_fsm_state26 = 24'd524288;
parameter    ap_ST_fsm_state27 = 24'd1048576;
parameter    ap_ST_fsm_state28 = 24'd2097152;
parameter    ap_ST_fsm_state29 = 24'd4194304;
parameter    ap_ST_fsm_state30 = 24'd8388608;
parameter    C_M_AXI_IN_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_IN_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_IN_DDR_USER_VALUE = 0;
parameter    C_M_AXI_IN_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_IN_DDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_W_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_W_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_W_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_W_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_W_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_W_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_W_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_W_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_W_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_W_DDR_USER_VALUE = 0;
parameter    C_M_AXI_W_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_W_DDR_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_ADDR_WIDTH = 64;
parameter    C_M_AXI_OUT_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_OUT_DDR_USER_VALUE = 0;
parameter    C_M_AXI_OUT_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_DDR_CACHE_VALUE = 3;

parameter C_M_AXI_IN_DDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_W_DDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_DDR_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_In_ddr_AWVALID;
input   m_axi_In_ddr_AWREADY;
output  [C_M_AXI_IN_DDR_ADDR_WIDTH - 1:0] m_axi_In_ddr_AWADDR;
output  [C_M_AXI_IN_DDR_ID_WIDTH - 1:0] m_axi_In_ddr_AWID;
output  [7:0] m_axi_In_ddr_AWLEN;
output  [2:0] m_axi_In_ddr_AWSIZE;
output  [1:0] m_axi_In_ddr_AWBURST;
output  [1:0] m_axi_In_ddr_AWLOCK;
output  [3:0] m_axi_In_ddr_AWCACHE;
output  [2:0] m_axi_In_ddr_AWPROT;
output  [3:0] m_axi_In_ddr_AWQOS;
output  [3:0] m_axi_In_ddr_AWREGION;
output  [C_M_AXI_IN_DDR_AWUSER_WIDTH - 1:0] m_axi_In_ddr_AWUSER;
output   m_axi_In_ddr_WVALID;
input   m_axi_In_ddr_WREADY;
output  [C_M_AXI_IN_DDR_DATA_WIDTH - 1:0] m_axi_In_ddr_WDATA;
output  [C_M_AXI_IN_DDR_WSTRB_WIDTH - 1:0] m_axi_In_ddr_WSTRB;
output   m_axi_In_ddr_WLAST;
output  [C_M_AXI_IN_DDR_ID_WIDTH - 1:0] m_axi_In_ddr_WID;
output  [C_M_AXI_IN_DDR_WUSER_WIDTH - 1:0] m_axi_In_ddr_WUSER;
output   m_axi_In_ddr_ARVALID;
input   m_axi_In_ddr_ARREADY;
output  [C_M_AXI_IN_DDR_ADDR_WIDTH - 1:0] m_axi_In_ddr_ARADDR;
output  [C_M_AXI_IN_DDR_ID_WIDTH - 1:0] m_axi_In_ddr_ARID;
output  [7:0] m_axi_In_ddr_ARLEN;
output  [2:0] m_axi_In_ddr_ARSIZE;
output  [1:0] m_axi_In_ddr_ARBURST;
output  [1:0] m_axi_In_ddr_ARLOCK;
output  [3:0] m_axi_In_ddr_ARCACHE;
output  [2:0] m_axi_In_ddr_ARPROT;
output  [3:0] m_axi_In_ddr_ARQOS;
output  [3:0] m_axi_In_ddr_ARREGION;
output  [C_M_AXI_IN_DDR_ARUSER_WIDTH - 1:0] m_axi_In_ddr_ARUSER;
input   m_axi_In_ddr_RVALID;
output   m_axi_In_ddr_RREADY;
input  [C_M_AXI_IN_DDR_DATA_WIDTH - 1:0] m_axi_In_ddr_RDATA;
input   m_axi_In_ddr_RLAST;
input  [C_M_AXI_IN_DDR_ID_WIDTH - 1:0] m_axi_In_ddr_RID;
input  [C_M_AXI_IN_DDR_RUSER_WIDTH - 1:0] m_axi_In_ddr_RUSER;
input  [1:0] m_axi_In_ddr_RRESP;
input   m_axi_In_ddr_BVALID;
output   m_axi_In_ddr_BREADY;
input  [1:0] m_axi_In_ddr_BRESP;
input  [C_M_AXI_IN_DDR_ID_WIDTH - 1:0] m_axi_In_ddr_BID;
input  [C_M_AXI_IN_DDR_BUSER_WIDTH - 1:0] m_axi_In_ddr_BUSER;
output   m_axi_W_ddr_AWVALID;
input   m_axi_W_ddr_AWREADY;
output  [C_M_AXI_W_DDR_ADDR_WIDTH - 1:0] m_axi_W_ddr_AWADDR;
output  [C_M_AXI_W_DDR_ID_WIDTH - 1:0] m_axi_W_ddr_AWID;
output  [7:0] m_axi_W_ddr_AWLEN;
output  [2:0] m_axi_W_ddr_AWSIZE;
output  [1:0] m_axi_W_ddr_AWBURST;
output  [1:0] m_axi_W_ddr_AWLOCK;
output  [3:0] m_axi_W_ddr_AWCACHE;
output  [2:0] m_axi_W_ddr_AWPROT;
output  [3:0] m_axi_W_ddr_AWQOS;
output  [3:0] m_axi_W_ddr_AWREGION;
output  [C_M_AXI_W_DDR_AWUSER_WIDTH - 1:0] m_axi_W_ddr_AWUSER;
output   m_axi_W_ddr_WVALID;
input   m_axi_W_ddr_WREADY;
output  [C_M_AXI_W_DDR_DATA_WIDTH - 1:0] m_axi_W_ddr_WDATA;
output  [C_M_AXI_W_DDR_WSTRB_WIDTH - 1:0] m_axi_W_ddr_WSTRB;
output   m_axi_W_ddr_WLAST;
output  [C_M_AXI_W_DDR_ID_WIDTH - 1:0] m_axi_W_ddr_WID;
output  [C_M_AXI_W_DDR_WUSER_WIDTH - 1:0] m_axi_W_ddr_WUSER;
output   m_axi_W_ddr_ARVALID;
input   m_axi_W_ddr_ARREADY;
output  [C_M_AXI_W_DDR_ADDR_WIDTH - 1:0] m_axi_W_ddr_ARADDR;
output  [C_M_AXI_W_DDR_ID_WIDTH - 1:0] m_axi_W_ddr_ARID;
output  [7:0] m_axi_W_ddr_ARLEN;
output  [2:0] m_axi_W_ddr_ARSIZE;
output  [1:0] m_axi_W_ddr_ARBURST;
output  [1:0] m_axi_W_ddr_ARLOCK;
output  [3:0] m_axi_W_ddr_ARCACHE;
output  [2:0] m_axi_W_ddr_ARPROT;
output  [3:0] m_axi_W_ddr_ARQOS;
output  [3:0] m_axi_W_ddr_ARREGION;
output  [C_M_AXI_W_DDR_ARUSER_WIDTH - 1:0] m_axi_W_ddr_ARUSER;
input   m_axi_W_ddr_RVALID;
output   m_axi_W_ddr_RREADY;
input  [C_M_AXI_W_DDR_DATA_WIDTH - 1:0] m_axi_W_ddr_RDATA;
input   m_axi_W_ddr_RLAST;
input  [C_M_AXI_W_DDR_ID_WIDTH - 1:0] m_axi_W_ddr_RID;
input  [C_M_AXI_W_DDR_RUSER_WIDTH - 1:0] m_axi_W_ddr_RUSER;
input  [1:0] m_axi_W_ddr_RRESP;
input   m_axi_W_ddr_BVALID;
output   m_axi_W_ddr_BREADY;
input  [1:0] m_axi_W_ddr_BRESP;
input  [C_M_AXI_W_DDR_ID_WIDTH - 1:0] m_axi_W_ddr_BID;
input  [C_M_AXI_W_DDR_BUSER_WIDTH - 1:0] m_axi_W_ddr_BUSER;
output   m_axi_Out_ddr_AWVALID;
input   m_axi_Out_ddr_AWREADY;
output  [C_M_AXI_OUT_DDR_ADDR_WIDTH - 1:0] m_axi_Out_ddr_AWADDR;
output  [C_M_AXI_OUT_DDR_ID_WIDTH - 1:0] m_axi_Out_ddr_AWID;
output  [7:0] m_axi_Out_ddr_AWLEN;
output  [2:0] m_axi_Out_ddr_AWSIZE;
output  [1:0] m_axi_Out_ddr_AWBURST;
output  [1:0] m_axi_Out_ddr_AWLOCK;
output  [3:0] m_axi_Out_ddr_AWCACHE;
output  [2:0] m_axi_Out_ddr_AWPROT;
output  [3:0] m_axi_Out_ddr_AWQOS;
output  [3:0] m_axi_Out_ddr_AWREGION;
output  [C_M_AXI_OUT_DDR_AWUSER_WIDTH - 1:0] m_axi_Out_ddr_AWUSER;
output   m_axi_Out_ddr_WVALID;
input   m_axi_Out_ddr_WREADY;
output  [C_M_AXI_OUT_DDR_DATA_WIDTH - 1:0] m_axi_Out_ddr_WDATA;
output  [C_M_AXI_OUT_DDR_WSTRB_WIDTH - 1:0] m_axi_Out_ddr_WSTRB;
output   m_axi_Out_ddr_WLAST;
output  [C_M_AXI_OUT_DDR_ID_WIDTH - 1:0] m_axi_Out_ddr_WID;
output  [C_M_AXI_OUT_DDR_WUSER_WIDTH - 1:0] m_axi_Out_ddr_WUSER;
output   m_axi_Out_ddr_ARVALID;
input   m_axi_Out_ddr_ARREADY;
output  [C_M_AXI_OUT_DDR_ADDR_WIDTH - 1:0] m_axi_Out_ddr_ARADDR;
output  [C_M_AXI_OUT_DDR_ID_WIDTH - 1:0] m_axi_Out_ddr_ARID;
output  [7:0] m_axi_Out_ddr_ARLEN;
output  [2:0] m_axi_Out_ddr_ARSIZE;
output  [1:0] m_axi_Out_ddr_ARBURST;
output  [1:0] m_axi_Out_ddr_ARLOCK;
output  [3:0] m_axi_Out_ddr_ARCACHE;
output  [2:0] m_axi_Out_ddr_ARPROT;
output  [3:0] m_axi_Out_ddr_ARQOS;
output  [3:0] m_axi_Out_ddr_ARREGION;
output  [C_M_AXI_OUT_DDR_ARUSER_WIDTH - 1:0] m_axi_Out_ddr_ARUSER;
input   m_axi_Out_ddr_RVALID;
output   m_axi_Out_ddr_RREADY;
input  [C_M_AXI_OUT_DDR_DATA_WIDTH - 1:0] m_axi_Out_ddr_RDATA;
input   m_axi_Out_ddr_RLAST;
input  [C_M_AXI_OUT_DDR_ID_WIDTH - 1:0] m_axi_Out_ddr_RID;
input  [C_M_AXI_OUT_DDR_RUSER_WIDTH - 1:0] m_axi_Out_ddr_RUSER;
input  [1:0] m_axi_Out_ddr_RRESP;
input   m_axi_Out_ddr_BVALID;
output   m_axi_Out_ddr_BREADY;
input  [1:0] m_axi_Out_ddr_BRESP;
input  [C_M_AXI_OUT_DDR_ID_WIDTH - 1:0] m_axi_Out_ddr_BID;
input  [C_M_AXI_OUT_DDR_BUSER_WIDTH - 1:0] m_axi_Out_ddr_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] in_0_address0;
reg    in_0_ce0;
reg    in_0_we0;
wire   [31:0] in_0_q0;
reg    in_0_ce1;
wire   [31:0] in_0_q1;
reg   [7:0] in_1_address0;
reg    in_1_ce0;
reg    in_1_we0;
wire   [31:0] in_1_q0;
reg    in_1_ce1;
wire   [31:0] in_1_q1;
reg   [7:0] in_2_address0;
reg    in_2_ce0;
reg    in_2_we0;
wire   [31:0] in_2_q0;
reg    in_2_ce1;
wire   [31:0] in_2_q1;
reg   [7:0] in_3_address0;
reg    in_3_ce0;
reg    in_3_we0;
wire   [31:0] in_3_q0;
reg    in_3_ce1;
wire   [31:0] in_3_q1;
reg    In_ddr_blk_n_AR;
reg    In_ddr_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln24_reg_1412;
reg    W_ddr_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    W_ddr_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln38_reg_1464;
reg    Out_ddr_blk_n_AW;
wire    ap_CS_fsm_state21;
reg    Out_ddr_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln55_reg_1531;
reg   [0:0] icmp_ln55_reg_1531_pp2_iter1_reg;
reg    Out_ddr_blk_n_B;
wire    ap_CS_fsm_state30;
wire    In_ddr_AWREADY;
wire    In_ddr_WREADY;
reg    In_ddr_ARVALID;
wire    In_ddr_ARREADY;
wire    In_ddr_RVALID;
reg    In_ddr_RREADY;
wire   [31:0] In_ddr_RDATA;
wire    In_ddr_RLAST;
wire   [0:0] In_ddr_RID;
wire   [0:0] In_ddr_RUSER;
wire   [1:0] In_ddr_RRESP;
wire    In_ddr_BVALID;
wire   [1:0] In_ddr_BRESP;
wire   [0:0] In_ddr_BID;
wire   [0:0] In_ddr_BUSER;
wire    W_ddr_AWREADY;
wire    W_ddr_WREADY;
reg    W_ddr_ARVALID;
wire    W_ddr_ARREADY;
wire    W_ddr_RVALID;
reg    W_ddr_RREADY;
wire   [31:0] W_ddr_RDATA;
wire    W_ddr_RLAST;
wire   [0:0] W_ddr_RID;
wire   [0:0] W_ddr_RUSER;
wire   [1:0] W_ddr_RRESP;
wire    W_ddr_BVALID;
wire   [1:0] W_ddr_BRESP;
wire   [0:0] W_ddr_BID;
wire   [0:0] W_ddr_BUSER;
reg    Out_ddr_AWVALID;
wire    Out_ddr_AWREADY;
reg    Out_ddr_WVALID;
wire    Out_ddr_WREADY;
wire   [31:0] Out_ddr_WDATA;
wire    Out_ddr_ARREADY;
wire    Out_ddr_RVALID;
wire   [31:0] Out_ddr_RDATA;
wire    Out_ddr_RLAST;
wire   [0:0] Out_ddr_RID;
wire   [0:0] Out_ddr_RUSER;
wire   [1:0] Out_ddr_RRESP;
wire    Out_ddr_BVALID;
reg    Out_ddr_BREADY;
wire   [1:0] Out_ddr_BRESP;
wire   [0:0] Out_ddr_BID;
wire   [0:0] Out_ddr_BUSER;
reg   [10:0] indvar_flatten17_reg_588;
reg   [4:0] L_ri_reg_599;
reg   [7:0] indvar_flatten_reg_610;
reg   [4:0] L_ci_reg_621;
reg   [2:0] L_chi_1_reg_632;
reg   [8:0] indvar_flatten59_reg_643;
reg   [2:0] L_cho_reg_654;
reg   [7:0] indvar_flatten37_reg_665;
reg   [2:0] L_chi_reg_676;
reg   [5:0] indvar_flatten25_reg_687;
reg   [2:0] L_kr_reg_698;
reg   [9:0] indvar_flatten101_reg_709;
reg   [3:0] L_ro_reg_720;
reg   [6:0] indvar_flatten71_reg_731;
reg   [3:0] L_co_reg_742;
reg   [2:0] L_cho_1_reg_753;
wire   [10:0] add_ln24_1_fu_796_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_802_p2;
wire   [4:0] select_ln24_1_fu_828_p3;
reg   [4:0] select_ln24_1_reg_1416;
wire   [3:0] trunc_ln30_fu_836_p1;
reg   [3:0] trunc_ln30_reg_1421;
wire   [4:0] select_ln26_1_fu_878_p3;
reg   [4:0] select_ln26_1_reg_1426;
wire   [1:0] trunc_ln30_1_fu_886_p1;
reg   [1:0] trunc_ln30_1_reg_1432;
reg   [1:0] trunc_ln30_1_reg_1432_pp0_iter1_reg;
wire   [2:0] add_ln28_fu_890_p2;
wire   [7:0] select_ln26_2_fu_902_p3;
wire   [7:0] add_ln30_fu_920_p2;
reg   [7:0] add_ln30_reg_1446;
wire   [31:0] bitcast_ln30_fu_926_p1;
reg   [31:0] bitcast_ln30_reg_1451;
wire   [8:0] add_ln38_1_fu_937_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln38_fu_943_p2;
wire   [2:0] select_ln38_1_fu_969_p3;
reg   [2:0] select_ln38_1_reg_1468;
wire   [1:0] trunc_ln38_fu_977_p1;
reg   [1:0] trunc_ln38_reg_1473;
reg   [1:0] trunc_ln38_reg_1473_pp1_iter1_reg;
wire   [1:0] select_ln40_fu_1033_p3;
reg   [1:0] select_ln40_reg_1477;
reg   [1:0] select_ln40_reg_1477_pp1_iter1_reg;
wire   [2:0] select_ln40_1_fu_1059_p3;
wire   [2:0] select_ln42_fu_1079_p3;
reg   [2:0] select_ln42_reg_1486;
reg   [2:0] select_ln42_reg_1486_pp1_iter1_reg;
wire   [2:0] add_ln44_fu_1087_p2;
wire   [5:0] select_ln42_1_fu_1105_p3;
wire   [7:0] select_ln40_2_fu_1119_p3;
wire   [31:0] bitcast_ln46_fu_1127_p1;
reg   [31:0] bitcast_ln46_reg_1506;
wire   [9:0] add_ln55_1_fu_1158_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_state25_pp2_stage0_iter2;
reg    ap_block_state25_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln55_fu_1200_p2;
wire   [3:0] select_ln55_1_fu_1252_p3;
reg   [3:0] select_ln55_1_reg_1535;
wire   [3:0] select_ln57_2_fu_1358_p3;
wire   [1:0] trunc_ln61_fu_1366_p1;
reg   [1:0] trunc_ln61_reg_1565;
wire   [2:0] add_ln59_fu_1370_p2;
wire   [6:0] select_ln57_3_fu_1382_p3;
wire   [31:0] tmp_fu_1390_p6;
reg   [31:0] tmp_reg_1580;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state22;
wire    grp_convolution_fu_764_ap_ready;
wire    grp_convolution_fu_764_ap_done;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter1;
reg   [7:0] out_0_address0;
reg    out_0_ce0;
reg    out_0_we0;
wire   [31:0] out_0_q0;
reg    out_0_ce1;
reg    out_0_we1;
wire   [31:0] out_0_q1;
reg   [7:0] out_1_address0;
reg    out_1_ce0;
reg    out_1_we0;
wire   [31:0] out_1_q0;
reg    out_1_ce1;
reg    out_1_we1;
wire   [31:0] out_1_q1;
reg   [7:0] out_2_address0;
reg    out_2_ce0;
reg    out_2_we0;
wire   [31:0] out_2_q0;
reg    out_2_ce1;
reg    out_2_we1;
wire   [31:0] out_2_q1;
reg   [7:0] out_3_address0;
reg    out_3_ce0;
reg    out_3_we0;
wire   [31:0] out_3_q0;
reg    out_3_ce1;
reg    out_3_we1;
wire   [31:0] out_3_q1;
reg   [3:0] w_0_0_address0;
reg    w_0_0_ce0;
reg    w_0_0_we0;
wire   [31:0] w_0_0_q0;
reg    w_0_0_ce1;
wire   [31:0] w_0_0_q1;
reg   [3:0] w_0_1_address0;
reg    w_0_1_ce0;
reg    w_0_1_we0;
wire   [31:0] w_0_1_q0;
reg    w_0_1_ce1;
wire   [31:0] w_0_1_q1;
reg   [3:0] w_0_2_address0;
reg    w_0_2_ce0;
reg    w_0_2_we0;
wire   [31:0] w_0_2_q0;
reg    w_0_2_ce1;
wire   [31:0] w_0_2_q1;
reg   [3:0] w_0_3_address0;
reg    w_0_3_ce0;
reg    w_0_3_we0;
wire   [31:0] w_0_3_q0;
reg    w_0_3_ce1;
wire   [31:0] w_0_3_q1;
reg   [3:0] w_1_0_address0;
reg    w_1_0_ce0;
reg    w_1_0_we0;
wire   [31:0] w_1_0_q0;
reg    w_1_0_ce1;
wire   [31:0] w_1_0_q1;
reg   [3:0] w_1_1_address0;
reg    w_1_1_ce0;
reg    w_1_1_we0;
wire   [31:0] w_1_1_q0;
reg    w_1_1_ce1;
wire   [31:0] w_1_1_q1;
reg   [3:0] w_1_2_address0;
reg    w_1_2_ce0;
reg    w_1_2_we0;
wire   [31:0] w_1_2_q0;
reg    w_1_2_ce1;
wire   [31:0] w_1_2_q1;
reg   [3:0] w_1_3_address0;
reg    w_1_3_ce0;
reg    w_1_3_we0;
wire   [31:0] w_1_3_q0;
reg    w_1_3_ce1;
wire   [31:0] w_1_3_q1;
reg   [3:0] w_2_0_address0;
reg    w_2_0_ce0;
reg    w_2_0_we0;
wire   [31:0] w_2_0_q0;
reg    w_2_0_ce1;
wire   [31:0] w_2_0_q1;
reg   [3:0] w_2_1_address0;
reg    w_2_1_ce0;
reg    w_2_1_we0;
wire   [31:0] w_2_1_q0;
reg    w_2_1_ce1;
wire   [31:0] w_2_1_q1;
reg   [3:0] w_2_2_address0;
reg    w_2_2_ce0;
reg    w_2_2_we0;
wire   [31:0] w_2_2_q0;
reg    w_2_2_ce1;
wire   [31:0] w_2_2_q1;
reg   [3:0] w_2_3_address0;
reg    w_2_3_ce0;
reg    w_2_3_we0;
wire   [31:0] w_2_3_q0;
reg    w_2_3_ce1;
wire   [31:0] w_2_3_q1;
reg   [3:0] w_3_0_address0;
reg    w_3_0_ce0;
reg    w_3_0_we0;
wire   [31:0] w_3_0_q0;
reg    w_3_0_ce1;
wire   [31:0] w_3_0_q1;
reg   [3:0] w_3_1_address0;
reg    w_3_1_ce0;
reg    w_3_1_we0;
wire   [31:0] w_3_1_q0;
reg    w_3_1_ce1;
wire   [31:0] w_3_1_q1;
reg   [3:0] w_3_2_address0;
reg    w_3_2_ce0;
reg    w_3_2_we0;
wire   [31:0] w_3_2_q0;
reg    w_3_2_ce1;
wire   [31:0] w_3_2_q1;
reg   [3:0] w_3_3_address0;
reg    w_3_3_ce0;
reg    w_3_3_we0;
wire   [31:0] w_3_3_q0;
reg    w_3_3_ce1;
wire   [31:0] w_3_3_q1;
wire    grp_convolution_fu_764_ap_start;
wire    grp_convolution_fu_764_ap_idle;
wire   [3:0] grp_convolution_fu_764_w_address0;
wire    grp_convolution_fu_764_w_ce0;
wire   [3:0] grp_convolution_fu_764_w_address1;
wire    grp_convolution_fu_764_w_ce1;
wire   [3:0] grp_convolution_fu_764_w1_address0;
wire    grp_convolution_fu_764_w1_ce0;
wire   [3:0] grp_convolution_fu_764_w1_address1;
wire    grp_convolution_fu_764_w1_ce1;
wire   [3:0] grp_convolution_fu_764_w2_address0;
wire    grp_convolution_fu_764_w2_ce0;
wire   [3:0] grp_convolution_fu_764_w2_address1;
wire    grp_convolution_fu_764_w2_ce1;
wire   [3:0] grp_convolution_fu_764_w3_address0;
wire    grp_convolution_fu_764_w3_ce0;
wire   [3:0] grp_convolution_fu_764_w3_address1;
wire    grp_convolution_fu_764_w3_ce1;
wire   [3:0] grp_convolution_fu_764_w14_address0;
wire    grp_convolution_fu_764_w14_ce0;
wire   [3:0] grp_convolution_fu_764_w14_address1;
wire    grp_convolution_fu_764_w14_ce1;
wire   [3:0] grp_convolution_fu_764_w15_address0;
wire    grp_convolution_fu_764_w15_ce0;
wire   [3:0] grp_convolution_fu_764_w15_address1;
wire    grp_convolution_fu_764_w15_ce1;
wire   [3:0] grp_convolution_fu_764_w16_address0;
wire    grp_convolution_fu_764_w16_ce0;
wire   [3:0] grp_convolution_fu_764_w16_address1;
wire    grp_convolution_fu_764_w16_ce1;
wire   [3:0] grp_convolution_fu_764_w17_address0;
wire    grp_convolution_fu_764_w17_ce0;
wire   [3:0] grp_convolution_fu_764_w17_address1;
wire    grp_convolution_fu_764_w17_ce1;
wire   [3:0] grp_convolution_fu_764_w28_address0;
wire    grp_convolution_fu_764_w28_ce0;
wire   [3:0] grp_convolution_fu_764_w28_address1;
wire    grp_convolution_fu_764_w28_ce1;
wire   [3:0] grp_convolution_fu_764_w29_address0;
wire    grp_convolution_fu_764_w29_ce0;
wire   [3:0] grp_convolution_fu_764_w29_address1;
wire    grp_convolution_fu_764_w29_ce1;
wire   [3:0] grp_convolution_fu_764_w210_address0;
wire    grp_convolution_fu_764_w210_ce0;
wire   [3:0] grp_convolution_fu_764_w210_address1;
wire    grp_convolution_fu_764_w210_ce1;
wire   [3:0] grp_convolution_fu_764_w211_address0;
wire    grp_convolution_fu_764_w211_ce0;
wire   [3:0] grp_convolution_fu_764_w211_address1;
wire    grp_convolution_fu_764_w211_ce1;
wire   [3:0] grp_convolution_fu_764_w312_address0;
wire    grp_convolution_fu_764_w312_ce0;
wire   [3:0] grp_convolution_fu_764_w312_address1;
wire    grp_convolution_fu_764_w312_ce1;
wire   [3:0] grp_convolution_fu_764_w313_address0;
wire    grp_convolution_fu_764_w313_ce0;
wire   [3:0] grp_convolution_fu_764_w313_address1;
wire    grp_convolution_fu_764_w313_ce1;
wire   [3:0] grp_convolution_fu_764_w314_address0;
wire    grp_convolution_fu_764_w314_ce0;
wire   [3:0] grp_convolution_fu_764_w314_address1;
wire    grp_convolution_fu_764_w314_ce1;
wire   [3:0] grp_convolution_fu_764_w315_address0;
wire    grp_convolution_fu_764_w315_ce0;
wire   [3:0] grp_convolution_fu_764_w315_address1;
wire    grp_convolution_fu_764_w315_ce1;
wire   [7:0] grp_convolution_fu_764_out_r_address0;
wire    grp_convolution_fu_764_out_r_ce0;
wire    grp_convolution_fu_764_out_r_we0;
wire   [31:0] grp_convolution_fu_764_out_r_d0;
wire   [7:0] grp_convolution_fu_764_out_r_address1;
wire    grp_convolution_fu_764_out_r_ce1;
wire    grp_convolution_fu_764_out_r_we1;
wire   [31:0] grp_convolution_fu_764_out_r_d1;
wire   [7:0] grp_convolution_fu_764_out4_address0;
wire    grp_convolution_fu_764_out4_ce0;
wire    grp_convolution_fu_764_out4_we0;
wire   [31:0] grp_convolution_fu_764_out4_d0;
wire   [7:0] grp_convolution_fu_764_out4_address1;
wire    grp_convolution_fu_764_out4_ce1;
wire    grp_convolution_fu_764_out4_we1;
wire   [31:0] grp_convolution_fu_764_out4_d1;
wire   [7:0] grp_convolution_fu_764_out5_address0;
wire    grp_convolution_fu_764_out5_ce0;
wire    grp_convolution_fu_764_out5_we0;
wire   [31:0] grp_convolution_fu_764_out5_d0;
wire   [7:0] grp_convolution_fu_764_out5_address1;
wire    grp_convolution_fu_764_out5_ce1;
wire    grp_convolution_fu_764_out5_we1;
wire   [31:0] grp_convolution_fu_764_out5_d1;
wire   [7:0] grp_convolution_fu_764_out6_address0;
wire    grp_convolution_fu_764_out6_ce0;
wire    grp_convolution_fu_764_out6_we0;
wire   [31:0] grp_convolution_fu_764_out6_d0;
wire   [7:0] grp_convolution_fu_764_out6_address1;
wire    grp_convolution_fu_764_out6_ce1;
wire    grp_convolution_fu_764_out6_we1;
wire   [31:0] grp_convolution_fu_764_out6_d1;
wire   [7:0] grp_convolution_fu_764_in_0_address0;
wire    grp_convolution_fu_764_in_0_ce0;
wire   [7:0] grp_convolution_fu_764_in_0_address1;
wire    grp_convolution_fu_764_in_0_ce1;
wire   [7:0] grp_convolution_fu_764_in_1_address0;
wire    grp_convolution_fu_764_in_1_ce0;
wire   [7:0] grp_convolution_fu_764_in_1_address1;
wire    grp_convolution_fu_764_in_1_ce1;
wire   [7:0] grp_convolution_fu_764_in_2_address0;
wire    grp_convolution_fu_764_in_2_ce0;
wire   [7:0] grp_convolution_fu_764_in_2_address1;
wire    grp_convolution_fu_764_in_2_ce1;
wire   [7:0] grp_convolution_fu_764_in_3_address0;
wire    grp_convolution_fu_764_in_3_ce0;
wire   [7:0] grp_convolution_fu_764_in_3_address1;
wire    grp_convolution_fu_764_in_3_ce1;
reg   [4:0] ap_phi_mux_L_ri_phi_fu_603_p4;
reg   [4:0] ap_phi_mux_L_ci_phi_fu_625_p4;
reg   [2:0] ap_phi_mux_L_cho_phi_fu_658_p4;
reg   [3:0] ap_phi_mux_L_ro_phi_fu_724_p4;
reg    grp_convolution_fu_764_ap_start_reg;
wire   [63:0] zext_ln30_1_fu_930_p1;
wire   [63:0] zext_ln46_fu_1138_p1;
wire   [63:0] zext_ln61_5_fu_1350_p1;
wire    ap_block_pp2_stage0_01001;
wire   [0:0] icmp_ln26_fu_814_p2;
wire   [4:0] add_ln24_fu_808_p2;
wire   [0:0] icmp_ln28_fu_846_p2;
wire   [0:0] xor_ln24_fu_840_p2;
wire   [4:0] select_ln24_fu_820_p3;
wire   [0:0] and_ln24_fu_852_p2;
wire   [0:0] or_ln26_fu_864_p2;
wire   [4:0] add_ln26_fu_858_p2;
wire   [2:0] select_ln26_fu_870_p3;
wire   [7:0] add_ln26_1_fu_896_p2;
wire   [7:0] tmp_50_cast_fu_910_p3;
wire   [7:0] zext_ln30_fu_917_p1;
wire   [0:0] icmp_ln40_fu_955_p2;
wire   [2:0] add_ln38_fu_949_p2;
wire   [1:0] trunc_ln46_fu_981_p1;
wire   [0:0] icmp_ln44_fu_999_p2;
wire   [0:0] xor_ln38_fu_993_p2;
wire   [0:0] icmp_ln42_fu_1011_p2;
wire   [2:0] select_ln38_fu_961_p3;
wire   [2:0] add_ln40_fu_1023_p2;
wire   [0:0] and_ln38_1_fu_1017_p2;
wire   [1:0] trunc_ln46_1_fu_1029_p1;
wire   [1:0] select_ln38_2_fu_985_p3;
wire   [0:0] xor_ln40_fu_1041_p2;
wire   [0:0] and_ln38_fu_1005_p2;
wire   [0:0] or_ln40_fu_1047_p2;
wire   [0:0] and_ln40_fu_1053_p2;
wire   [0:0] or_ln42_fu_1067_p2;
wire   [0:0] or_ln42_2_fu_1073_p2;
wire   [0:0] or_ln42_1_fu_1099_p2;
wire   [5:0] add_ln42_fu_1093_p2;
wire   [7:0] add_ln40_1_fu_1113_p2;
wire   [4:0] tmp_s_fu_1131_p3;
wire   [4:0] tmp_49_fu_1172_p3;
wire   [7:0] tmp_48_fu_1164_p3;
wire   [7:0] zext_ln61_fu_1180_p1;
wire   [7:0] sub_ln61_fu_1184_p2;
wire   [7:0] zext_ln61_1_fu_1190_p1;
wire   [0:0] icmp_ln57_fu_1212_p2;
wire   [3:0] add_ln55_fu_1206_p2;
wire   [4:0] tmp_51_fu_1234_p3;
wire   [7:0] tmp_50_fu_1226_p3;
wire   [7:0] zext_ln61_2_fu_1242_p1;
wire   [4:0] tmp_1_fu_1268_p3;
wire   [7:0] p_shl_cast_fu_1260_p3;
wire   [7:0] zext_ln61_3_fu_1276_p1;
wire   [7:0] sub_ln61_1_fu_1246_p2;
wire   [7:0] add_ln61_fu_1194_p2;
wire   [0:0] icmp_ln59_fu_1300_p2;
wire   [0:0] xor_ln55_fu_1294_p2;
wire   [3:0] select_ln55_fu_1218_p3;
wire   [0:0] and_ln55_fu_1306_p2;
wire   [0:0] or_ln57_fu_1318_p2;
wire   [3:0] add_ln57_fu_1312_p2;
wire   [7:0] sub_ln61_2_fu_1280_p2;
wire   [7:0] zext_ln61_4_fu_1332_p1;
wire   [7:0] add_ln61_1_fu_1336_p2;
wire   [7:0] select_ln55_2_fu_1286_p3;
wire   [7:0] select_ln57_1_fu_1342_p3;
wire   [2:0] select_ln57_fu_1324_p3;
wire   [6:0] add_ln57_1_fu_1376_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_convolution_fu_764_ap_start_reg = 1'b0;
end

conv_acc4t_in_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
in_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_0_address0),
    .ce0(in_0_ce0),
    .we0(in_0_we0),
    .d0(bitcast_ln30_reg_1451),
    .q0(in_0_q0),
    .address1(grp_convolution_fu_764_in_0_address1),
    .ce1(in_0_ce1),
    .q1(in_0_q1)
);

conv_acc4t_in_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
in_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_1_address0),
    .ce0(in_1_ce0),
    .we0(in_1_we0),
    .d0(bitcast_ln30_reg_1451),
    .q0(in_1_q0),
    .address1(grp_convolution_fu_764_in_1_address1),
    .ce1(in_1_ce1),
    .q1(in_1_q1)
);

conv_acc4t_in_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
in_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_2_address0),
    .ce0(in_2_ce0),
    .we0(in_2_we0),
    .d0(bitcast_ln30_reg_1451),
    .q0(in_2_q0),
    .address1(grp_convolution_fu_764_in_2_address1),
    .ce1(in_2_ce1),
    .q1(in_2_q1)
);

conv_acc4t_in_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
in_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_3_address0),
    .ce0(in_3_ce0),
    .we0(in_3_we0),
    .d0(bitcast_ln30_reg_1451),
    .q0(in_3_q0),
    .address1(grp_convolution_fu_764_in_3_address1),
    .ce1(in_3_ce1),
    .q1(in_3_q1)
);

conv_acc4t_In_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_IN_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_IN_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_DDR_CACHE_VALUE ))
In_ddr_m_axi_U(
    .AWVALID(m_axi_In_ddr_AWVALID),
    .AWREADY(m_axi_In_ddr_AWREADY),
    .AWADDR(m_axi_In_ddr_AWADDR),
    .AWID(m_axi_In_ddr_AWID),
    .AWLEN(m_axi_In_ddr_AWLEN),
    .AWSIZE(m_axi_In_ddr_AWSIZE),
    .AWBURST(m_axi_In_ddr_AWBURST),
    .AWLOCK(m_axi_In_ddr_AWLOCK),
    .AWCACHE(m_axi_In_ddr_AWCACHE),
    .AWPROT(m_axi_In_ddr_AWPROT),
    .AWQOS(m_axi_In_ddr_AWQOS),
    .AWREGION(m_axi_In_ddr_AWREGION),
    .AWUSER(m_axi_In_ddr_AWUSER),
    .WVALID(m_axi_In_ddr_WVALID),
    .WREADY(m_axi_In_ddr_WREADY),
    .WDATA(m_axi_In_ddr_WDATA),
    .WSTRB(m_axi_In_ddr_WSTRB),
    .WLAST(m_axi_In_ddr_WLAST),
    .WID(m_axi_In_ddr_WID),
    .WUSER(m_axi_In_ddr_WUSER),
    .ARVALID(m_axi_In_ddr_ARVALID),
    .ARREADY(m_axi_In_ddr_ARREADY),
    .ARADDR(m_axi_In_ddr_ARADDR),
    .ARID(m_axi_In_ddr_ARID),
    .ARLEN(m_axi_In_ddr_ARLEN),
    .ARSIZE(m_axi_In_ddr_ARSIZE),
    .ARBURST(m_axi_In_ddr_ARBURST),
    .ARLOCK(m_axi_In_ddr_ARLOCK),
    .ARCACHE(m_axi_In_ddr_ARCACHE),
    .ARPROT(m_axi_In_ddr_ARPROT),
    .ARQOS(m_axi_In_ddr_ARQOS),
    .ARREGION(m_axi_In_ddr_ARREGION),
    .ARUSER(m_axi_In_ddr_ARUSER),
    .RVALID(m_axi_In_ddr_RVALID),
    .RREADY(m_axi_In_ddr_RREADY),
    .RDATA(m_axi_In_ddr_RDATA),
    .RLAST(m_axi_In_ddr_RLAST),
    .RID(m_axi_In_ddr_RID),
    .RUSER(m_axi_In_ddr_RUSER),
    .RRESP(m_axi_In_ddr_RRESP),
    .BVALID(m_axi_In_ddr_BVALID),
    .BREADY(m_axi_In_ddr_BREADY),
    .BRESP(m_axi_In_ddr_BRESP),
    .BID(m_axi_In_ddr_BID),
    .BUSER(m_axi_In_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(In_ddr_ARVALID),
    .I_ARREADY(In_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1024),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(In_ddr_RVALID),
    .I_RREADY(In_ddr_RREADY),
    .I_RDATA(In_ddr_RDATA),
    .I_RID(In_ddr_RID),
    .I_RUSER(In_ddr_RUSER),
    .I_RRESP(In_ddr_RRESP),
    .I_RLAST(In_ddr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(In_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(In_ddr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(In_ddr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(In_ddr_BRESP),
    .I_BID(In_ddr_BID),
    .I_BUSER(In_ddr_BUSER)
);

conv_acc4t_W_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_W_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_W_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_W_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_W_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_W_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_W_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_W_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_W_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_W_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_W_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_W_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_W_DDR_CACHE_VALUE ))
W_ddr_m_axi_U(
    .AWVALID(m_axi_W_ddr_AWVALID),
    .AWREADY(m_axi_W_ddr_AWREADY),
    .AWADDR(m_axi_W_ddr_AWADDR),
    .AWID(m_axi_W_ddr_AWID),
    .AWLEN(m_axi_W_ddr_AWLEN),
    .AWSIZE(m_axi_W_ddr_AWSIZE),
    .AWBURST(m_axi_W_ddr_AWBURST),
    .AWLOCK(m_axi_W_ddr_AWLOCK),
    .AWCACHE(m_axi_W_ddr_AWCACHE),
    .AWPROT(m_axi_W_ddr_AWPROT),
    .AWQOS(m_axi_W_ddr_AWQOS),
    .AWREGION(m_axi_W_ddr_AWREGION),
    .AWUSER(m_axi_W_ddr_AWUSER),
    .WVALID(m_axi_W_ddr_WVALID),
    .WREADY(m_axi_W_ddr_WREADY),
    .WDATA(m_axi_W_ddr_WDATA),
    .WSTRB(m_axi_W_ddr_WSTRB),
    .WLAST(m_axi_W_ddr_WLAST),
    .WID(m_axi_W_ddr_WID),
    .WUSER(m_axi_W_ddr_WUSER),
    .ARVALID(m_axi_W_ddr_ARVALID),
    .ARREADY(m_axi_W_ddr_ARREADY),
    .ARADDR(m_axi_W_ddr_ARADDR),
    .ARID(m_axi_W_ddr_ARID),
    .ARLEN(m_axi_W_ddr_ARLEN),
    .ARSIZE(m_axi_W_ddr_ARSIZE),
    .ARBURST(m_axi_W_ddr_ARBURST),
    .ARLOCK(m_axi_W_ddr_ARLOCK),
    .ARCACHE(m_axi_W_ddr_ARCACHE),
    .ARPROT(m_axi_W_ddr_ARPROT),
    .ARQOS(m_axi_W_ddr_ARQOS),
    .ARREGION(m_axi_W_ddr_ARREGION),
    .ARUSER(m_axi_W_ddr_ARUSER),
    .RVALID(m_axi_W_ddr_RVALID),
    .RREADY(m_axi_W_ddr_RREADY),
    .RDATA(m_axi_W_ddr_RDATA),
    .RLAST(m_axi_W_ddr_RLAST),
    .RID(m_axi_W_ddr_RID),
    .RUSER(m_axi_W_ddr_RUSER),
    .RRESP(m_axi_W_ddr_RRESP),
    .BVALID(m_axi_W_ddr_BVALID),
    .BREADY(m_axi_W_ddr_BREADY),
    .BRESP(m_axi_W_ddr_BRESP),
    .BID(m_axi_W_ddr_BID),
    .BUSER(m_axi_W_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(W_ddr_ARVALID),
    .I_ARREADY(W_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd256),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(W_ddr_RVALID),
    .I_RREADY(W_ddr_RREADY),
    .I_RDATA(W_ddr_RDATA),
    .I_RID(W_ddr_RID),
    .I_RUSER(W_ddr_RUSER),
    .I_RRESP(W_ddr_RRESP),
    .I_RLAST(W_ddr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(W_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(W_ddr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(W_ddr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(W_ddr_BRESP),
    .I_BID(W_ddr_BID),
    .I_BUSER(W_ddr_BUSER)
);

conv_acc4t_Out_ddr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUT_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUT_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_DDR_CACHE_VALUE ))
Out_ddr_m_axi_U(
    .AWVALID(m_axi_Out_ddr_AWVALID),
    .AWREADY(m_axi_Out_ddr_AWREADY),
    .AWADDR(m_axi_Out_ddr_AWADDR),
    .AWID(m_axi_Out_ddr_AWID),
    .AWLEN(m_axi_Out_ddr_AWLEN),
    .AWSIZE(m_axi_Out_ddr_AWSIZE),
    .AWBURST(m_axi_Out_ddr_AWBURST),
    .AWLOCK(m_axi_Out_ddr_AWLOCK),
    .AWCACHE(m_axi_Out_ddr_AWCACHE),
    .AWPROT(m_axi_Out_ddr_AWPROT),
    .AWQOS(m_axi_Out_ddr_AWQOS),
    .AWREGION(m_axi_Out_ddr_AWREGION),
    .AWUSER(m_axi_Out_ddr_AWUSER),
    .WVALID(m_axi_Out_ddr_WVALID),
    .WREADY(m_axi_Out_ddr_WREADY),
    .WDATA(m_axi_Out_ddr_WDATA),
    .WSTRB(m_axi_Out_ddr_WSTRB),
    .WLAST(m_axi_Out_ddr_WLAST),
    .WID(m_axi_Out_ddr_WID),
    .WUSER(m_axi_Out_ddr_WUSER),
    .ARVALID(m_axi_Out_ddr_ARVALID),
    .ARREADY(m_axi_Out_ddr_ARREADY),
    .ARADDR(m_axi_Out_ddr_ARADDR),
    .ARID(m_axi_Out_ddr_ARID),
    .ARLEN(m_axi_Out_ddr_ARLEN),
    .ARSIZE(m_axi_Out_ddr_ARSIZE),
    .ARBURST(m_axi_Out_ddr_ARBURST),
    .ARLOCK(m_axi_Out_ddr_ARLOCK),
    .ARCACHE(m_axi_Out_ddr_ARCACHE),
    .ARPROT(m_axi_Out_ddr_ARPROT),
    .ARQOS(m_axi_Out_ddr_ARQOS),
    .ARREGION(m_axi_Out_ddr_ARREGION),
    .ARUSER(m_axi_Out_ddr_ARUSER),
    .RVALID(m_axi_Out_ddr_RVALID),
    .RREADY(m_axi_Out_ddr_RREADY),
    .RDATA(m_axi_Out_ddr_RDATA),
    .RLAST(m_axi_Out_ddr_RLAST),
    .RID(m_axi_Out_ddr_RID),
    .RUSER(m_axi_Out_ddr_RUSER),
    .RRESP(m_axi_Out_ddr_RRESP),
    .BVALID(m_axi_Out_ddr_BVALID),
    .BREADY(m_axi_Out_ddr_BREADY),
    .BRESP(m_axi_Out_ddr_BRESP),
    .BID(m_axi_Out_ddr_BID),
    .BUSER(m_axi_Out_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(Out_ddr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(Out_ddr_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(Out_ddr_RDATA),
    .I_RID(Out_ddr_RID),
    .I_RUSER(Out_ddr_RUSER),
    .I_RRESP(Out_ddr_RRESP),
    .I_RLAST(Out_ddr_RLAST),
    .I_AWVALID(Out_ddr_AWVALID),
    .I_AWREADY(Out_ddr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd784),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(Out_ddr_WVALID),
    .I_WREADY(Out_ddr_WREADY),
    .I_WDATA(Out_ddr_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(Out_ddr_BVALID),
    .I_BREADY(Out_ddr_BREADY),
    .I_BRESP(Out_ddr_BRESP),
    .I_BID(Out_ddr_BID),
    .I_BUSER(Out_ddr_BUSER)
);

conv_acc4t_out_0 #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
out_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_0_address0),
    .ce0(out_0_ce0),
    .we0(out_0_we0),
    .d0(grp_convolution_fu_764_out_r_d0),
    .q0(out_0_q0),
    .address1(grp_convolution_fu_764_out_r_address1),
    .ce1(out_0_ce1),
    .we1(out_0_we1),
    .d1(grp_convolution_fu_764_out_r_d1),
    .q1(out_0_q1)
);

conv_acc4t_out_0 #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
out_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_1_address0),
    .ce0(out_1_ce0),
    .we0(out_1_we0),
    .d0(grp_convolution_fu_764_out4_d0),
    .q0(out_1_q0),
    .address1(grp_convolution_fu_764_out4_address1),
    .ce1(out_1_ce1),
    .we1(out_1_we1),
    .d1(grp_convolution_fu_764_out4_d1),
    .q1(out_1_q1)
);

conv_acc4t_out_0 #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
out_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_2_address0),
    .ce0(out_2_ce0),
    .we0(out_2_we0),
    .d0(grp_convolution_fu_764_out5_d0),
    .q0(out_2_q0),
    .address1(grp_convolution_fu_764_out5_address1),
    .ce1(out_2_ce1),
    .we1(out_2_we1),
    .d1(grp_convolution_fu_764_out5_d1),
    .q1(out_2_q1)
);

conv_acc4t_out_0 #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
out_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_3_address0),
    .ce0(out_3_ce0),
    .we0(out_3_we0),
    .d0(grp_convolution_fu_764_out6_d0),
    .q0(out_3_q0),
    .address1(grp_convolution_fu_764_out6_address1),
    .ce1(out_3_ce1),
    .we1(out_3_we1),
    .d1(grp_convolution_fu_764_out6_d1),
    .q1(out_3_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_0_0_address0),
    .ce0(w_0_0_ce0),
    .we0(w_0_0_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_0_0_q0),
    .address1(grp_convolution_fu_764_w_address1),
    .ce1(w_0_0_ce1),
    .q1(w_0_0_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_0_1_address0),
    .ce0(w_0_1_ce0),
    .we0(w_0_1_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_0_1_q0),
    .address1(grp_convolution_fu_764_w1_address1),
    .ce1(w_0_1_ce1),
    .q1(w_0_1_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_0_2_address0),
    .ce0(w_0_2_ce0),
    .we0(w_0_2_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_0_2_q0),
    .address1(grp_convolution_fu_764_w2_address1),
    .ce1(w_0_2_ce1),
    .q1(w_0_2_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_0_3_address0),
    .ce0(w_0_3_ce0),
    .we0(w_0_3_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_0_3_q0),
    .address1(grp_convolution_fu_764_w3_address1),
    .ce1(w_0_3_ce1),
    .q1(w_0_3_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_1_0_address0),
    .ce0(w_1_0_ce0),
    .we0(w_1_0_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_1_0_q0),
    .address1(grp_convolution_fu_764_w14_address1),
    .ce1(w_1_0_ce1),
    .q1(w_1_0_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_1_1_address0),
    .ce0(w_1_1_ce0),
    .we0(w_1_1_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_1_1_q0),
    .address1(grp_convolution_fu_764_w15_address1),
    .ce1(w_1_1_ce1),
    .q1(w_1_1_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_1_2_address0),
    .ce0(w_1_2_ce0),
    .we0(w_1_2_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_1_2_q0),
    .address1(grp_convolution_fu_764_w16_address1),
    .ce1(w_1_2_ce1),
    .q1(w_1_2_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_1_3_address0),
    .ce0(w_1_3_ce0),
    .we0(w_1_3_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_1_3_q0),
    .address1(grp_convolution_fu_764_w17_address1),
    .ce1(w_1_3_ce1),
    .q1(w_1_3_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_2_0_address0),
    .ce0(w_2_0_ce0),
    .we0(w_2_0_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_2_0_q0),
    .address1(grp_convolution_fu_764_w28_address1),
    .ce1(w_2_0_ce1),
    .q1(w_2_0_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_2_1_address0),
    .ce0(w_2_1_ce0),
    .we0(w_2_1_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_2_1_q0),
    .address1(grp_convolution_fu_764_w29_address1),
    .ce1(w_2_1_ce1),
    .q1(w_2_1_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_2_2_address0),
    .ce0(w_2_2_ce0),
    .we0(w_2_2_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_2_2_q0),
    .address1(grp_convolution_fu_764_w210_address1),
    .ce1(w_2_2_ce1),
    .q1(w_2_2_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_2_3_address0),
    .ce0(w_2_3_ce0),
    .we0(w_2_3_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_2_3_q0),
    .address1(grp_convolution_fu_764_w211_address1),
    .ce1(w_2_3_ce1),
    .q1(w_2_3_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_3_0_address0),
    .ce0(w_3_0_ce0),
    .we0(w_3_0_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_3_0_q0),
    .address1(grp_convolution_fu_764_w312_address1),
    .ce1(w_3_0_ce1),
    .q1(w_3_0_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_3_1_address0),
    .ce0(w_3_1_ce0),
    .we0(w_3_1_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_3_1_q0),
    .address1(grp_convolution_fu_764_w313_address1),
    .ce1(w_3_1_ce1),
    .q1(w_3_1_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_3_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_3_2_address0),
    .ce0(w_3_2_ce0),
    .we0(w_3_2_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_3_2_q0),
    .address1(grp_convolution_fu_764_w314_address1),
    .ce1(w_3_2_ce1),
    .q1(w_3_2_q1)
);

conv_acc4t_w_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
w_3_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_3_3_address0),
    .ce0(w_3_3_ce0),
    .we0(w_3_3_we0),
    .d0(bitcast_ln46_reg_1506),
    .q0(w_3_3_q0),
    .address1(grp_convolution_fu_764_w315_address1),
    .ce1(w_3_3_ce1),
    .q1(w_3_3_q1)
);

conv_acc4t_convolution grp_convolution_fu_764(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_fu_764_ap_start),
    .ap_done(grp_convolution_fu_764_ap_done),
    .ap_idle(grp_convolution_fu_764_ap_idle),
    .ap_ready(grp_convolution_fu_764_ap_ready),
    .w_address0(grp_convolution_fu_764_w_address0),
    .w_ce0(grp_convolution_fu_764_w_ce0),
    .w_q0(w_0_0_q0),
    .w_address1(grp_convolution_fu_764_w_address1),
    .w_ce1(grp_convolution_fu_764_w_ce1),
    .w_q1(w_0_0_q1),
    .w1_address0(grp_convolution_fu_764_w1_address0),
    .w1_ce0(grp_convolution_fu_764_w1_ce0),
    .w1_q0(w_0_1_q0),
    .w1_address1(grp_convolution_fu_764_w1_address1),
    .w1_ce1(grp_convolution_fu_764_w1_ce1),
    .w1_q1(w_0_1_q1),
    .w2_address0(grp_convolution_fu_764_w2_address0),
    .w2_ce0(grp_convolution_fu_764_w2_ce0),
    .w2_q0(w_0_2_q0),
    .w2_address1(grp_convolution_fu_764_w2_address1),
    .w2_ce1(grp_convolution_fu_764_w2_ce1),
    .w2_q1(w_0_2_q1),
    .w3_address0(grp_convolution_fu_764_w3_address0),
    .w3_ce0(grp_convolution_fu_764_w3_ce0),
    .w3_q0(w_0_3_q0),
    .w3_address1(grp_convolution_fu_764_w3_address1),
    .w3_ce1(grp_convolution_fu_764_w3_ce1),
    .w3_q1(w_0_3_q1),
    .w14_address0(grp_convolution_fu_764_w14_address0),
    .w14_ce0(grp_convolution_fu_764_w14_ce0),
    .w14_q0(w_1_0_q0),
    .w14_address1(grp_convolution_fu_764_w14_address1),
    .w14_ce1(grp_convolution_fu_764_w14_ce1),
    .w14_q1(w_1_0_q1),
    .w15_address0(grp_convolution_fu_764_w15_address0),
    .w15_ce0(grp_convolution_fu_764_w15_ce0),
    .w15_q0(w_1_1_q0),
    .w15_address1(grp_convolution_fu_764_w15_address1),
    .w15_ce1(grp_convolution_fu_764_w15_ce1),
    .w15_q1(w_1_1_q1),
    .w16_address0(grp_convolution_fu_764_w16_address0),
    .w16_ce0(grp_convolution_fu_764_w16_ce0),
    .w16_q0(w_1_2_q0),
    .w16_address1(grp_convolution_fu_764_w16_address1),
    .w16_ce1(grp_convolution_fu_764_w16_ce1),
    .w16_q1(w_1_2_q1),
    .w17_address0(grp_convolution_fu_764_w17_address0),
    .w17_ce0(grp_convolution_fu_764_w17_ce0),
    .w17_q0(w_1_3_q0),
    .w17_address1(grp_convolution_fu_764_w17_address1),
    .w17_ce1(grp_convolution_fu_764_w17_ce1),
    .w17_q1(w_1_3_q1),
    .w28_address0(grp_convolution_fu_764_w28_address0),
    .w28_ce0(grp_convolution_fu_764_w28_ce0),
    .w28_q0(w_2_0_q0),
    .w28_address1(grp_convolution_fu_764_w28_address1),
    .w28_ce1(grp_convolution_fu_764_w28_ce1),
    .w28_q1(w_2_0_q1),
    .w29_address0(grp_convolution_fu_764_w29_address0),
    .w29_ce0(grp_convolution_fu_764_w29_ce0),
    .w29_q0(w_2_1_q0),
    .w29_address1(grp_convolution_fu_764_w29_address1),
    .w29_ce1(grp_convolution_fu_764_w29_ce1),
    .w29_q1(w_2_1_q1),
    .w210_address0(grp_convolution_fu_764_w210_address0),
    .w210_ce0(grp_convolution_fu_764_w210_ce0),
    .w210_q0(w_2_2_q0),
    .w210_address1(grp_convolution_fu_764_w210_address1),
    .w210_ce1(grp_convolution_fu_764_w210_ce1),
    .w210_q1(w_2_2_q1),
    .w211_address0(grp_convolution_fu_764_w211_address0),
    .w211_ce0(grp_convolution_fu_764_w211_ce0),
    .w211_q0(w_2_3_q0),
    .w211_address1(grp_convolution_fu_764_w211_address1),
    .w211_ce1(grp_convolution_fu_764_w211_ce1),
    .w211_q1(w_2_3_q1),
    .w312_address0(grp_convolution_fu_764_w312_address0),
    .w312_ce0(grp_convolution_fu_764_w312_ce0),
    .w312_q0(w_3_0_q0),
    .w312_address1(grp_convolution_fu_764_w312_address1),
    .w312_ce1(grp_convolution_fu_764_w312_ce1),
    .w312_q1(w_3_0_q1),
    .w313_address0(grp_convolution_fu_764_w313_address0),
    .w313_ce0(grp_convolution_fu_764_w313_ce0),
    .w313_q0(w_3_1_q0),
    .w313_address1(grp_convolution_fu_764_w313_address1),
    .w313_ce1(grp_convolution_fu_764_w313_ce1),
    .w313_q1(w_3_1_q1),
    .w314_address0(grp_convolution_fu_764_w314_address0),
    .w314_ce0(grp_convolution_fu_764_w314_ce0),
    .w314_q0(w_3_2_q0),
    .w314_address1(grp_convolution_fu_764_w314_address1),
    .w314_ce1(grp_convolution_fu_764_w314_ce1),
    .w314_q1(w_3_2_q1),
    .w315_address0(grp_convolution_fu_764_w315_address0),
    .w315_ce0(grp_convolution_fu_764_w315_ce0),
    .w315_q0(w_3_3_q0),
    .w315_address1(grp_convolution_fu_764_w315_address1),
    .w315_ce1(grp_convolution_fu_764_w315_ce1),
    .w315_q1(w_3_3_q1),
    .out_r_address0(grp_convolution_fu_764_out_r_address0),
    .out_r_ce0(grp_convolution_fu_764_out_r_ce0),
    .out_r_we0(grp_convolution_fu_764_out_r_we0),
    .out_r_d0(grp_convolution_fu_764_out_r_d0),
    .out_r_q0(out_0_q0),
    .out_r_address1(grp_convolution_fu_764_out_r_address1),
    .out_r_ce1(grp_convolution_fu_764_out_r_ce1),
    .out_r_we1(grp_convolution_fu_764_out_r_we1),
    .out_r_d1(grp_convolution_fu_764_out_r_d1),
    .out_r_q1(out_0_q1),
    .out4_address0(grp_convolution_fu_764_out4_address0),
    .out4_ce0(grp_convolution_fu_764_out4_ce0),
    .out4_we0(grp_convolution_fu_764_out4_we0),
    .out4_d0(grp_convolution_fu_764_out4_d0),
    .out4_q0(out_1_q0),
    .out4_address1(grp_convolution_fu_764_out4_address1),
    .out4_ce1(grp_convolution_fu_764_out4_ce1),
    .out4_we1(grp_convolution_fu_764_out4_we1),
    .out4_d1(grp_convolution_fu_764_out4_d1),
    .out4_q1(out_1_q1),
    .out5_address0(grp_convolution_fu_764_out5_address0),
    .out5_ce0(grp_convolution_fu_764_out5_ce0),
    .out5_we0(grp_convolution_fu_764_out5_we0),
    .out5_d0(grp_convolution_fu_764_out5_d0),
    .out5_q0(out_2_q0),
    .out5_address1(grp_convolution_fu_764_out5_address1),
    .out5_ce1(grp_convolution_fu_764_out5_ce1),
    .out5_we1(grp_convolution_fu_764_out5_we1),
    .out5_d1(grp_convolution_fu_764_out5_d1),
    .out5_q1(out_2_q1),
    .out6_address0(grp_convolution_fu_764_out6_address0),
    .out6_ce0(grp_convolution_fu_764_out6_ce0),
    .out6_we0(grp_convolution_fu_764_out6_we0),
    .out6_d0(grp_convolution_fu_764_out6_d0),
    .out6_q0(out_3_q0),
    .out6_address1(grp_convolution_fu_764_out6_address1),
    .out6_ce1(grp_convolution_fu_764_out6_ce1),
    .out6_we1(grp_convolution_fu_764_out6_we1),
    .out6_d1(grp_convolution_fu_764_out6_d1),
    .out6_q1(out_3_q1),
    .in_0_address0(grp_convolution_fu_764_in_0_address0),
    .in_0_ce0(grp_convolution_fu_764_in_0_ce0),
    .in_0_q0(in_0_q0),
    .in_0_address1(grp_convolution_fu_764_in_0_address1),
    .in_0_ce1(grp_convolution_fu_764_in_0_ce1),
    .in_0_q1(in_0_q1),
    .in_1_address0(grp_convolution_fu_764_in_1_address0),
    .in_1_ce0(grp_convolution_fu_764_in_1_ce0),
    .in_1_q0(in_1_q0),
    .in_1_address1(grp_convolution_fu_764_in_1_address1),
    .in_1_ce1(grp_convolution_fu_764_in_1_ce1),
    .in_1_q1(in_1_q1),
    .in_2_address0(grp_convolution_fu_764_in_2_address0),
    .in_2_ce0(grp_convolution_fu_764_in_2_ce0),
    .in_2_q0(in_2_q0),
    .in_2_address1(grp_convolution_fu_764_in_2_address1),
    .in_2_ce1(grp_convolution_fu_764_in_2_ce1),
    .in_2_q1(in_2_q1),
    .in_3_address0(grp_convolution_fu_764_in_3_address0),
    .in_3_ce0(grp_convolution_fu_764_in_3_ce0),
    .in_3_q0(in_3_q0),
    .in_3_address1(grp_convolution_fu_764_in_3_address1),
    .in_3_ce1(grp_convolution_fu_764_in_3_ce1),
    .in_3_q1(in_3_q1)
);

conv_acc4t_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U195(
    .din0(out_0_q0),
    .din1(out_1_q0),
    .din2(out_2_q0),
    .din3(out_3_q0),
    .din4(trunc_ln61_reg_1565),
    .dout(tmp_fu_1390_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state23)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution_fu_764_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == Out_ddr_AWREADY) & (1'b1 == ap_CS_fsm_state21))) begin
            grp_convolution_fu_764_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_fu_764_ap_ready == 1'b1)) begin
            grp_convolution_fu_764_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_802_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L_chi_1_reg_632 <= add_ln28_fu_890_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L_chi_1_reg_632 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L_chi_reg_676 <= select_ln40_1_fu_1059_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        L_chi_reg_676 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        L_cho_1_reg_753 <= add_ln59_fu_1370_p2;
    end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        L_cho_1_reg_753 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L_cho_reg_654 <= select_ln38_1_reg_1468;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        L_cho_reg_654 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L_ci_reg_621 <= select_ln26_1_reg_1426;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L_ci_reg_621 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        L_co_reg_742 <= select_ln57_2_fu_1358_p3;
    end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        L_co_reg_742 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L_kr_reg_698 <= add_ln44_fu_1087_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        L_kr_reg_698 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L_ri_reg_599 <= select_ln24_1_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L_ri_reg_599 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln55_reg_1531 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        L_ro_reg_720 <= select_ln55_1_reg_1535;
    end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        L_ro_reg_720 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten101_reg_709 <= add_ln55_1_fu_1158_p2;
    end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        indvar_flatten101_reg_709 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_802_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_588 <= add_ln24_1_fu_796_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten17_reg_588 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten25_reg_687 <= select_ln42_1_fu_1105_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten25_reg_687 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten37_reg_665 <= select_ln40_2_fu_1119_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten37_reg_665 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten59_reg_643 <= add_ln38_1_fu_937_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten59_reg_643 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten71_reg_731 <= select_ln57_3_fu_1382_p3;
    end else if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        indvar_flatten71_reg_731 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_802_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_610 <= select_ln26_2_fu_902_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_610 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_reg_1446 <= add_ln30_fu_920_p2;
        bitcast_ln30_reg_1451 <= bitcast_ln30_fu_926_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1464 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        bitcast_ln46_reg_1506 <= bitcast_ln46_fu_1127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_1412 <= icmp_ln24_fu_802_p2;
        trunc_ln30_1_reg_1432_pp0_iter1_reg <= trunc_ln30_1_reg_1432;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln38_reg_1464 <= icmp_ln38_fu_943_p2;
        select_ln40_reg_1477_pp1_iter1_reg <= select_ln40_reg_1477;
        select_ln42_reg_1486_pp1_iter1_reg <= select_ln42_reg_1486;
        trunc_ln38_reg_1473_pp1_iter1_reg <= trunc_ln38_reg_1473;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln55_reg_1531 <= icmp_ln55_fu_1200_p2;
        icmp_ln55_reg_1531_pp2_iter1_reg <= icmp_ln55_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_802_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln24_1_reg_1416 <= select_ln24_1_fu_828_p3;
        select_ln26_1_reg_1426 <= select_ln26_1_fu_878_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln38_1_reg_1468 <= select_ln38_1_fu_969_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_943_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln40_reg_1477 <= select_ln40_fu_1033_p3;
        select_ln42_reg_1486 <= select_ln42_fu_1079_p3;
        trunc_ln38_reg_1473 <= trunc_ln38_fu_977_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln55_1_reg_1535 <= select_ln55_1_fu_1252_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1531 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_reg_1580 <= tmp_fu_1390_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_802_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln30_1_reg_1432 <= trunc_ln30_1_fu_886_p1;
        trunc_ln30_reg_1421 <= trunc_ln30_fu_836_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1200_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln61_reg_1565 <= trunc_ln61_fu_1366_p1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == In_ddr_ARREADY)) & (1'b1 == ap_CS_fsm_state1))) begin
        In_ddr_ARVALID = 1'b1;
    end else begin
        In_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_ddr_RREADY = 1'b1;
    end else begin
        In_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        In_ddr_blk_n_AR = m_axi_In_ddr_ARREADY;
    end else begin
        In_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_ddr_blk_n_R = m_axi_In_ddr_RVALID;
    end else begin
        In_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Out_ddr_AWREADY) & (1'b1 == ap_CS_fsm_state21))) begin
        Out_ddr_AWVALID = 1'b1;
    end else begin
        Out_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Out_ddr_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        Out_ddr_BREADY = 1'b1;
    end else begin
        Out_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1531_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Out_ddr_WVALID = 1'b1;
    end else begin
        Out_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        Out_ddr_blk_n_AW = m_axi_Out_ddr_AWREADY;
    end else begin
        Out_ddr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        Out_ddr_blk_n_B = m_axi_Out_ddr_BVALID;
    end else begin
        Out_ddr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1531_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        Out_ddr_blk_n_W = m_axi_Out_ddr_WREADY;
    end else begin
        Out_ddr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == W_ddr_ARREADY) & (1'b1 == ap_CS_fsm_state11))) begin
        W_ddr_ARVALID = 1'b1;
    end else begin
        W_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        W_ddr_RREADY = 1'b1;
    end else begin
        W_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        W_ddr_blk_n_AR = m_axi_W_ddr_ARREADY;
    end else begin
        W_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        W_ddr_blk_n_R = m_axi_W_ddr_RVALID;
    end else begin
        W_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_802_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_943_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_1200_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Out_ddr_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_L_cho_phi_fu_658_p4 = select_ln38_1_reg_1468;
    end else begin
        ap_phi_mux_L_cho_phi_fu_658_p4 = L_cho_reg_654;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_L_ci_phi_fu_625_p4 = select_ln26_1_reg_1426;
    end else begin
        ap_phi_mux_L_ci_phi_fu_625_p4 = L_ci_reg_621;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_L_ri_phi_fu_603_p4 = select_ln24_1_reg_1416;
    end else begin
        ap_phi_mux_L_ri_phi_fu_603_p4 = L_ri_reg_599;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln55_reg_1531 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_L_ro_phi_fu_724_p4 = select_ln55_1_reg_1535;
    end else begin
        ap_phi_mux_L_ro_phi_fu_724_p4 = L_ro_reg_720;
    end
end

always @ (*) begin
    if (((1'b1 == Out_ddr_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_0_address0 = zext_ln30_1_fu_930_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_0_address0 = grp_convolution_fu_764_in_0_address0;
    end else begin
        in_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_0_ce0 = grp_convolution_fu_764_in_0_ce0;
    end else begin
        in_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        in_0_ce1 = grp_convolution_fu_764_in_0_ce1;
    end else begin
        in_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln30_1_reg_1432_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_0_we0 = 1'b1;
    end else begin
        in_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_1_address0 = zext_ln30_1_fu_930_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_1_address0 = grp_convolution_fu_764_in_1_address0;
    end else begin
        in_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_1_ce0 = grp_convolution_fu_764_in_1_ce0;
    end else begin
        in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        in_1_ce1 = grp_convolution_fu_764_in_1_ce1;
    end else begin
        in_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln30_1_reg_1432_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_1_we0 = 1'b1;
    end else begin
        in_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_2_address0 = zext_ln30_1_fu_930_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_2_address0 = grp_convolution_fu_764_in_2_address0;
    end else begin
        in_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_2_ce0 = grp_convolution_fu_764_in_2_ce0;
    end else begin
        in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        in_2_ce1 = grp_convolution_fu_764_in_2_ce1;
    end else begin
        in_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln30_1_reg_1432_pp0_iter1_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_2_we0 = 1'b1;
    end else begin
        in_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_3_address0 = zext_ln30_1_fu_930_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_3_address0 = grp_convolution_fu_764_in_3_address0;
    end else begin
        in_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        in_3_ce0 = grp_convolution_fu_764_in_3_ce0;
    end else begin
        in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        in_3_ce1 = grp_convolution_fu_764_in_3_ce1;
    end else begin
        in_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln30_1_reg_1432_pp0_iter1_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_3_we0 = 1'b1;
    end else begin
        in_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_0_address0 = zext_ln61_5_fu_1350_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_0_address0 = grp_convolution_fu_764_out_r_address0;
    end else begin
        out_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_0_ce0 = grp_convolution_fu_764_out_r_ce0;
    end else begin
        out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_0_ce1 = grp_convolution_fu_764_out_r_ce1;
    end else begin
        out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_0_we0 = grp_convolution_fu_764_out_r_we0;
    end else begin
        out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_0_we1 = grp_convolution_fu_764_out_r_we1;
    end else begin
        out_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_1_address0 = zext_ln61_5_fu_1350_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_1_address0 = grp_convolution_fu_764_out4_address0;
    end else begin
        out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_1_ce0 = grp_convolution_fu_764_out4_ce0;
    end else begin
        out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_1_ce1 = grp_convolution_fu_764_out4_ce1;
    end else begin
        out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_1_we0 = grp_convolution_fu_764_out4_we0;
    end else begin
        out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_1_we1 = grp_convolution_fu_764_out4_we1;
    end else begin
        out_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_2_address0 = zext_ln61_5_fu_1350_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_2_address0 = grp_convolution_fu_764_out5_address0;
    end else begin
        out_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_2_ce0 = grp_convolution_fu_764_out5_ce0;
    end else begin
        out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_2_ce1 = grp_convolution_fu_764_out5_ce1;
    end else begin
        out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_2_we0 = grp_convolution_fu_764_out5_we0;
    end else begin
        out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_2_we1 = grp_convolution_fu_764_out5_we1;
    end else begin
        out_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_3_address0 = zext_ln61_5_fu_1350_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_3_address0 = grp_convolution_fu_764_out6_address0;
    end else begin
        out_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_3_ce0 = grp_convolution_fu_764_out6_ce0;
    end else begin
        out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_3_ce1 = grp_convolution_fu_764_out6_ce1;
    end else begin
        out_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_3_we0 = grp_convolution_fu_764_out6_we0;
    end else begin
        out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        out_3_we1 = grp_convolution_fu_764_out6_we1;
    end else begin
        out_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_0_0_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_0_address0 = grp_convolution_fu_764_w_address0;
    end else begin
        w_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_0_ce0 = grp_convolution_fu_764_w_ce0;
    end else begin
        w_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_0_ce1 = grp_convolution_fu_764_w_ce1;
    end else begin
        w_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd0) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_0_we0 = 1'b1;
    end else begin
        w_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_0_1_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_1_address0 = grp_convolution_fu_764_w1_address0;
    end else begin
        w_0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_1_ce0 = grp_convolution_fu_764_w1_ce0;
    end else begin
        w_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_1_ce1 = grp_convolution_fu_764_w1_ce1;
    end else begin
        w_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd1) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_1_we0 = 1'b1;
    end else begin
        w_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_0_2_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_2_address0 = grp_convolution_fu_764_w2_address0;
    end else begin
        w_0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_2_ce0 = grp_convolution_fu_764_w2_ce0;
    end else begin
        w_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_2_ce1 = grp_convolution_fu_764_w2_ce1;
    end else begin
        w_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd2) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_2_we0 = 1'b1;
    end else begin
        w_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_0_3_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_3_address0 = grp_convolution_fu_764_w3_address0;
    end else begin
        w_0_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_3_ce0 = grp_convolution_fu_764_w3_ce0;
    end else begin
        w_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_0_3_ce1 = grp_convolution_fu_764_w3_ce1;
    end else begin
        w_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd3) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_0_3_we0 = 1'b1;
    end else begin
        w_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_1_0_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_0_address0 = grp_convolution_fu_764_w14_address0;
    end else begin
        w_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_0_ce0 = grp_convolution_fu_764_w14_ce0;
    end else begin
        w_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_0_ce1 = grp_convolution_fu_764_w14_ce1;
    end else begin
        w_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd0) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_0_we0 = 1'b1;
    end else begin
        w_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_1_1_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_1_address0 = grp_convolution_fu_764_w15_address0;
    end else begin
        w_1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_1_ce0 = grp_convolution_fu_764_w15_ce0;
    end else begin
        w_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_1_ce1 = grp_convolution_fu_764_w15_ce1;
    end else begin
        w_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd1) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_1_we0 = 1'b1;
    end else begin
        w_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_1_2_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_2_address0 = grp_convolution_fu_764_w16_address0;
    end else begin
        w_1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_2_ce0 = grp_convolution_fu_764_w16_ce0;
    end else begin
        w_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_2_ce1 = grp_convolution_fu_764_w16_ce1;
    end else begin
        w_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd2) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_2_we0 = 1'b1;
    end else begin
        w_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_1_3_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_3_address0 = grp_convolution_fu_764_w17_address0;
    end else begin
        w_1_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_3_ce0 = grp_convolution_fu_764_w17_ce0;
    end else begin
        w_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_1_3_ce1 = grp_convolution_fu_764_w17_ce1;
    end else begin
        w_1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd3) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_1_3_we0 = 1'b1;
    end else begin
        w_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_2_0_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_0_address0 = grp_convolution_fu_764_w28_address0;
    end else begin
        w_2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_0_ce0 = grp_convolution_fu_764_w28_ce0;
    end else begin
        w_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_0_ce1 = grp_convolution_fu_764_w28_ce1;
    end else begin
        w_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd0) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_0_we0 = 1'b1;
    end else begin
        w_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_2_1_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_1_address0 = grp_convolution_fu_764_w29_address0;
    end else begin
        w_2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_1_ce0 = grp_convolution_fu_764_w29_ce0;
    end else begin
        w_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_1_ce1 = grp_convolution_fu_764_w29_ce1;
    end else begin
        w_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd1) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_1_we0 = 1'b1;
    end else begin
        w_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_2_2_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_2_address0 = grp_convolution_fu_764_w210_address0;
    end else begin
        w_2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_2_ce0 = grp_convolution_fu_764_w210_ce0;
    end else begin
        w_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_2_ce1 = grp_convolution_fu_764_w210_ce1;
    end else begin
        w_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd2) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_2_we0 = 1'b1;
    end else begin
        w_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_2_3_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_3_address0 = grp_convolution_fu_764_w211_address0;
    end else begin
        w_2_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_3_ce0 = grp_convolution_fu_764_w211_ce0;
    end else begin
        w_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_2_3_ce1 = grp_convolution_fu_764_w211_ce1;
    end else begin
        w_2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd3) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_2_3_we0 = 1'b1;
    end else begin
        w_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_3_0_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_0_address0 = grp_convolution_fu_764_w312_address0;
    end else begin
        w_3_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_0_ce0 = grp_convolution_fu_764_w312_ce0;
    end else begin
        w_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_0_ce1 = grp_convolution_fu_764_w312_ce1;
    end else begin
        w_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd0) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_0_we0 = 1'b1;
    end else begin
        w_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_3_1_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_1_address0 = grp_convolution_fu_764_w313_address0;
    end else begin
        w_3_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_1_ce0 = grp_convolution_fu_764_w313_ce0;
    end else begin
        w_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_1_ce1 = grp_convolution_fu_764_w313_ce1;
    end else begin
        w_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd1) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_1_we0 = 1'b1;
    end else begin
        w_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_3_2_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_2_address0 = grp_convolution_fu_764_w314_address0;
    end else begin
        w_3_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_2_ce0 = grp_convolution_fu_764_w314_ce0;
    end else begin
        w_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_2_ce1 = grp_convolution_fu_764_w314_ce1;
    end else begin
        w_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd2) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_2_we0 = 1'b1;
    end else begin
        w_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_3_3_address0 = zext_ln46_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_3_address0 = grp_convolution_fu_764_w315_address0;
    end else begin
        w_3_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_3_ce0 = grp_convolution_fu_764_w315_ce0;
    end else begin
        w_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_3_3_ce1 = grp_convolution_fu_764_w315_ce1;
    end else begin
        w_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln40_reg_1477_pp1_iter1_reg == 2'd3) & (trunc_ln38_reg_1473_pp1_iter1_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_3_3_we0 = 1'b1;
    end else begin
        w_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == In_ddr_ARREADY)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln24_fu_802_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln24_fu_802_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == W_ddr_ARREADY) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln38_fu_943_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln38_fu_943_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == Out_ddr_AWREADY) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_convolution_fu_764_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln55_fu_1200_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln55_fu_1200_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == Out_ddr_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_ddr_WDATA = tmp_reg_1580;

assign add_ln24_1_fu_796_p2 = (indvar_flatten17_reg_588 + 11'd1);

assign add_ln24_fu_808_p2 = (ap_phi_mux_L_ri_phi_fu_603_p4 + 5'd1);

assign add_ln26_1_fu_896_p2 = (indvar_flatten_reg_610 + 8'd1);

assign add_ln26_fu_858_p2 = (select_ln24_fu_820_p3 + 5'd1);

assign add_ln28_fu_890_p2 = (select_ln26_fu_870_p3 + 3'd1);

assign add_ln30_fu_920_p2 = (tmp_50_cast_fu_910_p3 + zext_ln30_fu_917_p1);

assign add_ln38_1_fu_937_p2 = (indvar_flatten59_reg_643 + 9'd1);

assign add_ln38_fu_949_p2 = (ap_phi_mux_L_cho_phi_fu_658_p4 + 3'd1);

assign add_ln40_1_fu_1113_p2 = (indvar_flatten37_reg_665 + 8'd1);

assign add_ln40_fu_1023_p2 = (select_ln38_fu_961_p3 + 3'd1);

assign add_ln42_fu_1093_p2 = (indvar_flatten25_reg_687 + 6'd1);

assign add_ln44_fu_1087_p2 = (select_ln42_fu_1079_p3 + 3'd1);

assign add_ln55_1_fu_1158_p2 = (indvar_flatten101_reg_709 + 10'd1);

assign add_ln55_fu_1206_p2 = (ap_phi_mux_L_ro_phi_fu_724_p4 + 4'd1);

assign add_ln57_1_fu_1376_p2 = (indvar_flatten71_reg_731 + 7'd1);

assign add_ln57_fu_1312_p2 = (select_ln55_fu_1218_p3 + 4'd1);

assign add_ln59_fu_1370_p2 = (select_ln57_fu_1324_p3 + 3'd1);

assign add_ln61_1_fu_1336_p2 = (sub_ln61_2_fu_1280_p2 + zext_ln61_4_fu_1332_p1);

assign add_ln61_fu_1194_p2 = (sub_ln61_fu_1184_p2 + zext_ln61_1_fu_1190_p1);

assign and_ln24_fu_852_p2 = (xor_ln24_fu_840_p2 & icmp_ln28_fu_846_p2);

assign and_ln38_1_fu_1017_p2 = (xor_ln38_fu_993_p2 & icmp_ln42_fu_1011_p2);

assign and_ln38_fu_1005_p2 = (xor_ln38_fu_993_p2 & icmp_ln44_fu_999_p2);

assign and_ln40_fu_1053_p2 = (or_ln40_fu_1047_p2 & and_ln38_fu_1005_p2);

assign and_ln55_fu_1306_p2 = (xor_ln55_fu_1294_p2 & icmp_ln59_fu_1300_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == In_ddr_RVALID) & (icmp_ln24_reg_1412 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == In_ddr_RVALID) & (icmp_ln24_reg_1412 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == W_ddr_RVALID) & (icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == W_ddr_RVALID) & (icmp_ln38_reg_1464 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((1'b0 == W_ddr_RVALID) & (icmp_ln38_reg_1464 == 1'd0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_io = ((icmp_ln55_reg_1531_pp2_iter1_reg == 1'd0) & (1'b0 == Out_ddr_WREADY));
end

assign ap_block_state25_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((1'b0 == In_ddr_RVALID) & (icmp_ln24_reg_1412 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln30_fu_926_p1 = In_ddr_RDATA;

assign bitcast_ln46_fu_1127_p1 = W_ddr_RDATA;

assign grp_convolution_fu_764_ap_start = grp_convolution_fu_764_ap_start_reg;

assign icmp_ln24_fu_802_p2 = ((indvar_flatten17_reg_588 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_814_p2 = ((indvar_flatten_reg_610 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_846_p2 = ((L_chi_1_reg_632 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_943_p2 = ((indvar_flatten59_reg_643 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_955_p2 = ((indvar_flatten37_reg_665 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_1011_p2 = ((indvar_flatten25_reg_687 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_999_p2 = ((L_kr_reg_698 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1200_p2 = ((indvar_flatten101_reg_709 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1212_p2 = ((indvar_flatten71_reg_731 == 7'd56) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1300_p2 = ((L_cho_1_reg_753 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln26_fu_864_p2 = (icmp_ln26_fu_814_p2 | and_ln24_fu_852_p2);

assign or_ln40_fu_1047_p2 = (xor_ln40_fu_1041_p2 | icmp_ln40_fu_955_p2);

assign or_ln42_1_fu_1099_p2 = (icmp_ln40_fu_955_p2 | and_ln38_1_fu_1017_p2);

assign or_ln42_2_fu_1073_p2 = (or_ln42_fu_1067_p2 | icmp_ln40_fu_955_p2);

assign or_ln42_fu_1067_p2 = (and_ln40_fu_1053_p2 | and_ln38_1_fu_1017_p2);

assign or_ln57_fu_1318_p2 = (icmp_ln57_fu_1212_p2 | and_ln55_fu_1306_p2);

assign p_shl_cast_fu_1260_p3 = {{select_ln55_1_fu_1252_p3}, {4'd0}};

assign select_ln24_1_fu_828_p3 = ((icmp_ln26_fu_814_p2[0:0] == 1'b1) ? add_ln24_fu_808_p2 : ap_phi_mux_L_ri_phi_fu_603_p4);

assign select_ln24_fu_820_p3 = ((icmp_ln26_fu_814_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_L_ci_phi_fu_625_p4);

assign select_ln26_1_fu_878_p3 = ((and_ln24_fu_852_p2[0:0] == 1'b1) ? add_ln26_fu_858_p2 : select_ln24_fu_820_p3);

assign select_ln26_2_fu_902_p3 = ((icmp_ln26_fu_814_p2[0:0] == 1'b1) ? 8'd1 : add_ln26_1_fu_896_p2);

assign select_ln26_fu_870_p3 = ((or_ln26_fu_864_p2[0:0] == 1'b1) ? 3'd0 : L_chi_1_reg_632);

assign select_ln38_1_fu_969_p3 = ((icmp_ln40_fu_955_p2[0:0] == 1'b1) ? add_ln38_fu_949_p2 : ap_phi_mux_L_cho_phi_fu_658_p4);

assign select_ln38_2_fu_985_p3 = ((icmp_ln40_fu_955_p2[0:0] == 1'b1) ? 2'd0 : trunc_ln46_fu_981_p1);

assign select_ln38_fu_961_p3 = ((icmp_ln40_fu_955_p2[0:0] == 1'b1) ? 3'd0 : L_chi_reg_676);

assign select_ln40_1_fu_1059_p3 = ((and_ln38_1_fu_1017_p2[0:0] == 1'b1) ? add_ln40_fu_1023_p2 : select_ln38_fu_961_p3);

assign select_ln40_2_fu_1119_p3 = ((icmp_ln40_fu_955_p2[0:0] == 1'b1) ? 8'd1 : add_ln40_1_fu_1113_p2);

assign select_ln40_fu_1033_p3 = ((and_ln38_1_fu_1017_p2[0:0] == 1'b1) ? trunc_ln46_1_fu_1029_p1 : select_ln38_2_fu_985_p3);

assign select_ln42_1_fu_1105_p3 = ((or_ln42_1_fu_1099_p2[0:0] == 1'b1) ? 6'd1 : add_ln42_fu_1093_p2);

assign select_ln42_fu_1079_p3 = ((or_ln42_2_fu_1073_p2[0:0] == 1'b1) ? 3'd0 : L_kr_reg_698);

assign select_ln55_1_fu_1252_p3 = ((icmp_ln57_fu_1212_p2[0:0] == 1'b1) ? add_ln55_fu_1206_p2 : ap_phi_mux_L_ro_phi_fu_724_p4);

assign select_ln55_2_fu_1286_p3 = ((icmp_ln57_fu_1212_p2[0:0] == 1'b1) ? sub_ln61_1_fu_1246_p2 : add_ln61_fu_1194_p2);

assign select_ln55_fu_1218_p3 = ((icmp_ln57_fu_1212_p2[0:0] == 1'b1) ? 4'd0 : L_co_reg_742);

assign select_ln57_1_fu_1342_p3 = ((and_ln55_fu_1306_p2[0:0] == 1'b1) ? add_ln61_1_fu_1336_p2 : select_ln55_2_fu_1286_p3);

assign select_ln57_2_fu_1358_p3 = ((and_ln55_fu_1306_p2[0:0] == 1'b1) ? add_ln57_fu_1312_p2 : select_ln55_fu_1218_p3);

assign select_ln57_3_fu_1382_p3 = ((icmp_ln57_fu_1212_p2[0:0] == 1'b1) ? 7'd1 : add_ln57_1_fu_1376_p2);

assign select_ln57_fu_1324_p3 = ((or_ln57_fu_1318_p2[0:0] == 1'b1) ? 3'd0 : L_cho_1_reg_753);

assign sub_ln61_1_fu_1246_p2 = (tmp_50_fu_1226_p3 - zext_ln61_2_fu_1242_p1);

assign sub_ln61_2_fu_1280_p2 = (p_shl_cast_fu_1260_p3 - zext_ln61_3_fu_1276_p1);

assign sub_ln61_fu_1184_p2 = (tmp_48_fu_1164_p3 - zext_ln61_fu_1180_p1);

assign tmp_1_fu_1268_p3 = {{select_ln55_1_fu_1252_p3}, {1'd0}};

assign tmp_48_fu_1164_p3 = {{ap_phi_mux_L_ro_phi_fu_724_p4}, {4'd0}};

assign tmp_49_fu_1172_p3 = {{ap_phi_mux_L_ro_phi_fu_724_p4}, {1'd0}};

assign tmp_50_cast_fu_910_p3 = {{trunc_ln30_reg_1421}, {4'd0}};

assign tmp_50_fu_1226_p3 = {{add_ln55_fu_1206_p2}, {4'd0}};

assign tmp_51_fu_1234_p3 = {{add_ln55_fu_1206_p2}, {1'd0}};

assign tmp_s_fu_1131_p3 = {{select_ln42_reg_1486_pp1_iter1_reg}, {2'd0}};

assign trunc_ln30_1_fu_886_p1 = select_ln26_fu_870_p3[1:0];

assign trunc_ln30_fu_836_p1 = select_ln24_1_fu_828_p3[3:0];

assign trunc_ln38_fu_977_p1 = select_ln38_1_fu_969_p3[1:0];

assign trunc_ln46_1_fu_1029_p1 = add_ln40_fu_1023_p2[1:0];

assign trunc_ln46_fu_981_p1 = L_chi_reg_676[1:0];

assign trunc_ln61_fu_1366_p1 = select_ln57_fu_1324_p3[1:0];

assign xor_ln24_fu_840_p2 = (icmp_ln26_fu_814_p2 ^ 1'd1);

assign xor_ln38_fu_993_p2 = (icmp_ln40_fu_955_p2 ^ 1'd1);

assign xor_ln40_fu_1041_p2 = (icmp_ln42_fu_1011_p2 ^ 1'd1);

assign xor_ln55_fu_1294_p2 = (icmp_ln57_fu_1212_p2 ^ 1'd1);

assign zext_ln30_1_fu_930_p1 = add_ln30_reg_1446;

assign zext_ln30_fu_917_p1 = select_ln26_1_reg_1426;

assign zext_ln46_fu_1138_p1 = tmp_s_fu_1131_p3;

assign zext_ln61_1_fu_1190_p1 = L_co_reg_742;

assign zext_ln61_2_fu_1242_p1 = tmp_51_fu_1234_p3;

assign zext_ln61_3_fu_1276_p1 = tmp_1_fu_1268_p3;

assign zext_ln61_4_fu_1332_p1 = add_ln57_fu_1312_p2;

assign zext_ln61_5_fu_1350_p1 = select_ln57_1_fu_1342_p3;

assign zext_ln61_fu_1180_p1 = tmp_49_fu_1172_p3;

endmodule //conv_acc4t
