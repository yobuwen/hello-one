// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_gemv_example_gemv,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1364,HLS_SYN_LUT=618,HLS_VERSION=2020_2}" *)

module example_gemv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_pp0_stage1 = 8'd32;
parameter    ap_ST_fsm_pp0_stage2 = 8'd64;
parameter    ap_ST_fsm_state12 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [2:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [2:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [2:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg[4:0] A_address1;
reg A_ce1;
reg[2:0] b_address0;
reg b_ce0;
reg[2:0] b_address1;
reg b_ce1;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_reg_180;
reg   [2:0] i_reg_180_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] b_load_reg_317;
wire    ap_CS_fsm_state2;
reg  signed [31:0] b_load_1_reg_332;
wire    ap_CS_fsm_state3;
reg  signed [31:0] b_load_2_reg_337;
reg  signed [31:0] b_load_3_reg_352;
wire    ap_CS_fsm_state4;
reg  signed [31:0] b_load_4_reg_357;
wire   [0:0] icmp_ln6_fu_192_p2;
reg   [0:0] icmp_ln6_reg_362;
reg   [0:0] icmp_ln6_reg_362_pp0_iter1_reg;
wire   [4:0] empty_5_fu_210_p2;
reg   [4:0] empty_5_reg_366;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] A_load_2_reg_388;
reg    ap_enable_reg_pp0_iter0;
reg  signed [31:0] A_load_3_reg_393;
wire   [2:0] add_ln6_fu_252_p2;
reg   [2:0] add_ln6_reg_403;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [31:0] A_load_reg_408;
reg  signed [31:0] A_load_4_reg_418;
reg  signed [31:0] A_load_1_reg_423;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_268_p2;
reg   [31:0] mul_ln11_2_reg_428;
wire   [31:0] grp_fu_272_p2;
reg   [31:0] mul_ln11_3_reg_433;
wire   [31:0] grp_fu_276_p2;
reg   [31:0] mul_ln11_reg_438;
wire   [31:0] grp_fu_280_p2;
reg   [31:0] mul_ln11_4_reg_443;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] mul_ln11_1_reg_448;
wire   [31:0] add_ln11_6_fu_292_p2;
reg   [31:0] add_ln11_6_reg_453;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] ap_phi_mux_i_phi_fu_184_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln11_2_fu_222_p1;
wire   [63:0] zext_ln11_3_fu_233_p1;
wire   [63:0] zext_ln11_fu_238_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln11_4_fu_247_p1;
wire   [63:0] zext_ln11_1_fu_263_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] i_cast3_fu_297_p1;
wire   [4:0] p_shl_fu_202_p3;
wire   [4:0] i_cast_fu_198_p1;
wire   [4:0] add_ln11_1_fu_216_p2;
wire   [4:0] add_ln11_2_fu_227_p2;
wire   [4:0] add_ln11_3_fu_242_p2;
wire   [4:0] add_ln11_fu_258_p2;
wire   [31:0] add_ln11_5_fu_288_p2;
wire   [31:0] add_ln11_4_fu_302_p2;
wire    ap_CS_fsm_state12;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

example_gemv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_2_reg_337),
    .din1(A_load_2_reg_388),
    .ce(1'b1),
    .dout(grp_fu_268_p2)
);

example_gemv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_3_reg_352),
    .din1(A_load_3_reg_393),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

example_gemv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_reg_317),
    .din1(A_load_reg_408),
    .ce(1'b1),
    .dout(grp_fu_276_p2)
);

example_gemv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_4_reg_357),
    .din1(A_load_4_reg_418),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

example_gemv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_1_reg_332),
    .din1(A_load_1_reg_423),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_180 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln6_reg_362 == 1'd0))) begin
        i_reg_180 <= add_ln6_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln6_reg_362 == 1'd0))) begin
        A_load_1_reg_423 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_reg_362 == 1'd0))) begin
        A_load_2_reg_388 <= A_q1;
        A_load_3_reg_393 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_reg_362 == 1'd0))) begin
        A_load_4_reg_418 <= A_q0;
        A_load_reg_408 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln6_reg_362_pp0_iter1_reg == 1'd0))) begin
        add_ln11_6_reg_453 <= add_ln11_6_fu_292_p2;
        mul_ln11_1_reg_448 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln6_reg_403 <= add_ln6_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_load_1_reg_332 <= b_q1;
        b_load_2_reg_337 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_load_3_reg_352 <= b_q0;
        b_load_4_reg_357 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_load_reg_317 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_5_reg_366 <= empty_5_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_180_pp0_iter1_reg <= i_reg_180;
        icmp_ln6_reg_362 <= icmp_ln6_fu_192_p2;
        icmp_ln6_reg_362_pp0_iter1_reg <= icmp_ln6_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln6_reg_362 == 1'd0))) begin
        mul_ln11_2_reg_428 <= grp_fu_268_p2;
        mul_ln11_3_reg_433 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln6_reg_362_pp0_iter1_reg == 1'd0))) begin
        mul_ln11_4_reg_443 <= grp_fu_280_p2;
        mul_ln11_reg_438 <= grp_fu_276_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            A_address0 = zext_ln11_1_fu_263_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address0 = zext_ln11_4_fu_247_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            A_address0 = zext_ln11_3_fu_233_p1;
        end else begin
            A_address0 = 'bx;
        end
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address1 = zext_ln11_fu_238_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            A_address1 = zext_ln11_2_fu_222_p1;
        end else begin
            A_address1 = 'bx;
        end
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6_reg_362 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln6_reg_362 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_184_p4 = add_ln6_reg_403;
    end else begin
        ap_phi_mux_i_phi_fu_184_p4 = i_reg_180;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln6_reg_362_pp0_iter1_reg == 1'd0))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_reg_362 == 1'd1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_reg_362 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_216_p2 = (empty_5_fu_210_p2 + 5'd2);

assign add_ln11_2_fu_227_p2 = (empty_5_fu_210_p2 + 5'd3);

assign add_ln11_3_fu_242_p2 = (empty_5_reg_366 + 5'd4);

assign add_ln11_4_fu_302_p2 = (mul_ln11_1_reg_448 + mul_ln11_reg_438);

assign add_ln11_5_fu_288_p2 = (mul_ln11_3_reg_433 + mul_ln11_4_reg_443);

assign add_ln11_6_fu_292_p2 = (add_ln11_5_fu_288_p2 + mul_ln11_2_reg_428);

assign add_ln11_fu_258_p2 = (empty_5_reg_366 + 5'd1);

assign add_ln6_fu_252_p2 = (i_reg_180 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_address0 = i_cast3_fu_297_p1;

assign c_d0 = (add_ln11_6_reg_453 + add_ln11_4_fu_302_p2);

assign empty_5_fu_210_p2 = (p_shl_fu_202_p3 + i_cast_fu_198_p1);

assign i_cast3_fu_297_p1 = i_reg_180_pp0_iter1_reg;

assign i_cast_fu_198_p1 = ap_phi_mux_i_phi_fu_184_p4;

assign icmp_ln6_fu_192_p2 = ((ap_phi_mux_i_phi_fu_184_p4 == 3'd5) ? 1'b1 : 1'b0);

assign p_shl_fu_202_p3 = {{ap_phi_mux_i_phi_fu_184_p4}, {2'd0}};

assign zext_ln11_1_fu_263_p1 = add_ln11_fu_258_p2;

assign zext_ln11_2_fu_222_p1 = add_ln11_1_fu_216_p2;

assign zext_ln11_3_fu_233_p1 = add_ln11_2_fu_227_p2;

assign zext_ln11_4_fu_247_p1 = add_ln11_3_fu_242_p2;

assign zext_ln11_fu_238_p1 = empty_5_reg_366;

endmodule //example_gemv
