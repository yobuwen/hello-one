-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_add is
generic (
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_C_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_a_AWVALID : OUT STD_LOGIC;
    m_axi_a_AWREADY : IN STD_LOGIC;
    m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_a_WVALID : OUT STD_LOGIC;
    m_axi_a_WREADY : IN STD_LOGIC;
    m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_a_WLAST : OUT STD_LOGIC;
    m_axi_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_a_ARVALID : OUT STD_LOGIC;
    m_axi_a_ARREADY : IN STD_LOGIC;
    m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_a_RVALID : IN STD_LOGIC;
    m_axi_a_RREADY : OUT STD_LOGIC;
    m_axi_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_RLAST : IN STD_LOGIC;
    m_axi_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BVALID : IN STD_LOGIC;
    m_axi_a_BREADY : OUT STD_LOGIC;
    m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0);
    m_axi_b_AWVALID : OUT STD_LOGIC;
    m_axi_b_AWREADY : IN STD_LOGIC;
    m_axi_b_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_b_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_b_WVALID : OUT STD_LOGIC;
    m_axi_b_WREADY : IN STD_LOGIC;
    m_axi_b_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_b_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_b_WLAST : OUT STD_LOGIC;
    m_axi_b_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_b_ARVALID : OUT STD_LOGIC;
    m_axi_b_ARREADY : IN STD_LOGIC;
    m_axi_b_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_b_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_b_RVALID : IN STD_LOGIC;
    m_axi_b_RREADY : OUT STD_LOGIC;
    m_axi_b_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_b_RLAST : IN STD_LOGIC;
    m_axi_b_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_BVALID : IN STD_LOGIC;
    m_axi_b_BREADY : OUT STD_LOGIC;
    m_axi_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_c_AWVALID : OUT STD_LOGIC;
    m_axi_c_AWREADY : IN STD_LOGIC;
    m_axi_c_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_AWUSER_WIDTH-1 downto 0);
    m_axi_c_WVALID : OUT STD_LOGIC;
    m_axi_c_WREADY : IN STD_LOGIC;
    m_axi_c_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH/8-1 downto 0);
    m_axi_c_WLAST : OUT STD_LOGIC;
    m_axi_c_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_WUSER_WIDTH-1 downto 0);
    m_axi_c_ARVALID : OUT STD_LOGIC;
    m_axi_c_ARREADY : IN STD_LOGIC;
    m_axi_c_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ARUSER_WIDTH-1 downto 0);
    m_axi_c_RVALID : IN STD_LOGIC;
    m_axi_c_RREADY : OUT STD_LOGIC;
    m_axi_c_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_RLAST : IN STD_LOGIC;
    m_axi_c_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_RUSER_WIDTH-1 downto 0);
    m_axi_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BVALID : IN STD_LOGIC;
    m_axi_c_BREADY : OUT STD_LOGIC;
    m_axi_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of vector_add is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vector_add_vector_add,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1923,HLS_SYN_LUT=2147,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_blk_n_AR : STD_LOGIC;
    signal a_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal b_blk_n_AR : STD_LOGIC;
    signal b_blk_n_R : STD_LOGIC;
    signal c_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal c_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln21_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal a_AWREADY : STD_LOGIC;
    signal a_WREADY : STD_LOGIC;
    signal a_ARVALID : STD_LOGIC;
    signal a_ARREADY : STD_LOGIC;
    signal a_RVALID : STD_LOGIC;
    signal a_RREADY : STD_LOGIC;
    signal a_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_RLAST : STD_LOGIC;
    signal a_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BVALID : STD_LOGIC;
    signal a_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_AWREADY : STD_LOGIC;
    signal b_WREADY : STD_LOGIC;
    signal b_ARVALID : STD_LOGIC;
    signal b_ARREADY : STD_LOGIC;
    signal b_RVALID : STD_LOGIC;
    signal b_RREADY : STD_LOGIC;
    signal b_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal b_RLAST : STD_LOGIC;
    signal b_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_BVALID : STD_LOGIC;
    signal b_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_AWVALID : STD_LOGIC;
    signal c_AWREADY : STD_LOGIC;
    signal c_WVALID : STD_LOGIC;
    signal c_WREADY : STD_LOGIC;
    signal c_ARREADY : STD_LOGIC;
    signal c_RVALID : STD_LOGIC;
    signal c_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal c_RLAST : STD_LOGIC;
    signal c_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_BVALID : STD_LOGIC;
    signal c_BREADY : STD_LOGIC;
    signal c_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln10_fu_194_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln10_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln21_fu_311_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln21_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_332_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state13 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_164_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i_1_phi_fu_176_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state1_io : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal tmp_a_2_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_2_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_2_2_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_b_2_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_b_2_1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_b_2_2_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_c_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_c_0_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_c_2_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_c_2_2_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_278_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_266_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component vector_add_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vector_add_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component vector_add_a_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_add_b_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_add_c_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component vector_add_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    a_m_axi_U : component vector_add_a_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_A_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_AWVALID,
        AWREADY => m_axi_a_AWREADY,
        AWADDR => m_axi_a_AWADDR,
        AWID => m_axi_a_AWID,
        AWLEN => m_axi_a_AWLEN,
        AWSIZE => m_axi_a_AWSIZE,
        AWBURST => m_axi_a_AWBURST,
        AWLOCK => m_axi_a_AWLOCK,
        AWCACHE => m_axi_a_AWCACHE,
        AWPROT => m_axi_a_AWPROT,
        AWQOS => m_axi_a_AWQOS,
        AWREGION => m_axi_a_AWREGION,
        AWUSER => m_axi_a_AWUSER,
        WVALID => m_axi_a_WVALID,
        WREADY => m_axi_a_WREADY,
        WDATA => m_axi_a_WDATA,
        WSTRB => m_axi_a_WSTRB,
        WLAST => m_axi_a_WLAST,
        WID => m_axi_a_WID,
        WUSER => m_axi_a_WUSER,
        ARVALID => m_axi_a_ARVALID,
        ARREADY => m_axi_a_ARREADY,
        ARADDR => m_axi_a_ARADDR,
        ARID => m_axi_a_ARID,
        ARLEN => m_axi_a_ARLEN,
        ARSIZE => m_axi_a_ARSIZE,
        ARBURST => m_axi_a_ARBURST,
        ARLOCK => m_axi_a_ARLOCK,
        ARCACHE => m_axi_a_ARCACHE,
        ARPROT => m_axi_a_ARPROT,
        ARQOS => m_axi_a_ARQOS,
        ARREGION => m_axi_a_ARREGION,
        ARUSER => m_axi_a_ARUSER,
        RVALID => m_axi_a_RVALID,
        RREADY => m_axi_a_RREADY,
        RDATA => m_axi_a_RDATA,
        RLAST => m_axi_a_RLAST,
        RID => m_axi_a_RID,
        RUSER => m_axi_a_RUSER,
        RRESP => m_axi_a_RRESP,
        BVALID => m_axi_a_BVALID,
        BREADY => m_axi_a_BREADY,
        BRESP => m_axi_a_BRESP,
        BID => m_axi_a_BID,
        BUSER => m_axi_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => a_ARVALID,
        I_ARREADY => a_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_3,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => a_RVALID,
        I_RREADY => a_RREADY,
        I_RDATA => a_RDATA,
        I_RID => a_RID,
        I_RUSER => a_RUSER,
        I_RRESP => a_RRESP,
        I_RLAST => a_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => a_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => a_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => a_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => a_BRESP,
        I_BID => a_BID,
        I_BUSER => a_BUSER);

    b_m_axi_U : component vector_add_b_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_B_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b_AWVALID,
        AWREADY => m_axi_b_AWREADY,
        AWADDR => m_axi_b_AWADDR,
        AWID => m_axi_b_AWID,
        AWLEN => m_axi_b_AWLEN,
        AWSIZE => m_axi_b_AWSIZE,
        AWBURST => m_axi_b_AWBURST,
        AWLOCK => m_axi_b_AWLOCK,
        AWCACHE => m_axi_b_AWCACHE,
        AWPROT => m_axi_b_AWPROT,
        AWQOS => m_axi_b_AWQOS,
        AWREGION => m_axi_b_AWREGION,
        AWUSER => m_axi_b_AWUSER,
        WVALID => m_axi_b_WVALID,
        WREADY => m_axi_b_WREADY,
        WDATA => m_axi_b_WDATA,
        WSTRB => m_axi_b_WSTRB,
        WLAST => m_axi_b_WLAST,
        WID => m_axi_b_WID,
        WUSER => m_axi_b_WUSER,
        ARVALID => m_axi_b_ARVALID,
        ARREADY => m_axi_b_ARREADY,
        ARADDR => m_axi_b_ARADDR,
        ARID => m_axi_b_ARID,
        ARLEN => m_axi_b_ARLEN,
        ARSIZE => m_axi_b_ARSIZE,
        ARBURST => m_axi_b_ARBURST,
        ARLOCK => m_axi_b_ARLOCK,
        ARCACHE => m_axi_b_ARCACHE,
        ARPROT => m_axi_b_ARPROT,
        ARQOS => m_axi_b_ARQOS,
        ARREGION => m_axi_b_ARREGION,
        ARUSER => m_axi_b_ARUSER,
        RVALID => m_axi_b_RVALID,
        RREADY => m_axi_b_RREADY,
        RDATA => m_axi_b_RDATA,
        RLAST => m_axi_b_RLAST,
        RID => m_axi_b_RID,
        RUSER => m_axi_b_RUSER,
        RRESP => m_axi_b_RRESP,
        BVALID => m_axi_b_BVALID,
        BREADY => m_axi_b_BREADY,
        BRESP => m_axi_b_BRESP,
        BID => m_axi_b_BID,
        BUSER => m_axi_b_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => b_ARVALID,
        I_ARREADY => b_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_3,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => b_RVALID,
        I_RREADY => b_RREADY,
        I_RDATA => b_RDATA,
        I_RID => b_RID,
        I_RUSER => b_RUSER,
        I_RRESP => b_RRESP,
        I_RLAST => b_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => b_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => b_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => b_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => b_BRESP,
        I_BID => b_BID,
        I_BUSER => b_BUSER);

    c_m_axi_U : component vector_add_c_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_C_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_C_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_c_AWVALID,
        AWREADY => m_axi_c_AWREADY,
        AWADDR => m_axi_c_AWADDR,
        AWID => m_axi_c_AWID,
        AWLEN => m_axi_c_AWLEN,
        AWSIZE => m_axi_c_AWSIZE,
        AWBURST => m_axi_c_AWBURST,
        AWLOCK => m_axi_c_AWLOCK,
        AWCACHE => m_axi_c_AWCACHE,
        AWPROT => m_axi_c_AWPROT,
        AWQOS => m_axi_c_AWQOS,
        AWREGION => m_axi_c_AWREGION,
        AWUSER => m_axi_c_AWUSER,
        WVALID => m_axi_c_WVALID,
        WREADY => m_axi_c_WREADY,
        WDATA => m_axi_c_WDATA,
        WSTRB => m_axi_c_WSTRB,
        WLAST => m_axi_c_WLAST,
        WID => m_axi_c_WID,
        WUSER => m_axi_c_WUSER,
        ARVALID => m_axi_c_ARVALID,
        ARREADY => m_axi_c_ARREADY,
        ARADDR => m_axi_c_ARADDR,
        ARID => m_axi_c_ARID,
        ARLEN => m_axi_c_ARLEN,
        ARSIZE => m_axi_c_ARSIZE,
        ARBURST => m_axi_c_ARBURST,
        ARLOCK => m_axi_c_ARLOCK,
        ARCACHE => m_axi_c_ARCACHE,
        ARPROT => m_axi_c_ARPROT,
        ARQOS => m_axi_c_ARQOS,
        ARREGION => m_axi_c_ARREGION,
        ARUSER => m_axi_c_ARUSER,
        RVALID => m_axi_c_RVALID,
        RREADY => m_axi_c_RREADY,
        RDATA => m_axi_c_RDATA,
        RLAST => m_axi_c_RLAST,
        RID => m_axi_c_RID,
        RUSER => m_axi_c_RUSER,
        RRESP => m_axi_c_RRESP,
        BVALID => m_axi_c_BVALID,
        BREADY => m_axi_c_BREADY,
        BRESP => m_axi_c_BRESP,
        BID => m_axi_c_BID,
        BUSER => m_axi_c_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => c_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => c_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => c_RDATA,
        I_RID => c_RID,
        I_RUSER => c_RUSER,
        I_RRESP => c_RRESP,
        I_RLAST => c_RLAST,
        I_AWVALID => c_AWVALID,
        I_AWREADY => c_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_3,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => c_WVALID,
        I_WREADY => c_WREADY,
        I_WDATA => tmp_2_reg_424,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => c_BVALID,
        I_BREADY => c_BREADY,
        I_BRESP => c_BRESP,
        I_BID => c_BID,
        I_BUSER => c_BUSER);

    mux_32_32_1_1_U1 : component vector_add_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_a_2_fu_78,
        din1 => tmp_a_2_1_fu_82,
        din2 => tmp_a_2_2_fu_86,
        din3 => i_1_reg_172,
        dout => tmp_fu_266_p5);

    mux_32_32_1_1_U2 : component vector_add_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_b_2_fu_90,
        din1 => tmp_b_2_1_fu_94,
        din2 => tmp_b_2_2_fu_98,
        din3 => i_1_reg_172,
        dout => tmp_1_fu_278_p5);

    mux_32_32_1_1_U3 : component vector_add_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_c_2_fu_102,
        din1 => tmp_c_2_1_fu_106,
        din2 => tmp_c_2_2_fu_110,
        din3 => i_2_reg_183,
        dout => tmp_2_fu_332_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((c_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((c_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_172 <= ap_const_lv2_0;
            elsif (((icmp_ln16_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_1_reg_172 <= add_ln16_fu_236_p2;
            end if; 
        end if;
    end process;

    i_2_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((c_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_2_reg_183 <= ap_const_lv2_0;
            elsif (((icmp_ln21_fu_317_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_183 <= add_ln21_fu_311_p2;
            end if; 
        end if;
    end process;

    i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_385 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_160 <= add_ln10_reg_380;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_380 <= add_ln10_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_385 <= icmp_ln10_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln21_reg_420 <= icmp_ln21_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_317_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_2_reg_424 <= tmp_2_fu_332_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_reg_160 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_a_2_1_fu_82 <= a_RDATA;
                tmp_b_2_1_fu_94 <= b_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_reg_160 = ap_const_lv2_1)) and not((i_reg_160 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_a_2_2_fu_86 <= a_RDATA;
                tmp_b_2_2_fu_98 <= b_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_reg_160 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_a_2_fu_78 <= a_RDATA;
                tmp_b_2_fu_90 <= b_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_242_p2 = ap_const_lv1_0) and (ap_phi_mux_i_1_phi_fu_176_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_c_2_1_fu_106 <= tmp_c_0_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i_1_phi_fu_176_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_1_phi_fu_176_p4 = ap_const_lv2_0)) and (icmp_ln16_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_c_2_2_fu_110 <= tmp_c_0_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_242_p2 = ap_const_lv1_0) and (ap_phi_mux_i_1_phi_fu_176_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_c_2_fu_102 <= tmp_c_0_fu_290_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state19, c_AWREADY, c_BVALID, ap_enable_reg_pp0_iter0, icmp_ln10_fu_200_p2, ap_CS_fsm_state11, ap_enable_reg_pp2_iter0, icmp_ln21_fu_317_p2, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, icmp_ln16_fu_242_p2, ap_block_state1_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln10_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln10_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln16_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((c_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln21_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln21_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((c_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_ARVALID <= ap_const_logic_1;
        else 
            a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_RREADY <= ap_const_logic_1;
        else 
            a_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_a_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_blk_n_AR <= m_axi_a_ARREADY;
        else 
            a_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_R_assign_proc : process(m_axi_a_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_blk_n_R <= m_axi_a_RVALID;
        else 
            a_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln10_fu_194_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_164_p4) + unsigned(ap_const_lv2_1));
    add_ln16_fu_236_p2 <= std_logic_vector(unsigned(i_1_reg_172) + unsigned(ap_const_lv2_1));
    add_ln21_fu_311_p2 <= std_logic_vector(unsigned(i_2_reg_183) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, a_RVALID, b_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((b_RVALID = ap_const_logic_0) or (ap_const_logic_0 = a_RVALID)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, a_RVALID, b_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((b_RVALID = ap_const_logic_0) or (ap_const_logic_0 = a_RVALID)));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state14_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state14_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_state13_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(icmp_ln21_reg_420, c_WREADY)
    begin
                ap_block_state14_io <= ((c_WREADY = ap_const_logic_0) and (icmp_ln21_reg_420 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_io_assign_proc : process(a_ARREADY, b_ARREADY)
    begin
                ap_block_state1_io <= ((b_ARREADY = ap_const_logic_0) or (ap_const_logic_0 = a_ARREADY));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(a_RVALID, b_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((b_RVALID = ap_const_logic_0) or (ap_const_logic_0 = a_RVALID));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln10_fu_200_p2)
    begin
        if ((icmp_ln10_fu_200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state13_assign_proc : process(icmp_ln21_fu_317_p2)
    begin
        if ((icmp_ln21_fu_317_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19, c_BVALID)
    begin
        if (((c_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_1_phi_fu_176_p4 <= i_1_reg_172;

    ap_phi_mux_i_phi_fu_164_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_160, add_ln10_reg_380, icmp_ln10_reg_385)
    begin
        if (((icmp_ln10_reg_385 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_164_p4 <= add_ln10_reg_380;
        else 
            ap_phi_mux_i_phi_fu_164_p4 <= i_reg_160;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, c_BVALID)
    begin
        if (((c_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_ARVALID <= ap_const_logic_1;
        else 
            b_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    b_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_RREADY <= ap_const_logic_1;
        else 
            b_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    b_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_b_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_blk_n_AR <= m_axi_b_ARREADY;
        else 
            b_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    b_blk_n_R_assign_proc : process(m_axi_b_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_blk_n_R <= m_axi_b_RVALID;
        else 
            b_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    c_AWVALID_assign_proc : process(ap_CS_fsm_state12, c_AWREADY)
    begin
        if (((c_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            c_AWVALID <= ap_const_logic_1;
        else 
            c_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_BREADY_assign_proc : process(ap_CS_fsm_state19, c_BVALID)
    begin
        if (((c_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            c_BREADY <= ap_const_logic_1;
        else 
            c_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    c_WVALID_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln21_reg_420, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln21_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            c_WVALID <= ap_const_logic_1;
        else 
            c_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_AW_assign_proc : process(m_axi_c_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_blk_n_AW <= m_axi_c_AWREADY;
        else 
            c_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    c_blk_n_B_assign_proc : process(m_axi_c_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_blk_n_B <= m_axi_c_BVALID;
        else 
            c_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    c_blk_n_W_assign_proc : process(m_axi_c_WREADY, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln21_reg_420)
    begin
        if (((icmp_ln21_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            c_blk_n_W <= m_axi_c_WREADY;
        else 
            c_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln10_fu_200_p2 <= "1" when (ap_phi_mux_i_phi_fu_164_p4 = ap_const_lv2_3) else "0";
    icmp_ln16_fu_242_p2 <= "1" when (i_1_reg_172 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_317_p2 <= "1" when (i_2_reg_183 = ap_const_lv2_3) else "0";
    tmp_c_0_fu_290_p2 <= std_logic_vector(unsigned(tmp_1_fu_278_p5) + unsigned(tmp_fu_266_p5));
end behav;
